{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3","program":"/Users/spluta1/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","bwavfile","--edition=2018","/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=557c1e024096530f","-C","extra-filename=-557c1e024096530f","--out-dir","/Users/spluta1/Documents/rust/time_stretch/target/rls/debug/deps","-L","dependency=/Users/spluta1/Documents/rust/time_stretch/target/rls/debug/deps","--extern","byteorder=/Users/spluta1/Documents/rust/time_stretch/target/rls/debug/deps/libbyteorder-e444336c78c4c7d2.rmeta","--extern","clap=/Users/spluta1/Documents/rust/time_stretch/target/rls/debug/deps/libclap-7fb48421ff292c56.rmeta","--extern","encoding=/Users/spluta1/Documents/rust/time_stretch/target/rls/debug/deps/libencoding-7faeb2ef9cca604e.rmeta","--extern","uuid=/Users/spluta1/Documents/rust/time_stretch/target/rls/debug/deps/libuuid-5845c0770a9bcc6d.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/spluta1/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/spluta1/Documents/rust/time_stretch/target/rls/debug/deps/libbwavfile-557c1e024096530f.rmeta"},"prelude":{"crate_id":{"name":"bwavfile","disambiguator":[10715821786386601743,12382280607051564342]},"crate_root":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src","external_crates":[{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[11266178634318078844,10430434914575217037]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[11698766721189094488,12060600386163665861]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[7682173449702177568,11032960836976215208]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[4743338922599007115,7423637119316760057]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[2427264904945132901,10184032034968735412]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[9774951351864599068,14817832832842499961]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[10809433593918525561,458952361993985826]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15028772050842969220,14160812736163645060]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[6995225455969351707,4449664983666090491]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8140348155906305511,16205222570971502248]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[233178625001733801,10631967199943834554]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[1525994598401419908,3288373240607898362]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[6171023582747105604,8380219937402072808]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[16379221974889702373,16836676840445794723]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[17037182358159064978,13693302728723089691]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/lib.rs","num":16,"id":{"name":"encoding","disambiguator":[579651064616567237,3128200973403477003]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/lib.rs","num":17,"id":{"name":"encoding_index_singlebyte","disambiguator":[11123731231190789339,7073270620083979187]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/lib.rs","num":18,"id":{"name":"encoding_index_korean","disambiguator":[11571839067203053490,13466524103580804605]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/lib.rs","num":19,"id":{"name":"encoding_index_japanese","disambiguator":[10333773211393809117,3964242344788347014]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/lib.rs","num":20,"id":{"name":"encoding_index_simpchinese","disambiguator":[14366176810077006525,15724405579965190726]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/lib.rs","num":21,"id":{"name":"encoding_index_tradchinese","disambiguator":[1056704115531211408,8015942643401588310]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/lib.rs","num":22,"id":{"name":"byteorder","disambiguator":[13764544060857333384,1385711767677327606]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/lib.rs","num":23,"id":{"name":"uuid","disambiguator":[13478874452864606368,813470704666407780]}}],"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/lib.rs","byte_start":0,"byte_end":1655,"line_start":1,"line_end":69,"column_start":1,"column_end":18}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":792},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/lib.rs","byte_start":1385,"byte_end":1390,"line_start":63,"line_end":63,"column_start":17,"column_end":22},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1065},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/lib.rs","byte_start":1413,"byte_end":1423,"line_start":64,"line_end":64,"column_start":22,"column_end":32},"alias_span":null,"name":"WaveReader","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1056},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/lib.rs","byte_start":1425,"byte_end":1441,"line_start":64,"line_end":64,"column_start":34,"column_end":50},"alias_span":null,"name":"AudioFrameReader","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":708},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/lib.rs","byte_start":1465,"byte_end":1475,"line_start":65,"line_end":65,"column_start":22,"column_end":32},"alias_span":null,"name":"WaveWriter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":684},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/lib.rs","byte_start":1477,"byte_end":1493,"line_start":65,"line_end":65,"column_start":34,"column_end":50},"alias_span":null,"name":"AudioFrameWriter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":950},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/lib.rs","byte_start":1510,"byte_end":1514,"line_start":66,"line_end":66,"column_start":15,"column_end":19},"alias_span":null,"name":"Bext","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1043},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/lib.rs","byte_start":1530,"byte_end":1537,"line_start":67,"line_end":67,"column_start":15,"column_end":22},"alias_span":null,"name":"WaveFmt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1034},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/lib.rs","byte_start":1539,"byte_end":1554,"line_start":67,"line_end":67,"column_start":24,"column_end":39},"alias_span":null,"name":"WaveFmtExtended","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":437},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/lib.rs","byte_start":1556,"byte_end":1573,"line_start":67,"line_end":67,"column_start":41,"column_end":58},"alias_span":null,"name":"ChannelDescriptor","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":968},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/lib.rs","byte_start":1575,"byte_end":1586,"line_start":67,"line_end":67,"column_start":60,"column_end":71},"alias_span":null,"name":"ChannelMask","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":430},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/lib.rs","byte_start":1588,"byte_end":1598,"line_start":67,"line_end":67,"column_start":73,"column_end":83},"alias_span":null,"name":"ADMAudioID","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":818},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/lib.rs","byte_start":1624,"byte_end":1636,"line_start":68,"line_end":68,"column_start":24,"column_end":36},"alias_span":null,"name":"CommonFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":379},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/lib.rs","byte_start":1651,"byte_end":1654,"line_start":69,"line_end":69,"column_start":14,"column_end":17},"alias_span":null,"name":"Cue","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/lib.rs","byte_start":0,"byte_end":1655,"line_start":1,"line_end":69,"column_start":1,"column_end":18},"name":"","qualname":"::","value":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":73},{"krate":0,"index":87},{"krate":0,"index":105},{"krate":0,"index":186},{"krate":0,"index":215},{"krate":0,"index":287},{"krate":0,"index":403},{"krate":0,"index":407},{"krate":0,"index":463},{"krate":0,"index":606},{"krate":0,"index":731},{"krate":0,"index":734},{"krate":0,"index":735},{"krate":0,"index":738},{"krate":0,"index":741},{"krate":0,"index":742},{"krate":0,"index":745},{"krate":0,"index":748},{"krate":0,"index":751},{"krate":0,"index":752},{"krate":0,"index":755},{"krate":0,"index":758},{"krate":0,"index":761},{"krate":0,"index":764},{"krate":0,"index":767},{"krate":0,"index":770}],"decl_id":null,"docs":"# bwavfile\n \nRust Wave File Reader/Writer with Broadcast-WAV, MBWF and RF64 Support","sig":null,"attributes":[{"value":"* \n# bwavfile\n \nRust Wave File Reader/Writer with Broadcast-WAV, MBWF and RF64 Support\n\n## Interfaces\n\n### `WaveReader`\n\n`WaveReader` can open and parse a Wave, Broadcast-Wave, or RF64/BW64 64-bit \nwave file. Metadata can be accessed and parsed in arbitrary order and audio\nsamples can be accessed using the `AudioFrameReader` type, created by an \naccessor method of `WaveReader`.\n\n### `WaveWriter`\n\n`WaveWriter` can create a new Wave, Broadcast-Wave, or RF64/BW64 64-bit wave \nfile. Metadata chunks and audio samples are added sequentially, write-only, to \na Wave file which is automatically promoted from standard Wave to RF64 wave \nwhen the total WAVE form size exceeds 0xFFFFFFFF bytes.\n\n\n## Objectives and Roadmap\n\nThis package aims to support read and writing any kind of WAV file you are likely \nto encounter in a professional audio, motion picture production, broadcast, or music \nproduction.\n\nApps we test against:\n- Avid Pro Tools\n- iZotope RX Audio Editor\n- FFMpeg\n- Audacity\n\n[github]: https://github.com/iluvcapra/bwavfile\n*/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/lib.rs","byte_start":0,"byte_end":1040,"line_start":1,"line_end":36,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":773},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fourcc.rs","byte_start":1868,"byte_end":1874,"line_start":9,"line_end":9,"column_start":12,"column_end":18},"name":"FourCC","qualname":"::fourcc::FourCC","value":"","parent":null,"children":[],"decl_id":null,"docs":" A Four-character Code\n \n For idetifying chunks, structured contiguous slices or segments\n within a WAV file.\n","sig":null,"attributes":[{"value":"/ A Four-character Code","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fourcc.rs","byte_start":1691,"byte_end":1716,"line_start":4,"line_end":4,"column_start":1,"column_end":26}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fourcc.rs","byte_start":1717,"byte_end":1721,"line_start":5,"line_end":5,"column_start":1,"column_end":5}},{"value":"/ For idetifying chunks, structured contiguous slices or segments","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fourcc.rs","byte_start":1722,"byte_end":1789,"line_start":6,"line_end":6,"column_start":1,"column_end":68}},{"value":"/ within a WAV file.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fourcc.rs","byte_start":1790,"byte_end":1812,"line_start":7,"line_end":7,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":14},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fourcc.rs","byte_start":1917,"byte_end":1921,"line_start":12,"line_end":12,"column_start":18,"column_end":22},"name":"make","qualname":"<FourCC>::make","value":"pub const fn make(&[u8; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":793},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/errors.rs","byte_start":5219,"byte_end":5226,"line_start":11,"line_end":11,"column_start":5,"column_end":12},"name":"IOError","qualname":"::errors::Error::IOError","value":"Error::IOError(io::Error)","parent":{"krate":0,"index":792},"children":[],"decl_id":null,"docs":" An `io::Error` occurred\n","sig":null,"attributes":[{"value":"/ An `io::Error` occurred","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/errors.rs","byte_start":5187,"byte_end":5214,"line_start":10,"line_end":10,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":796},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/errors.rs","byte_start":5288,"byte_end":5297,"line_start":14,"line_end":14,"column_start":5,"column_end":14},"name":"UuidError","qualname":"::errors::Error::UuidError","value":"Error::UuidError(uuid::Error)","parent":{"krate":0,"index":792},"children":[],"decl_id":null,"docs":" An error occured reading a tag UUID\n","sig":null,"attributes":[{"value":"/ An error occured reading a tag UUID","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/errors.rs","byte_start":5244,"byte_end":5283,"line_start":13,"line_end":13,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":799},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/errors.rs","byte_start":5379,"byte_end":5398,"line_start":17,"line_end":17,"column_start":5,"column_end":24},"name":"HeaderNotRecognized","qualname":"::errors::Error::HeaderNotRecognized","value":"Error::HeaderNotRecognized","parent":{"krate":0,"index":792},"children":[],"decl_id":null,"docs":" The file does not begin with a recognized WAVE header\n","sig":null,"attributes":[{"value":"/ The file does not begin with a recognized WAVE header","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/errors.rs","byte_start":5317,"byte_end":5374,"line_start":16,"line_end":16,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":801},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/errors.rs","byte_start":5512,"byte_end":5531,"line_start":21,"line_end":21,"column_start":5,"column_end":24},"name":"MissingRequiredDS64","qualname":"::errors::Error::MissingRequiredDS64","value":"Error::MissingRequiredDS64","parent":{"krate":0,"index":792},"children":[],"decl_id":null,"docs":" A wave file with a 64-bit header does not contain\n the required `ds64` metadata element\n","sig":null,"attributes":[{"value":"/ A wave file with a 64-bit header does not contain","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/errors.rs","byte_start":5409,"byte_end":5462,"line_start":19,"line_end":19,"column_start":5,"column_end":58}},{"value":"/ the required `ds64` metadata element","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/errors.rs","byte_start":5467,"byte_end":5507,"line_start":20,"line_end":20,"column_start":5,"column_end":45}}]},{"kind":"StructVariant","id":{"krate":0,"index":803},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/errors.rs","byte_start":5629,"byte_end":5641,"line_start":25,"line_end":25,"column_start":5,"column_end":17},"name":"ChunkMissing","qualname":"::errors::Error::ChunkMissing","value":"Error::ChunkMissing { signature }","parent":{"krate":0,"index":792},"children":[],"decl_id":null,"docs":" A data chunk required to complete the operation\n is not present in the file\n","sig":null,"attributes":[{"value":"/ A data chunk required to complete the operation","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/errors.rs","byte_start":5538,"byte_end":5589,"line_start":23,"line_end":23,"column_start":5,"column_end":56}},{"value":"/ is not present in the file","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/errors.rs","byte_start":5594,"byte_end":5624,"line_start":24,"line_end":24,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":805},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/errors.rs","byte_start":5712,"byte_end":5729,"line_start":28,"line_end":28,"column_start":5,"column_end":22},"name":"FmtChunkAfterData","qualname":"::errors::Error::FmtChunkAfterData","value":"Error::FmtChunkAfterData","parent":{"krate":0,"index":792},"children":[],"decl_id":null,"docs":" The file is formatted improperly\n","sig":null,"attributes":[{"value":"/ The file is formatted improperly","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/errors.rs","byte_start":5671,"byte_end":5707,"line_start":27,"line_end":27,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":807},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/errors.rs","byte_start":5792,"byte_end":5810,"line_start":31,"line_end":31,"column_start":5,"column_end":23},"name":"NotMinimalWaveFile","qualname":"::errors::Error::NotMinimalWaveFile","value":"Error::NotMinimalWaveFile","parent":{"krate":0,"index":792},"children":[],"decl_id":null,"docs":" The file did not validate as a minimal WAV file\n","sig":null,"attributes":[{"value":"/ The file did not validate as a minimal WAV file","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/errors.rs","byte_start":5736,"byte_end":5787,"line_start":30,"line_end":30,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":809},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/errors.rs","byte_start":5894,"byte_end":5913,"line_start":35,"line_end":35,"column_start":5,"column_end":24},"name":"DataChunkNotAligned","qualname":"::errors::Error::DataChunkNotAligned","value":"Error::DataChunkNotAligned","parent":{"krate":0,"index":792},"children":[],"decl_id":null,"docs":" The `data` chunk is not aligned to the desired page\n boundary\n","sig":null,"attributes":[{"value":"/ The `data` chunk is not aligned to the desired page","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/errors.rs","byte_start":5817,"byte_end":5872,"line_start":33,"line_end":33,"column_start":5,"column_end":60}},{"value":"/ boundary","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/errors.rs","byte_start":5877,"byte_end":5889,"line_start":34,"line_end":34,"column_start":5,"column_end":17}}]},{"kind":"StructVariant","id":{"krate":0,"index":811},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/errors.rs","byte_start":6013,"byte_end":6040,"line_start":39,"line_end":39,"column_start":5,"column_end":32},"name":"InsufficientDS64Reservation","qualname":"::errors::Error::InsufficientDS64Reservation","value":"Error::InsufficientDS64Reservation { expected, actual }","parent":{"krate":0,"index":792},"children":[],"decl_id":null,"docs":" The file cannot be converted into an RF64 file due\n to its internal structure\n","sig":null,"attributes":[{"value":"/ The file cannot be converted into an RF64 file due","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/errors.rs","byte_start":5920,"byte_end":5974,"line_start":37,"line_end":37,"column_start":5,"column_end":59}},{"value":"/ to its internal structure","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/errors.rs","byte_start":5979,"byte_end":6008,"line_start":38,"line_end":38,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":814},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/errors.rs","byte_start":6131,"byte_end":6160,"line_start":42,"line_end":42,"column_start":5,"column_end":34},"name":"DataChunkNotPreparedForAppend","qualname":"::errors::Error::DataChunkNotPreparedForAppend","value":"Error::DataChunkNotPreparedForAppend","parent":{"krate":0,"index":792},"children":[],"decl_id":null,"docs":" The file is not optimized for writing new data\n","sig":null,"attributes":[{"value":"/ The file is not optimized for writing new data","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/errors.rs","byte_start":6076,"byte_end":6126,"line_start":41,"line_end":41,"column_start":5,"column_end":55}}]},{"kind":"Enum","id":{"krate":0,"index":792},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/errors.rs","byte_start":5174,"byte_end":5179,"line_start":8,"line_end":8,"column_start":10,"column_end":15},"name":"Error","qualname":"::errors::Error","value":"pub enum Error {\n    IOError(io::Error),\n    UuidError(uuid::Error),\n    HeaderNotRecognized,\n    MissingRequiredDS64,\n    ChunkMissing {\n        signature: FourCC,\n    },\n    FmtChunkAfterData,\n    NotMinimalWaveFile,\n    DataChunkNotAligned,\n    InsufficientDS64Reservation {\n        expected: u64,\n        actual: u64,\n    },\n    DataChunkNotPreparedForAppend,\n}","parent":null,"children":[{"krate":0,"index":793},{"krate":0,"index":796},{"krate":0,"index":799},{"krate":0,"index":801},{"krate":0,"index":803},{"krate":0,"index":805},{"krate":0,"index":807},{"krate":0,"index":809},{"krate":0,"index":811},{"krate":0,"index":814}],"decl_id":null,"docs":" Errors returned by methods in this crate.\n","sig":null,"attributes":[{"value":"/ Errors returned by methods in this crate.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/errors.rs","byte_start":5102,"byte_end":5147,"line_start":6,"line_end":6,"column_start":1,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":819},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/common_format.rs","byte_start":8000,"byte_end":8010,"line_start":45,"line_end":45,"column_start":5,"column_end":15},"name":"IntegerPCM","qualname":"::common_format::CommonFormat::IntegerPCM","value":"CommonFormat::IntegerPCM","parent":{"krate":0,"index":818},"children":[],"decl_id":null,"docs":" Integer linear PCM\n","sig":null,"attributes":[{"value":"/ Integer linear PCM","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/common_format.rs","byte_start":7973,"byte_end":7995,"line_start":44,"line_end":44,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":821},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/common_format.rs","byte_start":8057,"byte_end":8069,"line_start":48,"line_end":48,"column_start":5,"column_end":17},"name":"IeeeFloatPCM","qualname":"::common_format::CommonFormat::IeeeFloatPCM","value":"CommonFormat::IeeeFloatPCM","parent":{"krate":0,"index":818},"children":[],"decl_id":null,"docs":" IEEE Floating-point Linear PCM\n","sig":null,"attributes":[{"value":"/ IEEE Floating-point Linear PCM","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/common_format.rs","byte_start":8018,"byte_end":8052,"line_start":47,"line_end":47,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":823},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/common_format.rs","byte_start":8090,"byte_end":8094,"line_start":51,"line_end":51,"column_start":5,"column_end":9},"name":"Mpeg","qualname":"::common_format::CommonFormat::Mpeg","value":"CommonFormat::Mpeg","parent":{"krate":0,"index":818},"children":[],"decl_id":null,"docs":" MPEG\n","sig":null,"attributes":[{"value":"/ MPEG","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/common_format.rs","byte_start":8077,"byte_end":8085,"line_start":50,"line_end":50,"column_start":5,"column_end":13}}]},{"kind":"TupleVariant","id":{"krate":0,"index":825},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/common_format.rs","byte_start":8140,"byte_end":8166,"line_start":54,"line_end":54,"column_start":5,"column_end":31},"name":"AmbisonicBFormatIntegerPCM","qualname":"::common_format::CommonFormat::AmbisonicBFormatIntegerPCM","value":"CommonFormat::AmbisonicBFormatIntegerPCM","parent":{"krate":0,"index":818},"children":[],"decl_id":null,"docs":" Ambisonic B-Format Linear PCM\n","sig":null,"attributes":[{"value":"/ Ambisonic B-Format Linear PCM","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/common_format.rs","byte_start":8102,"byte_end":8135,"line_start":53,"line_end":53,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":827},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/common_format.rs","byte_start":8211,"byte_end":8239,"line_start":57,"line_end":57,"column_start":5,"column_end":33},"name":"AmbisonicBFormatIeeeFloatPCM","qualname":"::common_format::CommonFormat::AmbisonicBFormatIeeeFloatPCM","value":"CommonFormat::AmbisonicBFormatIeeeFloatPCM","parent":{"krate":0,"index":818},"children":[],"decl_id":null,"docs":" Ambisonic B-Format Float PCM\n","sig":null,"attributes":[{"value":"/ Ambisonic B-Format Float PCM","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/common_format.rs","byte_start":8174,"byte_end":8206,"line_start":56,"line_end":56,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":829},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/common_format.rs","byte_start":8307,"byte_end":8319,"line_start":60,"line_end":60,"column_start":5,"column_end":17},"name":"UnknownBasic","qualname":"::common_format::CommonFormat::UnknownBasic","value":"CommonFormat::UnknownBasic(u16)","parent":{"krate":0,"index":818},"children":[],"decl_id":null,"docs":" An unknown format identified by a basic format tag.\n","sig":null,"attributes":[{"value":"/ An unknown format identified by a basic format tag.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/common_format.rs","byte_start":8247,"byte_end":8302,"line_start":59,"line_end":59,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":832},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/common_format.rs","byte_start":8391,"byte_end":8406,"line_start":63,"line_end":63,"column_start":5,"column_end":20},"name":"UnknownExtended","qualname":"::common_format::CommonFormat::UnknownExtended","value":"CommonFormat::UnknownExtended(Uuid)","parent":{"krate":0,"index":818},"children":[],"decl_id":null,"docs":" An unknown format identified by an extension UUID.\n","sig":null,"attributes":[{"value":"/ An unknown format identified by an extension UUID.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/common_format.rs","byte_start":8332,"byte_end":8386,"line_start":62,"line_end":62,"column_start":5,"column_end":59}}]},{"kind":"Enum","id":{"krate":0,"index":818},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/common_format.rs","byte_start":7954,"byte_end":7966,"line_start":43,"line_end":43,"column_start":10,"column_end":22},"name":"CommonFormat","qualname":"::common_format::CommonFormat","value":"pub enum CommonFormat {\n    IntegerPCM,\n    IeeeFloatPCM,\n    Mpeg,\n    AmbisonicBFormatIntegerPCM,\n    AmbisonicBFormatIeeeFloatPCM,\n    UnknownBasic(u16),\n    UnknownExtended(Uuid),\n}","parent":null,"children":[{"krate":0,"index":819},{"krate":0,"index":821},{"krate":0,"index":823},{"krate":0,"index":825},{"krate":0,"index":827},{"krate":0,"index":829},{"krate":0,"index":832}],"decl_id":null,"docs":" Sample format of the Wave file.\n \n \n","sig":null,"attributes":[{"value":"/ Sample format of the Wave file.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/common_format.rs","byte_start":7858,"byte_end":7893,"line_start":39,"line_end":39,"column_start":1,"column_end":36}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/common_format.rs","byte_start":7894,"byte_end":7898,"line_start":40,"line_end":40,"column_start":1,"column_end":5}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/common_format.rs","byte_start":7899,"byte_end":7903,"line_start":41,"line_end":41,"column_start":1,"column_end":5}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/common_format.rs","byte_start":8500,"byte_end":8504,"line_start":68,"line_end":68,"column_start":12,"column_end":16},"name":"make","qualname":"<CommonFormat>::make","value":"pub fn make(u16, Option<Uuid>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Resolve a tag and Uuid to a `CommonFormat`.\n","sig":null,"attributes":[{"value":"/ Resolve a tag and Uuid to a `CommonFormat`.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/common_format.rs","byte_start":8441,"byte_end":8488,"line_start":67,"line_end":67,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/common_format.rs","byte_start":9414,"byte_end":9418,"line_start":86,"line_end":86,"column_start":12,"column_end":16},"name":"take","qualname":"<CommonFormat>::take","value":"pub fn take(Self) -> (u16, Uuid)","parent":null,"children":[],"decl_id":null,"docs":" Get the appropriate tag and `Uuid` for the callee.\n \n If there is no appropriate tag for the format of the callee, the \n returned tag will be 0xFFFE and the `Uuid` will describe the format.\n","sig":null,"attributes":[{"value":"/ Get the appropriate tag and `Uuid` for the callee.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/common_format.rs","byte_start":9188,"byte_end":9242,"line_start":82,"line_end":82,"column_start":5,"column_end":59}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/common_format.rs","byte_start":9247,"byte_end":9251,"line_start":83,"line_end":83,"column_start":5,"column_end":9}},{"value":"/ If there is no appropriate tag for the format of the callee, the ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/common_format.rs","byte_start":9256,"byte_end":9325,"line_start":84,"line_end":84,"column_start":5,"column_end":74}},{"value":"/ returned tag will be 0xFFFE and the `Uuid` will describe the format.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/common_format.rs","byte_start":9330,"byte_end":9402,"line_start":85,"line_end":85,"column_start":5,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":379},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/cue.rs","byte_start":36784,"byte_end":36787,"line_start":272,"line_end":272,"column_start":12,"column_end":15},"name":"Cue","qualname":"::cue::Cue","value":"Cue { frame, length, label, note }","parent":null,"children":[{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":383}],"decl_id":null,"docs":" A cue point recorded in the `cue` and `adtl` metadata.\n \n ## Resources\n - [Cue list, label and other metadata](https://sites.google.com/site/musicgapi/technical-documents/wav-file-format#smpl)\n \n ### Not Implemented\n - [EBU 3285 Supplement 2](https://tech.ebu.ch/docs/tech/tech3285s2.pdf) (July 2001): Quality chunk and cuesheet\n","sig":null,"attributes":[{"value":"/ A cue point recorded in the `cue` and `adtl` metadata.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/cue.rs","byte_start":36422,"byte_end":36480,"line_start":265,"line_end":265,"column_start":1,"column_end":59}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/cue.rs","byte_start":36481,"byte_end":36485,"line_start":266,"line_end":266,"column_start":1,"column_end":5}},{"value":"/ ## Resources","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/cue.rs","byte_start":36486,"byte_end":36502,"line_start":267,"line_end":267,"column_start":1,"column_end":17}},{"value":"/ - [Cue list, label and other metadata](https://sites.google.com/site/musicgapi/technical-documents/wav-file-format#smpl)","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/cue.rs","byte_start":36503,"byte_end":36627,"line_start":268,"line_end":268,"column_start":1,"column_end":125}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/cue.rs","byte_start":36628,"byte_end":36632,"line_start":269,"line_end":269,"column_start":1,"column_end":5}},{"value":"/ ### Not Implemented","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/cue.rs","byte_start":36633,"byte_end":36656,"line_start":270,"line_end":270,"column_start":1,"column_end":24}},{"value":"/ - [EBU 3285 Supplement 2](https://tech.ebu.ch/docs/tech/tech3285s2.pdf) (July 2001): Quality chunk and cuesheet","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/cue.rs","byte_start":36657,"byte_end":36772,"line_start":271,"line_end":271,"column_start":1,"column_end":116}}]},{"kind":"Field","id":{"krate":0,"index":380},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/cue.rs","byte_start":36831,"byte_end":36836,"line_start":275,"line_end":275,"column_start":9,"column_end":14},"name":"frame","qualname":"::cue::Cue::frame","value":"u32","parent":{"krate":0,"index":379},"children":[],"decl_id":null,"docs":" The time of this marker\n","sig":null,"attributes":[{"value":"/ The time of this marker","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/cue.rs","byte_start":36795,"byte_end":36822,"line_start":274,"line_end":274,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":381},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/cue.rs","byte_start":36905,"byte_end":36911,"line_start":278,"line_end":278,"column_start":9,"column_end":15},"name":"length","qualname":"::cue::Cue::length","value":"std::option::Option<u32>","parent":{"krate":0,"index":379},"children":[],"decl_id":null,"docs":" The length of this marker, if it is a range\n","sig":null,"attributes":[{"value":"/ The length of this marker, if it is a range","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/cue.rs","byte_start":36849,"byte_end":36896,"line_start":277,"line_end":277,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":382},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/cue.rs","byte_start":36993,"byte_end":36998,"line_start":281,"line_end":281,"column_start":9,"column_end":14},"name":"label","qualname":"::cue::Cue::label","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":379},"children":[],"decl_id":null,"docs":" The text \"label\"/name of this marker if provided\n","sig":null,"attributes":[{"value":"/ The text \"label\"/name of this marker if provided","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/cue.rs","byte_start":36932,"byte_end":36984,"line_start":280,"line_end":280,"column_start":5,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":383},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/cue.rs","byte_start":37085,"byte_end":37089,"line_start":284,"line_end":284,"column_start":9,"column_end":13},"name":"note","qualname":"::cue::Cue::note","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":379},"children":[],"decl_id":null,"docs":" The text \"note\"/comment of this marker if provided\n","sig":null,"attributes":[{"value":"/ The text \"note\"/comment of this marker if provided","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/cue.rs","byte_start":37022,"byte_end":37076,"line_start":283,"line_end":283,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":397},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/cue.rs","byte_start":39456,"byte_end":39468,"line_start":351,"line_end":351,"column_start":12,"column_end":24},"name":"collect_from","qualname":"<Cue>::collect_from","value":"pub fn collect_from(&[u8], Option<&[u8]>) -> Result<Vec<Cue>, Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":950},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":41994,"byte_end":41998,"line_start":28,"line_end":28,"column_start":12,"column_end":16},"name":"Bext","qualname":"::bext::Bext","value":"Bext { description, originator, originator_reference, origination_date, origination_time, time_reference, version, umid, loudness_value, loudness_range, max_true_peak_level, max_momentary_loudness, max_short_term_loudness, coding_history }","parent":null,"children":[{"krate":0,"index":951},{"krate":0,"index":952},{"krate":0,"index":953},{"krate":0,"index":954},{"krate":0,"index":955},{"krate":0,"index":956},{"krate":0,"index":957},{"krate":0,"index":958},{"krate":0,"index":960},{"krate":0,"index":961},{"krate":0,"index":962},{"krate":0,"index":963},{"krate":0,"index":964},{"krate":0,"index":965}],"decl_id":null,"docs":"  Broadcast-WAV metadata record.","sig":null,"attributes":[{"value":"/  Broadcast-WAV metadata record.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":40903,"byte_end":40938,"line_start":7,"line_end":7,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":40939,"byte_end":40942,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/  The `bext` record contains information about the original recording of the ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":40943,"byte_end":41023,"line_start":9,"line_end":9,"column_start":1,"column_end":81}},{"value":"/  Wave file, including a longish (256 ASCII chars) description field, ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":41024,"byte_end":41097,"line_start":10,"line_end":10,"column_start":1,"column_end":74}},{"value":"/  originator identification fields, creation calendar date and time, a ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":41098,"byte_end":41172,"line_start":11,"line_end":11,"column_start":1,"column_end":75}},{"value":"/  sample-accurate recording time field, and a SMPTE UMID. ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":41173,"byte_end":41234,"line_start":12,"line_end":12,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":41235,"byte_end":41238,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/  For a Wave file to be a complaint \"Broadcast-WAV\" file, it must contain","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":41239,"byte_end":41315,"line_start":14,"line_end":14,"column_start":1,"column_end":77}},{"value":"/  a `bext` metadata record.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":41316,"byte_end":41346,"line_start":15,"line_end":15,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":41347,"byte_end":41350,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ## Resources","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":41351,"byte_end":41367,"line_start":17,"line_end":17,"column_start":1,"column_end":17}},{"value":"/ - [EBU Tech 3285](https://tech.ebu.ch/docs/tech/tech3285.pdf).","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":41368,"byte_end":41434,"line_start":18,"line_end":18,"column_start":1,"column_end":67}},{"value":"/ - [EBU Tech R098](https://tech.ebu.ch/docs/r/r098.pdf) (1999) \"Format for the &lt;CodingHistory&gt; field in Broadcast Wave Format files, BWF\"","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":41435,"byte_end":41581,"line_start":19,"line_end":19,"column_start":1,"column_end":147}},{"value":"/ - [EBU Tech R099](https://tech.ebu.ch/docs/r/r099.pdf) (October 2011) \"‘Unique’ Source Identifier (USID) for use in the ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":41582,"byte_end":41710,"line_start":20,"line_end":20,"column_start":1,"column_end":125}},{"value":"/   &lt;OriginatorReference&gt; field of the Broadcast Wave Format\"","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":41711,"byte_end":41780,"line_start":21,"line_end":21,"column_start":1,"column_end":70}}]},{"kind":"Field","id":{"krate":0,"index":951},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":42060,"byte_end":42071,"line_start":31,"line_end":31,"column_start":9,"column_end":20},"name":"description","qualname":"::bext::Bext::description","value":"std::string::String","parent":{"krate":0,"index":950},"children":[],"decl_id":null,"docs":" 256 ASCII character field with free text.\n","sig":null,"attributes":[{"value":"/ 256 ASCII character field with free text.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":42006,"byte_end":42051,"line_start":30,"line_end":30,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":952},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":42123,"byte_end":42133,"line_start":34,"line_end":34,"column_start":9,"column_end":19},"name":"originator","qualname":"::bext::Bext::originator","value":"std::string::String","parent":{"krate":0,"index":950},"children":[],"decl_id":null,"docs":" Originating application.\n","sig":null,"attributes":[{"value":"/ Originating application.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":42086,"byte_end":42114,"line_start":33,"line_end":33,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":953},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":42186,"byte_end":42206,"line_start":37,"line_end":37,"column_start":9,"column_end":29},"name":"originator_reference","qualname":"::bext::Bext::originator_reference","value":"std::string::String","parent":{"krate":0,"index":950},"children":[],"decl_id":null,"docs":" Application-specific UID.\n","sig":null,"attributes":[{"value":"/ Application-specific UID.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":42148,"byte_end":42177,"line_start":36,"line_end":36,"column_start":5,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":954},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":42271,"byte_end":42287,"line_start":40,"line_end":40,"column_start":9,"column_end":25},"name":"origination_date","qualname":"::bext::Bext::origination_date","value":"std::string::String","parent":{"krate":0,"index":950},"children":[],"decl_id":null,"docs":" Creation date in format `YYYY-MM-DD`.\n","sig":null,"attributes":[{"value":"/ Creation date in format `YYYY-MM-DD`.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":42221,"byte_end":42262,"line_start":39,"line_end":39,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":955},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":42350,"byte_end":42366,"line_start":43,"line_end":43,"column_start":9,"column_end":25},"name":"origination_time","qualname":"::bext::Bext::origination_time","value":"std::string::String","parent":{"krate":0,"index":950},"children":[],"decl_id":null,"docs":" Creation time in format `HH:MM:SS`.\n","sig":null,"attributes":[{"value":"/ Creation time in format `HH:MM:SS`.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":42302,"byte_end":42341,"line_start":42,"line_end":42,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":956},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":42495,"byte_end":42509,"line_start":47,"line_end":47,"column_start":9,"column_end":23},"name":"time_reference","qualname":"::bext::Bext::time_reference","value":"u64","parent":{"krate":0,"index":950},"children":[],"decl_id":null,"docs":" Time of the start of this wave file, expressed as the number of samples\n since local midnight.\n","sig":null,"attributes":[{"value":"/ Time of the start of this wave file, expressed as the number of samples","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":42381,"byte_end":42456,"line_start":45,"line_end":45,"column_start":5,"column_end":80}},{"value":"/ since local midnight.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":42461,"byte_end":42486,"line_start":46,"line_end":46,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":957},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":42655,"byte_end":42662,"line_start":53,"line_end":53,"column_start":9,"column_end":16},"name":"version","qualname":"::bext::Bext::version","value":"u16","parent":{"krate":0,"index":950},"children":[],"decl_id":null,"docs":" Bext chunk version.\n \n Version 1 contains a UMID, version 2 contains a UMID and \n loudness metadata.\n","sig":null,"attributes":[{"value":"/ Bext chunk version.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":42521,"byte_end":42544,"line_start":49,"line_end":49,"column_start":5,"column_end":28}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":42549,"byte_end":42553,"line_start":50,"line_end":50,"column_start":5,"column_end":9}},{"value":"/ Version 1 contains a UMID, version 2 contains a UMID and ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":42558,"byte_end":42619,"line_start":51,"line_end":51,"column_start":5,"column_end":66}},{"value":"/ loudness metadata.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":42624,"byte_end":42646,"line_start":52,"line_end":52,"column_start":5,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":958},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":42771,"byte_end":42775,"line_start":58,"line_end":58,"column_start":9,"column_end":13},"name":"umid","qualname":"::bext::Bext::umid","value":"std::option::Option<[u8; 64]>","parent":{"krate":0,"index":950},"children":[],"decl_id":null,"docs":" SMPTE 330M UMID\n \n This field is `None` if the version is less than 1.\n","sig":null,"attributes":[{"value":"/ SMPTE 330M UMID","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":42674,"byte_end":42693,"line_start":55,"line_end":55,"column_start":5,"column_end":24}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":42698,"byte_end":42702,"line_start":56,"line_end":56,"column_start":5,"column_end":9}},{"value":"/ This field is `None` if the version is less than 1.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":42707,"byte_end":42762,"line_start":57,"line_end":57,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":960},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":42910,"byte_end":42924,"line_start":63,"line_end":63,"column_start":9,"column_end":23},"name":"loudness_value","qualname":"::bext::Bext::loudness_value","value":"std::option::Option<f32>","parent":{"krate":0,"index":950},"children":[],"decl_id":null,"docs":" Integrated loudness in LUFS.\n \n This field is `None` if the version is less than 2.\n","sig":null,"attributes":[{"value":"/ Integrated loudness in LUFS.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":42800,"byte_end":42832,"line_start":60,"line_end":60,"column_start":5,"column_end":37}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":42837,"byte_end":42841,"line_start":61,"line_end":61,"column_start":5,"column_end":9}},{"value":"/ This field is `None` if the version is less than 2.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":42846,"byte_end":42901,"line_start":62,"line_end":62,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":961},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":43048,"byte_end":43062,"line_start":68,"line_end":68,"column_start":9,"column_end":23},"name":"loudness_range","qualname":"::bext::Bext::loudness_range","value":"std::option::Option<f32>","parent":{"krate":0,"index":950},"children":[],"decl_id":null,"docs":" Loudness range in LU.\n \n This field is `None` if the version is less than 2.\n","sig":null,"attributes":[{"value":"/ Loudness range in LU.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":42945,"byte_end":42970,"line_start":65,"line_end":65,"column_start":5,"column_end":30}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":42975,"byte_end":42979,"line_start":66,"line_end":66,"column_start":5,"column_end":9}},{"value":"/ This field is `None` if the version is less than 2.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":42984,"byte_end":43039,"line_start":67,"line_end":67,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":962},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":43208,"byte_end":43227,"line_start":73,"line_end":73,"column_start":9,"column_end":28},"name":"max_true_peak_level","qualname":"::bext::Bext::max_true_peak_level","value":"std::option::Option<f32>","parent":{"krate":0,"index":950},"children":[],"decl_id":null,"docs":" Maximum True Peak Level in decibels True Peak.","sig":null,"attributes":[{"value":"/ Maximum True Peak Level in decibels True Peak.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":43081,"byte_end":43131,"line_start":70,"line_end":70,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":43136,"byte_end":43139,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ This field is `None` if the version is less than 2.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":43144,"byte_end":43199,"line_start":72,"line_end":72,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":963},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":43368,"byte_end":43390,"line_start":78,"line_end":78,"column_start":9,"column_end":31},"name":"max_momentary_loudness","qualname":"::bext::Bext::max_momentary_loudness","value":"std::option::Option<f32>","parent":{"krate":0,"index":950},"children":[],"decl_id":null,"docs":" Maximum momentary loudness in LUFS.","sig":null,"attributes":[{"value":"/ Maximum momentary loudness in LUFS.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":43252,"byte_end":43291,"line_start":75,"line_end":75,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":43296,"byte_end":43299,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ This field is `None` if the version is less than 2.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":43304,"byte_end":43359,"line_start":77,"line_end":77,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":964},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":43529,"byte_end":43552,"line_start":83,"line_end":83,"column_start":9,"column_end":32},"name":"max_short_term_loudness","qualname":"::bext::Bext::max_short_term_loudness","value":"std::option::Option<f32>","parent":{"krate":0,"index":950},"children":[],"decl_id":null,"docs":" Maximum short-term loudness in LUFS.\n \n This field is `None` if the version is less than 2.\n","sig":null,"attributes":[{"value":"/ Maximum short-term loudness in LUFS.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":43411,"byte_end":43451,"line_start":80,"line_end":80,"column_start":5,"column_end":45}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":43456,"byte_end":43460,"line_start":81,"line_end":81,"column_start":5,"column_end":9}},{"value":"/ This field is `None` if the version is less than 2.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":43465,"byte_end":43520,"line_start":82,"line_end":82,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":965},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":43629,"byte_end":43643,"line_start":87,"line_end":87,"column_start":9,"column_end":23},"name":"coding_history","qualname":"::bext::Bext::coding_history","value":"std::string::String","parent":{"krate":0,"index":950},"children":[],"decl_id":null,"docs":" Coding History.\n","sig":null,"attributes":[{"value":"/ Coding History.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/bext.rs","byte_start":43601,"byte_end":43620,"line_start":86,"line_end":86,"column_start":5,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":430},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":44258,"byte_end":44268,"line_start":21,"line_end":21,"column_start":12,"column_end":22},"name":"ADMAudioID","qualname":"::fmt::ADMAudioID","value":"ADMAudioID { track_uid, channel_format_ref, pack_ref }","parent":null,"children":[{"krate":0,"index":431},{"krate":0,"index":433},{"krate":0,"index":435}],"decl_id":null,"docs":" ADM Audio ID record.\n \n This structure relates a channel in the wave file to either a common ADM\n channel definition or further definition in the WAV file's ADM metadata \n chunk.\n \n An individual channel in a WAV file can have multiple Audio IDs in an ADM \n `AudioProgramme`.\n \n See BS.2088-1 § 8, also BS.2094, also blahblahblah...\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":43861,"byte_end":43880,"line_start":9,"line_end":9,"column_start":1,"column_end":20}},{"value":"/ ADM Audio ID record.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":43882,"byte_end":43906,"line_start":11,"line_end":11,"column_start":1,"column_end":25}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":43907,"byte_end":43911,"line_start":12,"line_end":12,"column_start":1,"column_end":5}},{"value":"/ This structure relates a channel in the wave file to either a common ADM","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":43912,"byte_end":43988,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/ channel definition or further definition in the WAV file's ADM metadata ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":43989,"byte_end":44065,"line_start":14,"line_end":14,"column_start":1,"column_end":77}},{"value":"/ chunk.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":44066,"byte_end":44076,"line_start":15,"line_end":15,"column_start":1,"column_end":11}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":44077,"byte_end":44081,"line_start":16,"line_end":16,"column_start":1,"column_end":5}},{"value":"/ An individual channel in a WAV file can have multiple Audio IDs in an ADM ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":44082,"byte_end":44160,"line_start":17,"line_end":17,"column_start":1,"column_end":79}},{"value":"/ `AudioProgramme`.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":44161,"byte_end":44182,"line_start":18,"line_end":18,"column_start":1,"column_end":22}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":44183,"byte_end":44187,"line_start":19,"line_end":19,"column_start":1,"column_end":5}},{"value":"/ See BS.2088-1 § 8, also BS.2094, also blahblahblah...","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":44188,"byte_end":44246,"line_start":20,"line_end":20,"column_start":1,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":431},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":44279,"byte_end":44288,"line_start":22,"line_end":22,"column_start":9,"column_end":18},"name":"track_uid","qualname":"::fmt::ADMAudioID::track_uid","value":"[char; 12]","parent":{"krate":0,"index":430},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":433},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":44310,"byte_end":44328,"line_start":23,"line_end":23,"column_start":9,"column_end":27},"name":"channel_format_ref","qualname":"::fmt::ADMAudioID::channel_format_ref","value":"[char; 14]","parent":{"krate":0,"index":430},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":435},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":44350,"byte_end":44358,"line_start":24,"line_end":24,"column_start":9,"column_end":17},"name":"pack_ref","qualname":"::fmt::ADMAudioID::pack_ref","value":"[char; 11]","parent":{"krate":0,"index":430},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":437},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":44547,"byte_end":44564,"line_start":31,"line_end":31,"column_start":12,"column_end":29},"name":"ChannelDescriptor","qualname":"::fmt::ChannelDescriptor","value":"ChannelDescriptor { index, speaker, adm_track_audio_ids }","parent":null,"children":[{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":440}],"decl_id":null,"docs":" Describes a single channel in a WAV file.\n \n This information is correlated from the Wave format ChannelMap field and\n the `chna` chunk, if present.\n","sig":null,"attributes":[{"value":"/ Describes a single channel in a WAV file.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":44374,"byte_end":44419,"line_start":27,"line_end":27,"column_start":1,"column_end":46}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":44420,"byte_end":44424,"line_start":28,"line_end":28,"column_start":1,"column_end":5}},{"value":"/ This information is correlated from the Wave format ChannelMap field and","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":44425,"byte_end":44501,"line_start":29,"line_end":29,"column_start":1,"column_end":77}},{"value":"/ the `chna` chunk, if present.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":44502,"byte_end":44535,"line_start":30,"line_end":30,"column_start":1,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":438},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":44641,"byte_end":44646,"line_start":33,"line_end":33,"column_start":9,"column_end":14},"name":"index","qualname":"::fmt::ChannelDescriptor::index","value":"u16","parent":{"krate":0,"index":437},"children":[],"decl_id":null,"docs":" Index, the offset of this channel's samples in one frame.\n","sig":null,"attributes":[{"value":"/ Index, the offset of this channel's samples in one frame.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":44571,"byte_end":44632,"line_start":32,"line_end":32,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":439},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":44855,"byte_end":44862,"line_start":39,"line_end":39,"column_start":9,"column_end":16},"name":"speaker","qualname":"::fmt::ChannelDescriptor::speaker","value":"fmt::ChannelMask","parent":{"krate":0,"index":437},"children":[],"decl_id":null,"docs":" Channel assignment\n \n This is either implied (in the case of mono or stereo wave files) or\n explicitly given in `WaveFormatExtentended` for files with more tracks.\n","sig":null,"attributes":[{"value":"/ Channel assignment","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":44658,"byte_end":44680,"line_start":35,"line_end":35,"column_start":5,"column_end":27}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":44685,"byte_end":44689,"line_start":36,"line_end":36,"column_start":5,"column_end":9}},{"value":"/ This is either implied (in the case of mono or stereo wave files) or","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":44694,"byte_end":44766,"line_start":37,"line_end":37,"column_start":5,"column_end":77}},{"value":"/ explicitly given in `WaveFormatExtentended` for files with more tracks.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":44771,"byte_end":44846,"line_start":38,"line_end":38,"column_start":5,"column_end":80}}]},{"kind":"Field","id":{"krate":0,"index":440},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":44913,"byte_end":44932,"line_start":42,"line_end":42,"column_start":9,"column_end":28},"name":"adm_track_audio_ids","qualname":"::fmt::ChannelDescriptor::adm_track_audio_ids","value":"std::vec::Vec<fmt::ADMAudioID>","parent":{"krate":0,"index":437},"children":[],"decl_id":null,"docs":" ADM audioTrackUIDs\n","sig":null,"attributes":[{"value":"/ ADM audioTrackUIDs","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":44882,"byte_end":44904,"line_start":41,"line_end":41,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":969},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":45098,"byte_end":45107,"line_start":51,"line_end":51,"column_start":5,"column_end":14},"name":"DirectOut","qualname":"::fmt::ChannelMask::DirectOut","value":"ChannelMask::DirectOut","parent":{"krate":0,"index":968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":972},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":45126,"byte_end":45135,"line_start":52,"line_end":52,"column_start":5,"column_end":14},"name":"FrontLeft","qualname":"::fmt::ChannelMask::FrontLeft","value":"ChannelMask::FrontLeft","parent":{"krate":0,"index":968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":975},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":45154,"byte_end":45164,"line_start":53,"line_end":53,"column_start":5,"column_end":15},"name":"FrontRight","qualname":"::fmt::ChannelMask::FrontRight","value":"ChannelMask::FrontRight","parent":{"krate":0,"index":968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":978},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":45182,"byte_end":45193,"line_start":54,"line_end":54,"column_start":5,"column_end":16},"name":"FrontCenter","qualname":"::fmt::ChannelMask::FrontCenter","value":"ChannelMask::FrontCenter","parent":{"krate":0,"index":968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":981},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":45210,"byte_end":45222,"line_start":55,"line_end":55,"column_start":5,"column_end":17},"name":"LowFrequency","qualname":"::fmt::ChannelMask::LowFrequency","value":"ChannelMask::LowFrequency","parent":{"krate":0,"index":968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":984},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":45238,"byte_end":45246,"line_start":56,"line_end":56,"column_start":5,"column_end":13},"name":"BackLeft","qualname":"::fmt::ChannelMask::BackLeft","value":"ChannelMask::BackLeft","parent":{"krate":0,"index":968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":987},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":45267,"byte_end":45276,"line_start":57,"line_end":57,"column_start":5,"column_end":14},"name":"BackRight","qualname":"::fmt::ChannelMask::BackRight","value":"ChannelMask::BackRight","parent":{"krate":0,"index":968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":990},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":45296,"byte_end":45311,"line_start":58,"line_end":58,"column_start":5,"column_end":20},"name":"FrontCenterLeft","qualname":"::fmt::ChannelMask::FrontCenterLeft","value":"ChannelMask::FrontCenterLeft","parent":{"krate":0,"index":968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":993},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":45325,"byte_end":45341,"line_start":59,"line_end":59,"column_start":5,"column_end":21},"name":"FrontCenterRight","qualname":"::fmt::ChannelMask::FrontCenterRight","value":"ChannelMask::FrontCenterRight","parent":{"krate":0,"index":968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":996},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":45354,"byte_end":45364,"line_start":60,"line_end":60,"column_start":5,"column_end":15},"name":"BackCenter","qualname":"::fmt::ChannelMask::BackCenter","value":"ChannelMask::BackCenter","parent":{"krate":0,"index":968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":999},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":45384,"byte_end":45392,"line_start":61,"line_end":61,"column_start":5,"column_end":13},"name":"SideLeft","qualname":"::fmt::ChannelMask::SideLeft","value":"ChannelMask::SideLeft","parent":{"krate":0,"index":968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1002},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":45414,"byte_end":45423,"line_start":62,"line_end":62,"column_start":5,"column_end":14},"name":"SideRight","qualname":"::fmt::ChannelMask::SideRight","value":"ChannelMask::SideRight","parent":{"krate":0,"index":968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1005},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":45444,"byte_end":45453,"line_start":63,"line_end":63,"column_start":5,"column_end":14},"name":"TopCenter","qualname":"::fmt::ChannelMask::TopCenter","value":"ChannelMask::TopCenter","parent":{"krate":0,"index":968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1008},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":45474,"byte_end":45486,"line_start":64,"line_end":64,"column_start":5,"column_end":17},"name":"TopFrontLeft","qualname":"::fmt::ChannelMask::TopFrontLeft","value":"ChannelMask::TopFrontLeft","parent":{"krate":0,"index":968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1011},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":45505,"byte_end":45519,"line_start":65,"line_end":65,"column_start":5,"column_end":19},"name":"TopFrontCenter","qualname":"::fmt::ChannelMask::TopFrontCenter","value":"ChannelMask::TopFrontCenter","parent":{"krate":0,"index":968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1014},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":45536,"byte_end":45549,"line_start":66,"line_end":66,"column_start":5,"column_end":18},"name":"TopFrontRight","qualname":"::fmt::ChannelMask::TopFrontRight","value":"ChannelMask::TopFrontRight","parent":{"krate":0,"index":968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1017},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":45567,"byte_end":45578,"line_start":67,"line_end":67,"column_start":5,"column_end":16},"name":"TopBackLeft","qualname":"::fmt::ChannelMask::TopBackLeft","value":"ChannelMask::TopBackLeft","parent":{"krate":0,"index":968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1020},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":45598,"byte_end":45611,"line_start":68,"line_end":68,"column_start":5,"column_end":18},"name":"TopBackCenter","qualname":"::fmt::ChannelMask::TopBackCenter","value":"ChannelMask::TopBackCenter","parent":{"krate":0,"index":968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1023},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":45630,"byte_end":45642,"line_start":69,"line_end":69,"column_start":5,"column_end":17},"name":"TopBackRight","qualname":"::fmt::ChannelMask::TopBackRight","value":"ChannelMask::TopBackRight","parent":{"krate":0,"index":968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":968},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":45080,"byte_end":45091,"line_start":50,"line_end":50,"column_start":10,"column_end":21},"name":"ChannelMask","qualname":"::fmt::ChannelMask","value":"pub enum ChannelMask {\n    DirectOut = ,\n    FrontLeft = ,\n    FrontRight = ,\n    FrontCenter = ,\n    LowFrequency = ,\n    BackLeft = ,\n    BackRight = ,\n    FrontCenterLeft = ,\n    FrontCenterRight = ,\n    BackCenter = ,\n    SideLeft = ,\n    SideRight = ,\n    TopCenter = ,\n    TopFrontLeft = ,\n    TopFrontCenter = ,\n    TopFrontRight = ,\n    TopBackLeft = ,\n    TopBackCenter = ,\n    TopBackRight = ,\n}","parent":null,"children":[{"krate":0,"index":969},{"krate":0,"index":972},{"krate":0,"index":975},{"krate":0,"index":978},{"krate":0,"index":981},{"krate":0,"index":984},{"krate":0,"index":987},{"krate":0,"index":990},{"krate":0,"index":993},{"krate":0,"index":996},{"krate":0,"index":999},{"krate":0,"index":1002},{"krate":0,"index":1005},{"krate":0,"index":1008},{"krate":0,"index":1011},{"krate":0,"index":1014},{"krate":0,"index":1017},{"krate":0,"index":1020},{"krate":0,"index":1023}],"decl_id":null,"docs":" A bitmask indicating which channels are present in \n the file.\n \n","sig":null,"attributes":[{"value":"/ A bitmask indicating which channels are present in ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":44955,"byte_end":45010,"line_start":46,"line_end":46,"column_start":1,"column_end":56}},{"value":"/ the file.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":45011,"byte_end":45024,"line_start":47,"line_end":47,"column_start":1,"column_end":14}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":45025,"byte_end":45029,"line_start":48,"line_end":48,"column_start":1,"column_end":5}}]},{"kind":"Method","id":{"krate":0,"index":444},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":46560,"byte_end":46568,"line_start":100,"line_end":100,"column_start":12,"column_end":20},"name":"channels","qualname":"<ChannelMask>::channels","value":"pub fn channels(u32, u16) -> Vec<ChannelMask>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1034},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":47170,"byte_end":47185,"line_start":119,"line_end":119,"column_start":12,"column_end":27},"name":"WaveFmtExtended","qualname":"::fmt::WaveFmtExtended","value":"WaveFmtExtended { valid_bits_per_sample, channel_mask, type_guid }","parent":null,"children":[{"krate":0,"index":1035},{"krate":0,"index":1036},{"krate":0,"index":1037}],"decl_id":null,"docs":" Extended Wave Format\n \n https://docs.microsoft.com/en-us/windows/win32/api/mmreg/ns-mmreg-waveformatextensible\n","sig":null,"attributes":[{"value":"*\n * Extended Wave Format\n * \n * https://docs.microsoft.com/en-us/windows/win32/api/mmreg/ns-mmreg-waveformatextensible\n */","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":47003,"byte_end":47128,"line_start":113,"line_end":117,"column_start":1,"column_end":4}}]},{"kind":"Field","id":{"krate":0,"index":1035},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":47227,"byte_end":47248,"line_start":122,"line_end":122,"column_start":9,"column_end":30},"name":"valid_bits_per_sample","qualname":"::fmt::WaveFmtExtended::valid_bits_per_sample","value":"u16","parent":{"krate":0,"index":1034},"children":[],"decl_id":null,"docs":" Valid bits per sample\n","sig":null,"attributes":[{"value":"/ Valid bits per sample","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":47193,"byte_end":47218,"line_start":121,"line_end":121,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":1036},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":47366,"byte_end":47378,"line_start":127,"line_end":127,"column_start":9,"column_end":21},"name":"channel_mask","qualname":"::fmt::WaveFmtExtended::channel_mask","value":"u32","parent":{"krate":0,"index":1034},"children":[],"decl_id":null,"docs":" Channel mask\n \n Identifies the speaker assignment for each channel in the file\n","sig":null,"attributes":[{"value":"/ Channel mask","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":47261,"byte_end":47277,"line_start":124,"line_end":124,"column_start":5,"column_end":21}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":47282,"byte_end":47286,"line_start":125,"line_end":125,"column_start":5,"column_end":9}},{"value":"/ Identifies the speaker assignment for each channel in the file","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":47291,"byte_end":47357,"line_start":126,"line_end":126,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":1037},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":47472,"byte_end":47481,"line_start":132,"line_end":132,"column_start":9,"column_end":18},"name":"type_guid","qualname":"::fmt::WaveFmtExtended::type_guid","value":"uuid::Uuid","parent":{"krate":0,"index":1034},"children":[],"decl_id":null,"docs":" Codec GUID\n \n Identifies the codec of the audio stream\n","sig":null,"attributes":[{"value":"/ Codec GUID","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":47391,"byte_end":47405,"line_start":129,"line_end":129,"column_start":5,"column_end":19}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":47410,"byte_end":47414,"line_start":130,"line_end":130,"column_start":5,"column_end":9}},{"value":"/ Identifies the codec of the audio stream","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":47419,"byte_end":47463,"line_start":131,"line_end":131,"column_start":5,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":1043},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":48638,"byte_end":48645,"line_start":160,"line_end":160,"column_start":12,"column_end":19},"name":"WaveFmt","qualname":"::fmt::WaveFmt","value":"WaveFmt { tag, channel_count, sample_rate, bytes_per_second, block_alignment, bits_per_sample, extended_format }","parent":null,"children":[{"krate":0,"index":1044},{"krate":0,"index":1045},{"krate":0,"index":1046},{"krate":0,"index":1047},{"krate":0,"index":1048},{"krate":0,"index":1049},{"krate":0,"index":1050}],"decl_id":null,"docs":"\n WAV file data format record.","sig":null,"attributes":[{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":47493,"byte_end":47496,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ WAV file data format record.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":47497,"byte_end":47529,"line_start":136,"line_end":136,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":47530,"byte_end":47533,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ The `fmt` record contains essential information describing the binary","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":47534,"byte_end":47607,"line_start":138,"line_end":138,"column_start":1,"column_end":74}},{"value":"/ structure of the data segment of the WAVE file, such as sample ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":47608,"byte_end":47675,"line_start":139,"line_end":139,"column_start":1,"column_end":68}},{"value":"/ rate, sample binary format, channel count, etc.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":47676,"byte_end":47727,"line_start":140,"line_end":140,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":47728,"byte_end":47731,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":47732,"byte_end":47736,"line_start":142,"line_end":142,"column_start":1,"column_end":5}},{"value":"/ ## Resources ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":47737,"byte_end":47754,"line_start":143,"line_end":143,"column_start":1,"column_end":18}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":47755,"byte_end":47759,"line_start":144,"line_end":144,"column_start":1,"column_end":5}},{"value":"/ ### Implementation of Wave format `fmt` chunk","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":47760,"byte_end":47809,"line_start":145,"line_end":145,"column_start":1,"column_end":50}},{"value":"/ - [MSDN WAVEFORMATEX](https://docs.microsoft.com/en-us/windows/win32/api/mmeapi/ns-mmeapi-waveformatex)","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":47810,"byte_end":47917,"line_start":146,"line_end":146,"column_start":1,"column_end":108}},{"value":"/ - [MSDN WAVEFORMATEXTENSIBLE](https://docs.microsoft.com/en-us/windows/win32/api/mmreg/ns-mmreg-waveformatextensible)","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":47918,"byte_end":48039,"line_start":147,"line_end":147,"column_start":1,"column_end":122}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":48040,"byte_end":48043,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ ### Other resources","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":48044,"byte_end":48067,"line_start":149,"line_end":149,"column_start":1,"column_end":24}},{"value":"/ - [RFC 3261][rfc3261] (June 1998) \"WAVE and AVI Codec Registries\"","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":48068,"byte_end":48137,"line_start":150,"line_end":150,"column_start":1,"column_end":70}},{"value":"/ - [Sampler Metadata](http://www.piclist.com/techref/io/serial/midi/wave.html)","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":48138,"byte_end":48219,"line_start":151,"line_end":151,"column_start":1,"column_end":82}},{"value":"/ - [Peter Kabal, McGill University](http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/WAVE/WAVE.html)","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":48220,"byte_end":48327,"line_start":152,"line_end":152,"column_start":1,"column_end":108}},{"value":"/ - [Multimedia Programming Interface and Data Specifications 1.0](http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/WAVE/Docs/riffmci.pdf) ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":48328,"byte_end":48473,"line_start":153,"line_end":153,"column_start":1,"column_end":146}},{"value":"/    (August 1991), IBM Corporation and Microsoft Corporation","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":48474,"byte_end":48537,"line_start":154,"line_end":154,"column_start":1,"column_end":64}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":48538,"byte_end":48542,"line_start":155,"line_end":155,"column_start":1,"column_end":5}},{"value":"/ [rfc3261]: https://tools.ietf.org/html/rfc2361 ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":48543,"byte_end":48594,"line_start":156,"line_end":156,"column_start":1,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":1044},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":48805,"byte_end":48808,"line_start":166,"line_end":166,"column_start":9,"column_end":12},"name":"tag","qualname":"::fmt::WaveFmt::tag","value":"u16","parent":{"krate":0,"index":1043},"children":[],"decl_id":null,"docs":" A tag identifying the codec in use.\n \n If this is 0xFFFE, the codec will be identified by a GUID\n in `extended_format`\n","sig":null,"attributes":[{"value":"/ A tag identifying the codec in use.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":48653,"byte_end":48692,"line_start":162,"line_end":162,"column_start":5,"column_end":44}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":48697,"byte_end":48701,"line_start":163,"line_end":163,"column_start":5,"column_end":9}},{"value":"/ If this is 0xFFFE, the codec will be identified by a GUID","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":48706,"byte_end":48767,"line_start":164,"line_end":164,"column_start":5,"column_end":66}},{"value":"/ in `extended_format`","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":48772,"byte_end":48796,"line_start":165,"line_end":165,"column_start":5,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":1045},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":48870,"byte_end":48883,"line_start":169,"line_end":169,"column_start":9,"column_end":22},"name":"channel_count","qualname":"::fmt::WaveFmt::channel_count","value":"u16","parent":{"krate":0,"index":1043},"children":[],"decl_id":null,"docs":" Count of audio channels in each frame\n","sig":null,"attributes":[{"value":"/ Count of audio channels in each frame","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":48820,"byte_end":48861,"line_start":168,"line_end":168,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":1046},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":48977,"byte_end":48988,"line_start":174,"line_end":174,"column_start":9,"column_end":20},"name":"sample_rate","qualname":"::fmt::WaveFmt::sample_rate","value":"u32","parent":{"krate":0,"index":1043},"children":[],"decl_id":null,"docs":" Playback rate of the audio data","sig":null,"attributes":[{"value":"/ Playback rate of the audio data","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":48895,"byte_end":48930,"line_start":171,"line_end":171,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":48935,"byte_end":48938,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ In frames per second.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":48943,"byte_end":48968,"line_start":173,"line_end":173,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":1047},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":49104,"byte_end":49120,"line_start":179,"line_end":179,"column_start":9,"column_end":25},"name":"bytes_per_second","qualname":"::fmt::WaveFmt::bytes_per_second","value":"u32","parent":{"krate":0,"index":1043},"children":[],"decl_id":null,"docs":" Count of bytes per second\n \n By rule, this is `block_alignment * sample_rate`\n","sig":null,"attributes":[{"value":"/ Count of bytes per second","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":49000,"byte_end":49029,"line_start":176,"line_end":176,"column_start":5,"column_end":34}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":49034,"byte_end":49038,"line_start":177,"line_end":177,"column_start":5,"column_end":9}},{"value":"/ By rule, this is `block_alignment * sample_rate`","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":49043,"byte_end":49095,"line_start":178,"line_end":178,"column_start":5,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":1048},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":49247,"byte_end":49262,"line_start":184,"line_end":184,"column_start":9,"column_end":24},"name":"block_alignment","qualname":"::fmt::WaveFmt::block_alignment","value":"u16","parent":{"krate":0,"index":1043},"children":[],"decl_id":null,"docs":" Count of bytes per audio frame\n \n By rule, this is `channel_count * bits_per_sample / 8`\n","sig":null,"attributes":[{"value":"/ Count of bytes per audio frame","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":49132,"byte_end":49166,"line_start":181,"line_end":181,"column_start":5,"column_end":39}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":49171,"byte_end":49175,"line_start":182,"line_end":182,"column_start":5,"column_end":9}},{"value":"/ By rule, this is `channel_count * bits_per_sample / 8`","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":49180,"byte_end":49238,"line_start":183,"line_end":183,"column_start":5,"column_end":63}}]},{"kind":"Field","id":{"krate":0,"index":1049},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":49786,"byte_end":49801,"line_start":197,"line_end":197,"column_start":9,"column_end":24},"name":"bits_per_sample","qualname":"::fmt::WaveFmt::bits_per_sample","value":"u16","parent":{"krate":0,"index":1043},"children":[],"decl_id":null,"docs":" Count of bits stored in the file per sample","sig":null,"attributes":[{"value":"/ Count of bits stored in the file per sample","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":49274,"byte_end":49321,"line_start":186,"line_end":186,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":49326,"byte_end":49329,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ By rule, `bits_per_sample % 8 == 0` for Broadcast-Wave files.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":49334,"byte_end":49399,"line_start":188,"line_end":188,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":49404,"byte_end":49407,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ Modern clients will encode","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":49412,"byte_end":49442,"line_start":190,"line_end":190,"column_start":5,"column_end":35}},{"value":"/ unusual sample sizes in normal byte sizes but will set the valid_bits","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":49447,"byte_end":49520,"line_start":191,"line_end":191,"column_start":5,"column_end":78}},{"value":"/ flag in extended format record.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":49525,"byte_end":49560,"line_start":192,"line_end":192,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":49565,"byte_end":49568,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ Generally speaking this will be true for all modern wave files, though","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":49573,"byte_end":49647,"line_start":194,"line_end":194,"column_start":5,"column_end":79}},{"value":"/ there was an historical \"packed\" stereo format of 20 bits per sample,","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":49652,"byte_end":49725,"line_start":195,"line_end":195,"column_start":5,"column_end":78}},{"value":"/ 5 bytes per frame, 5 bytes block alignment.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":49730,"byte_end":49777,"line_start":196,"line_end":196,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":1050},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":49974,"byte_end":49989,"line_start":203,"line_end":203,"column_start":9,"column_end":24},"name":"extended_format","qualname":"::fmt::WaveFmt::extended_format","value":"std::option::Option<fmt::WaveFmtExtended>","parent":{"krate":0,"index":1043},"children":[],"decl_id":null,"docs":" Extended format description\n \n Additional format metadata if `channel_count` is greater than 2,\n or if certain codecs are used.\n","sig":null,"attributes":[{"value":"/ Extended format description","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":49813,"byte_end":49844,"line_start":199,"line_end":199,"column_start":5,"column_end":36}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":49849,"byte_end":49853,"line_start":200,"line_end":200,"column_start":5,"column_end":9}},{"value":"/ Additional format metadata if `channel_count` is greater than 2,","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":49858,"byte_end":49926,"line_start":201,"line_end":201,"column_start":5,"column_end":73}},{"value":"/ or if certain codecs are used.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":49931,"byte_end":49965,"line_start":202,"line_end":202,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":449},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":50046,"byte_end":50067,"line_start":209,"line_end":209,"column_start":12,"column_end":33},"name":"valid_bits_per_sample","qualname":"<WaveFmt>::valid_bits_per_sample","value":"pub fn valid_bits_per_sample(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":450},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":50320,"byte_end":50332,"line_start":218,"line_end":218,"column_start":12,"column_end":24},"name":"new_pcm_mono","qualname":"<WaveFmt>::new_pcm_mono","value":"pub fn new_pcm_mono(u32, u16) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new integer PCM format for a monoaural audio stream.\n","sig":null,"attributes":[{"value":"/ Create a new integer PCM format for a monoaural audio stream.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":50243,"byte_end":50308,"line_start":217,"line_end":217,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":451},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":50567,"byte_end":50581,"line_start":224,"line_end":224,"column_start":12,"column_end":26},"name":"new_pcm_stereo","qualname":"<WaveFmt>::new_pcm_stereo","value":"pub fn new_pcm_stereo(u32, u16) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new integer PCM format for a standard Left-Right stereo audio \n stream.\n","sig":null,"attributes":[{"value":"/ Create a new integer PCM format for a standard Left-Right stereo audio ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":50464,"byte_end":50539,"line_start":222,"line_end":222,"column_start":5,"column_end":80}},{"value":"/ stream.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":50544,"byte_end":50555,"line_start":223,"line_end":223,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":452},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":50784,"byte_end":50801,"line_start":229,"line_end":229,"column_start":12,"column_end":29},"name":"new_pcm_ambisonic","qualname":"<WaveFmt>::new_pcm_ambisonic","value":"pub fn new_pcm_ambisonic(u32, u16, u16) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new integer PCM format for ambisonic b-format.\n","sig":null,"attributes":[{"value":"/ Create a new integer PCM format for ambisonic b-format.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":50713,"byte_end":50772,"line_start":228,"line_end":228,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":453},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":51914,"byte_end":51934,"line_start":253,"line_end":253,"column_start":12,"column_end":32},"name":"new_pcm_multichannel","qualname":"<WaveFmt>::new_pcm_multichannel","value":"pub fn new_pcm_multichannel(u32, u16, u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new integer PCM format `WaveFmt` with a custom channel bitmap.\n \n The order of `channels` is not important. When reading or writing \n audio frames you must use the standard multichannel order for Wave \n files, the numerical order of the cases of `ChannelMask`.\n","sig":null,"attributes":[{"value":"/ Create a new integer PCM format `WaveFmt` with a custom channel bitmap.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":51601,"byte_end":51676,"line_start":248,"line_end":248,"column_start":5,"column_end":80}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":51681,"byte_end":51685,"line_start":249,"line_end":249,"column_start":5,"column_end":9}},{"value":"/ The order of `channels` is not important. When reading or writing ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":51690,"byte_end":51760,"line_start":250,"line_end":250,"column_start":5,"column_end":75}},{"value":"/ audio frames you must use the standard multichannel order for Wave ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":51765,"byte_end":51836,"line_start":251,"line_end":251,"column_start":5,"column_end":76}},{"value":"/ files, the numerical order of the cases of `ChannelMask`.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":51841,"byte_end":51902,"line_start":252,"line_end":252,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":455},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":53478,"byte_end":53491,"line_start":289,"line_end":289,"column_start":12,"column_end":25},"name":"common_format","qualname":"<WaveFmt>::common_format","value":"pub fn common_format(&Self) -> CommonFormat","parent":null,"children":[],"decl_id":null,"docs":" Format or codec of the file's audio data.\n \n The `CommonFormat` unifies the format tag and the format extension GUID. Use this\n method to determine the codec.\n","sig":null,"attributes":[{"value":"/ Format or codec of the file's audio data.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":53283,"byte_end":53328,"line_start":285,"line_end":285,"column_start":5,"column_end":50}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":53333,"byte_end":53337,"line_start":286,"line_end":286,"column_start":5,"column_end":9}},{"value":"/ The `CommonFormat` unifies the format tag and the format extension GUID. Use this","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":53342,"byte_end":53427,"line_start":287,"line_end":287,"column_start":5,"column_end":90}},{"value":"/ method to determine the codec.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":53432,"byte_end":53466,"line_start":288,"line_end":288,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":457},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":53845,"byte_end":53864,"line_start":297,"line_end":297,"column_start":12,"column_end":31},"name":"create_frame_buffer","qualname":"<WaveFmt>::create_frame_buffer","value":"pub fn create_frame_buffer(&Self) -> Vec<i32>","parent":null,"children":[],"decl_id":null,"docs":" Create a frame buffer sized to hold frames for a reader or writer\n \n This is a conveneince method that creates a `Vec<i32>` with\n as many elements as there are channels in the underlying stream. \n","sig":null,"attributes":[{"value":"/ Create a frame buffer sized to hold frames for a reader or writer","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":53613,"byte_end":53682,"line_start":293,"line_end":293,"column_start":5,"column_end":74}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":53687,"byte_end":53691,"line_start":294,"line_end":294,"column_start":5,"column_end":9}},{"value":"/ This is a conveneince method that creates a `Vec<i32>` with","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":53696,"byte_end":53759,"line_start":295,"line_end":295,"column_start":5,"column_end":68}},{"value":"/ as many elements as there are channels in the underlying stream. ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":53764,"byte_end":53833,"line_start":296,"line_end":296,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":54075,"byte_end":54088,"line_start":303,"line_end":303,"column_start":12,"column_end":25},"name":"buffer_length","qualname":"<WaveFmt>::buffer_length","value":"pub fn buffer_length(&Self, u64) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Calculate the size of a byte buffer needed to hold audio data of this \n format for a given number of frames\n","sig":null,"attributes":[{"value":"/ Calculate the size of a byte buffer needed to hold audio data of this ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":53945,"byte_end":54019,"line_start":301,"line_end":301,"column_start":5,"column_end":79}},{"value":"/ format for a given number of frames","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":54024,"byte_end":54063,"line_start":302,"line_end":302,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":459},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":54243,"byte_end":54254,"line_start":308,"line_end":308,"column_start":12,"column_end":23},"name":"pack_frames","qualname":"<WaveFmt>::pack_frames","value":"pub fn pack_frames(&Self, &[i32], &mut Vec<u8>) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":460},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":56195,"byte_end":56203,"line_start":343,"line_end":343,"column_start":12,"column_end":20},"name":"channels","qualname":"<WaveFmt>::channels","value":"pub fn channels(&Self) -> Vec<ChannelDescriptor>","parent":null,"children":[],"decl_id":null,"docs":" Read bytes into frames\n Channel descriptors for each channel.\n","sig":null,"attributes":[{"value":"/ Read bytes into frames","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":55323,"byte_end":55349,"line_start":327,"line_end":327,"column_start":5,"column_end":31}},{"value":"/ Channel descriptors for each channel.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":56142,"byte_end":56183,"line_start":342,"line_end":342,"column_start":5,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1056},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":58404,"byte_end":58420,"line_start":31,"line_end":31,"column_start":12,"column_end":28},"name":"AudioFrameReader","qualname":"::wavereader::AudioFrameReader","value":"AudioFrameReader {  }","parent":null,"children":[{"krate":0,"index":1058},{"krate":0,"index":1059},{"krate":0,"index":1060},{"krate":0,"index":1061}],"decl_id":null,"docs":" Read audio frames\n \n The inner reader is interpreted as a raw audio data\n bitstream having a format specified by `format`.\n \n","sig":null,"attributes":[{"value":"/ Read audio frames","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":58235,"byte_end":58256,"line_start":25,"line_end":25,"column_start":1,"column_end":22}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":58257,"byte_end":58261,"line_start":26,"line_end":26,"column_start":1,"column_end":5}},{"value":"/ The inner reader is interpreted as a raw audio data","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":58262,"byte_end":58317,"line_start":27,"line_end":27,"column_start":1,"column_end":56}},{"value":"/ bitstream having a format specified by `format`.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":58318,"byte_end":58370,"line_start":28,"line_end":28,"column_start":1,"column_end":53}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":58371,"byte_end":58375,"line_start":29,"line_end":29,"column_start":1,"column_end":5}}]},{"kind":"Method","id":{"krate":0,"index":566},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":58895,"byte_end":58898,"line_start":48,"line_end":48,"column_start":12,"column_end":15},"name":"new","qualname":"<AudioFrameReader<R>>::new","value":"pub fn new(R, WaveFmt, u64, u64) -> Result<Self, Error>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `AudioFrameReader`\n \n ### Panics\n \n This method does a few sanity checks on the provided format\n parameter to confirm the `block_alignment` law is fulfilled\n and the format tag is readable by this implementation (only\n format 0x01 is supported at this time.) \n","sig":null,"attributes":[{"value":"/ Create a new `AudioFrameReader`","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":58558,"byte_end":58593,"line_start":40,"line_end":40,"column_start":5,"column_end":40}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":58598,"byte_end":58602,"line_start":41,"line_end":41,"column_start":5,"column_end":9}},{"value":"/ ### Panics","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":58607,"byte_end":58621,"line_start":42,"line_end":42,"column_start":5,"column_end":19}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":58626,"byte_end":58630,"line_start":43,"line_end":43,"column_start":5,"column_end":9}},{"value":"/ This method does a few sanity checks on the provided format","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":58635,"byte_end":58698,"line_start":44,"line_end":44,"column_start":5,"column_end":68}},{"value":"/ parameter to confirm the `block_alignment` law is fulfilled","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":58703,"byte_end":58766,"line_start":45,"line_end":45,"column_start":5,"column_end":68}},{"value":"/ and the format tag is readable by this implementation (only","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":58771,"byte_end":58834,"line_start":46,"line_end":46,"column_start":5,"column_end":68}},{"value":"/ format 0x01 is supported at this time.) ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":58839,"byte_end":58883,"line_start":47,"line_end":47,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":567},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":59564,"byte_end":59574,"line_start":61,"line_end":61,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<AudioFrameReader<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Unwrap the inner reader.\n","sig":null,"attributes":[{"value":"/ Unwrap the inner reader.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":59524,"byte_end":59552,"line_start":60,"line_end":60,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":568},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":59924,"byte_end":59930,"line_start":73,"line_end":73,"column_start":12,"column_end":18},"name":"locate","qualname":"<AudioFrameReader<R>>::locate","value":"pub fn locate(&mut Self, u64) -> Result<u64, Error>","parent":null,"children":[],"decl_id":null,"docs":" Locate the read position to a different frame\n \n Seeks within the audio stream.\n \n Returns the new location of the read position.\n \n locate() behaves similarly to Read methods in that\n seeking after the end of the audio data is not an error.\n","sig":null,"attributes":[{"value":"/ Locate the read position to a different frame","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":59618,"byte_end":59667,"line_start":65,"line_end":65,"column_start":5,"column_end":54}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":59672,"byte_end":59676,"line_start":66,"line_end":66,"column_start":5,"column_end":9}},{"value":"/ Seeks within the audio stream.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":59681,"byte_end":59715,"line_start":67,"line_end":67,"column_start":5,"column_end":39}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":59720,"byte_end":59724,"line_start":68,"line_end":68,"column_start":5,"column_end":9}},{"value":"/ Returns the new location of the read position.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":59729,"byte_end":59779,"line_start":69,"line_end":69,"column_start":5,"column_end":55}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":59784,"byte_end":59788,"line_start":70,"line_end":70,"column_start":5,"column_end":9}},{"value":"/ locate() behaves similarly to Read methods in that","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":59793,"byte_end":59847,"line_start":71,"line_end":71,"column_start":5,"column_end":59}},{"value":"/ seeking after the end of the audio data is not an error.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":59852,"byte_end":59912,"line_start":72,"line_end":72,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":569},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":60935,"byte_end":60953,"line_start":98,"line_end":98,"column_start":12,"column_end":30},"name":"read_integer_frame","qualname":"<AudioFrameReader<R>>::read_integer_frame","value":"pub fn read_integer_frame(&mut Self, &mut [i32]) -> Result<u64, Error>","parent":null,"children":[],"decl_id":null,"docs":" Read a frame\n \n A single frame is read from the audio stream and the read location\n is advanced one frame.\n \n Regardless of the number of bits in the audio sample, this method\n always writes `i32` samples back to the buffer. These samples are \n written back \"right-aligned\" so samples that are shorter than i32\n will leave the MSB bits empty.\n \n For example: A full-code sample in 16 bit (0xFFFF) will be written \n back to the buffer as 0x0000FFFF.\n  \n \n ### Panics\n \n The `buffer` must have a number of elements equal to the number of \n channels and this method will panic if this is not the case.\n","sig":null,"attributes":[{"value":"/ Read a frame","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":60202,"byte_end":60218,"line_start":80,"line_end":80,"column_start":5,"column_end":21}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":60223,"byte_end":60227,"line_start":81,"line_end":81,"column_start":5,"column_end":9}},{"value":"/ A single frame is read from the audio stream and the read location","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":60232,"byte_end":60302,"line_start":82,"line_end":82,"column_start":5,"column_end":75}},{"value":"/ is advanced one frame.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":60307,"byte_end":60333,"line_start":83,"line_end":83,"column_start":5,"column_end":31}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":60338,"byte_end":60342,"line_start":84,"line_end":84,"column_start":5,"column_end":9}},{"value":"/ Regardless of the number of bits in the audio sample, this method","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":60347,"byte_end":60416,"line_start":85,"line_end":85,"column_start":5,"column_end":74}},{"value":"/ always writes `i32` samples back to the buffer. These samples are ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":60421,"byte_end":60491,"line_start":86,"line_end":86,"column_start":5,"column_end":75}},{"value":"/ written back \"right-aligned\" so samples that are shorter than i32","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":60496,"byte_end":60565,"line_start":87,"line_end":87,"column_start":5,"column_end":74}},{"value":"/ will leave the MSB bits empty.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":60570,"byte_end":60604,"line_start":88,"line_end":88,"column_start":5,"column_end":39}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":60609,"byte_end":60613,"line_start":89,"line_end":89,"column_start":5,"column_end":9}},{"value":"/ For example: A full-code sample in 16 bit (0xFFFF) will be written ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":60618,"byte_end":60689,"line_start":90,"line_end":90,"column_start":5,"column_end":76}},{"value":"/ back to the buffer as 0x0000FFFF.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":60694,"byte_end":60731,"line_start":91,"line_end":91,"column_start":5,"column_end":42}},{"value":"/  ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":60736,"byte_end":60741,"line_start":92,"line_end":92,"column_start":5,"column_end":10}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":60746,"byte_end":60750,"line_start":93,"line_end":93,"column_start":5,"column_end":9}},{"value":"/ ### Panics","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":60755,"byte_end":60769,"line_start":94,"line_end":94,"column_start":5,"column_end":19}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":60774,"byte_end":60778,"line_start":95,"line_end":95,"column_start":5,"column_end":9}},{"value":"/ The `buffer` must have a number of elements equal to the number of ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":60783,"byte_end":60854,"line_start":96,"line_end":96,"column_start":5,"column_end":76}},{"value":"/ channels and this method will panic if this is not the case.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":60859,"byte_end":60923,"line_start":97,"line_end":97,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":1065},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":64288,"byte_end":64298,"line_start":172,"line_end":172,"column_start":12,"column_end":22},"name":"WaveReader","qualname":"::wavereader::WaveReader","value":"WaveReader { inner }","parent":null,"children":[{"krate":0,"index":1067}],"decl_id":null,"docs":" Wave, Broadcast-WAV and RF64/BW64 parser/reader.","sig":null,"attributes":[{"value":"/ Wave, Broadcast-WAV and RF64/BW64 parser/reader.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":62207,"byte_end":62259,"line_start":125,"line_end":125,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":62260,"byte_end":62263,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":62264,"byte_end":62271,"line_start":127,"line_end":127,"column_start":1,"column_end":8}},{"value":"/ use bwavfile::WaveReader; ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":62272,"byte_end":62302,"line_start":128,"line_end":128,"column_start":1,"column_end":31}},{"value":"/ let mut r = WaveReader::open(\"tests/media/ff_silence.wav\").unwrap();","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":62303,"byte_end":62375,"line_start":129,"line_end":129,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":62376,"byte_end":62379,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ let format = r.format().unwrap();","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":62380,"byte_end":62417,"line_start":131,"line_end":131,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(format.sample_rate, 44100);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":62418,"byte_end":62460,"line_start":132,"line_end":132,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(format.channel_count, 1);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":62461,"byte_end":62501,"line_start":133,"line_end":133,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":62502,"byte_end":62505,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ let mut frame_reader = r.audio_frame_reader().unwrap();","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":62506,"byte_end":62565,"line_start":135,"line_end":135,"column_start":1,"column_end":60}},{"value":"/ let mut buffer = format.create_frame_buffer();","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":62566,"byte_end":62616,"line_start":136,"line_end":136,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":62617,"byte_end":62620,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ let read = frame_reader.read_integer_frame(&mut buffer).unwrap();","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":62621,"byte_end":62690,"line_start":138,"line_end":138,"column_start":1,"column_end":70}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":62691,"byte_end":62695,"line_start":139,"line_end":139,"column_start":1,"column_end":5}},{"value":"/ assert_eq!(buffer, [0i32]);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":62696,"byte_end":62727,"line_start":140,"line_end":140,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(read, 1);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":62728,"byte_end":62752,"line_start":141,"line_end":141,"column_start":1,"column_end":25}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":62753,"byte_end":62757,"line_start":142,"line_end":142,"column_start":1,"column_end":5}},{"value":"/ ```","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":62758,"byte_end":62765,"line_start":143,"line_end":143,"column_start":1,"column_end":8}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":62766,"byte_end":62770,"line_start":144,"line_end":144,"column_start":1,"column_end":5}},{"value":"/ ## Resources","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":62771,"byte_end":62787,"line_start":145,"line_end":145,"column_start":1,"column_end":17}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":62788,"byte_end":62792,"line_start":146,"line_end":146,"column_start":1,"column_end":5}},{"value":"/ ### Implementation of Wave Files","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":62793,"byte_end":62829,"line_start":147,"line_end":147,"column_start":1,"column_end":37}},{"value":"/ - [Peter Kabal, McGill University](http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/WAVE/WAVE.html)","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":62830,"byte_end":62937,"line_start":148,"line_end":148,"column_start":1,"column_end":108}},{"value":"/ - [Multimedia Programming Interface and Data Specifications 1.0](http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/WAVE/Docs/riffmci.pdf) ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":62938,"byte_end":63083,"line_start":149,"line_end":149,"column_start":1,"column_end":146}},{"value":"/   (August 1991), IBM Corporation and Microsoft Corporation","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":63084,"byte_end":63146,"line_start":150,"line_end":150,"column_start":1,"column_end":63}},{"value":"/  ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":63147,"byte_end":63152,"line_start":151,"line_end":151,"column_start":1,"column_end":6}},{"value":"/ ### Implementation of Broadcast Wave Files","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":63153,"byte_end":63199,"line_start":152,"line_end":152,"column_start":1,"column_end":47}},{"value":"/ - [EBU Tech 3285][ebu3285] (May 2011), \"Specification of the Broadcast Wave Format (BWF)\"","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":63200,"byte_end":63293,"line_start":153,"line_end":153,"column_start":1,"column_end":94}},{"value":"/   - [Supplement 1](https://tech.ebu.ch/docs/tech/tech3285s1.pdf) (July 1997): MPEG Audio","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":63294,"byte_end":63386,"line_start":154,"line_end":154,"column_start":1,"column_end":93}},{"value":"/   - [EBU Rec 68](https://tech.ebu.ch/docs/r/r068.pdf): Signal modulation and format constraints","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":63387,"byte_end":63486,"line_start":155,"line_end":155,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":63487,"byte_end":63490,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ ### Implementation of 64-bit Wave Files","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":63491,"byte_end":63534,"line_start":157,"line_end":157,"column_start":1,"column_end":44}},{"value":"/ - [ITU-R 2088][itu2088] (October 2019), \"Long-form file format for the international exchange of audio programme materials with metadata\"","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":63535,"byte_end":63676,"line_start":158,"line_end":158,"column_start":1,"column_end":142}},{"value":"/   - Presently in force, adopted by the EBU in [EBU Tech 3306v2][ebu3306v2] (June 2018).","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":63677,"byte_end":63768,"line_start":159,"line_end":159,"column_start":1,"column_end":92}},{"value":"/ - [EBU Tech 3306v1][ebu3306v1] (July 2009), \"MBWF / RF64: An extended File Format for Audio\"","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":63769,"byte_end":63865,"line_start":160,"line_end":160,"column_start":1,"column_end":97}},{"value":"/   - No longer in force, however long-established.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":63866,"byte_end":63919,"line_start":161,"line_end":161,"column_start":1,"column_end":54}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":63920,"byte_end":63924,"line_start":162,"line_end":162,"column_start":1,"column_end":5}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":63925,"byte_end":63928,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ [ebu3285]: https://tech.ebu.ch/docs/tech/tech3285.pdf","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":63929,"byte_end":63986,"line_start":164,"line_end":164,"column_start":1,"column_end":58}},{"value":"/ [ebu3306v1]: https://tech.ebu.ch/docs/tech/tech3306v1_1.pdf","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":63987,"byte_end":64050,"line_start":165,"line_end":165,"column_start":1,"column_end":64}},{"value":"/ [ebu3306v2]: https://tech.ebu.ch/docs/tech/tech3306.pdf","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":64051,"byte_end":64110,"line_start":166,"line_end":166,"column_start":1,"column_end":60}},{"value":"/ [itu2088]: https://www.itu.int/dms_pubrec/itu-r/rec/bs/R-REC-BS.2088-1-201910-I!!PDF-E.pdf","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":64111,"byte_end":64205,"line_start":167,"line_end":167,"column_start":1,"column_end":95}},{"value":"/ [rfc3261]: https://tools.ietf.org/html/rfc2361 ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":64206,"byte_end":64257,"line_start":168,"line_end":168,"column_start":1,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":1067},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":64325,"byte_end":64330,"line_start":173,"line_end":173,"column_start":9,"column_end":14},"name":"inner","qualname":"::wavereader::WaveReader::inner","value":"R","parent":{"krate":0,"index":1065},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":571},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":64385,"byte_end":64389,"line_start":178,"line_end":178,"column_start":12,"column_end":16},"name":"open","qualname":"<WaveReader<BufReader<File>>>::open","value":"pub fn open(&str) -> Result<Self, ParserError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":573},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":64721,"byte_end":64736,"line_start":191,"line_end":191,"column_start":12,"column_end":27},"name":"open_unbuffered","qualname":"<WaveReader<File>>::open_unbuffered","value":"pub fn open_unbuffered(&str) -> Result<Self, ParserError>","parent":null,"children":[],"decl_id":null,"docs":" Open a file for reading with unbuffered IO.","sig":null,"attributes":[{"value":"/ Open a file for reading with unbuffered IO.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":64582,"byte_end":64629,"line_start":187,"line_end":187,"column_start":6,"column_end":53}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":64635,"byte_end":64638,"line_start":188,"line_end":188,"column_start":6,"column_end":9}},{"value":"/ A convenience that opens `path` and calls `Self::new()`","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":64644,"byte_end":64703,"line_start":189,"line_end":189,"column_start":6,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":576},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":66138,"byte_end":66141,"line_start":229,"line_end":229,"column_start":12,"column_end":15},"name":"new","qualname":"<WaveReader<R>>::new","value":"pub fn new(R) -> Result<Self, ParserError>","parent":null,"children":[],"decl_id":null,"docs":" Wrap a `Read` struct in a new `WaveReader`.\n \n This is the primary entry point into the `WaveReader` interface. The\n stream passed as `inner` must be at the beginning of the header of the\n WAVE data. For a .wav file, this means it must be at the start of the \n file.","sig":null,"attributes":[{"value":"/ Wrap a `Read` struct in a new `WaveReader`.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":64913,"byte_end":64960,"line_start":199,"line_end":199,"column_start":5,"column_end":52}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":64965,"byte_end":64969,"line_start":200,"line_end":200,"column_start":5,"column_end":9}},{"value":"/ This is the primary entry point into the `WaveReader` interface. The","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":64974,"byte_end":65046,"line_start":201,"line_end":201,"column_start":5,"column_end":77}},{"value":"/ stream passed as `inner` must be at the beginning of the header of the","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":65051,"byte_end":65125,"line_start":202,"line_end":202,"column_start":5,"column_end":79}},{"value":"/ WAVE data. For a .wav file, this means it must be at the start of the ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":65130,"byte_end":65204,"line_start":203,"line_end":203,"column_start":5,"column_end":79}},{"value":"/ file.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":65209,"byte_end":65218,"line_start":204,"line_end":204,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":65223,"byte_end":65226,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ This function does a minimal validation on the provided stream and","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":65231,"byte_end":65301,"line_start":206,"line_end":206,"column_start":5,"column_end":75}},{"value":"/ will return an `Err(errors::Error)` immediately if there is a structural ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":65306,"byte_end":65383,"line_start":207,"line_end":207,"column_start":5,"column_end":82}},{"value":"/ inconsistency that makes the stream unreadable or if it's missing ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":65388,"byte_end":65458,"line_start":208,"line_end":208,"column_start":5,"column_end":75}},{"value":"/ essential components that make interpreting the audio data impossible.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":65463,"byte_end":65537,"line_start":209,"line_end":209,"column_start":5,"column_end":79}},{"value":"/ ```rust","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":65548,"byte_end":65559,"line_start":211,"line_end":211,"column_start":5,"column_end":16}},{"value":"/ use std::fs::File;","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":65564,"byte_end":65586,"line_start":212,"line_end":212,"column_start":5,"column_end":27}},{"value":"/ use std::io::{Error,ErrorKind};","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":65591,"byte_end":65626,"line_start":213,"line_end":213,"column_start":5,"column_end":40}},{"value":"/ use bwavfile::{WaveReader, Error as WavError};","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":65631,"byte_end":65681,"line_start":214,"line_end":214,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":65686,"byte_end":65689,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ let f = File::open(\"tests/media/error.wav\").unwrap();","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":65694,"byte_end":65751,"line_start":216,"line_end":216,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":65756,"byte_end":65759,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ let reader = WaveReader::new(f);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":65764,"byte_end":65800,"line_start":218,"line_end":218,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":65805,"byte_end":65808,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ match reader {","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":65813,"byte_end":65831,"line_start":220,"line_end":220,"column_start":5,"column_end":23}},{"value":"/      Ok(_) => panic!(\"error.wav should not be openable\"),","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":65836,"byte_end":65897,"line_start":221,"line_end":221,"column_start":5,"column_end":66}},{"value":"/      Err( WavError::IOError( e ) ) => {","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":65902,"byte_end":65945,"line_start":222,"line_end":222,"column_start":5,"column_end":48}},{"value":"/          assert_eq!(e.kind(), ErrorKind::UnexpectedEof)","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":65950,"byte_end":66009,"line_start":223,"line_end":223,"column_start":5,"column_end":64}},{"value":"/      }","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":66014,"byte_end":66024,"line_start":224,"line_end":224,"column_start":5,"column_end":15}},{"value":"/      Err(e) => panic!(\"Unexpected error was returned {:?}\", e)","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":66029,"byte_end":66095,"line_start":225,"line_end":225,"column_start":5,"column_end":71}},{"value":"/ }","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":66100,"byte_end":66105,"line_start":226,"line_end":226,"column_start":5,"column_end":10}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":66110,"byte_end":66114,"line_start":227,"line_end":227,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":66119,"byte_end":66126,"line_start":228,"line_end":228,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":577},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":66335,"byte_end":66345,"line_start":237,"line_end":237,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<WaveReader<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Unwrap the inner reader.\n","sig":null,"attributes":[{"value":"/ Unwrap the inner reader.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":66295,"byte_end":66323,"line_start":236,"line_end":236,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":578},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":66516,"byte_end":66534,"line_start":244,"line_end":244,"column_start":12,"column_end":30},"name":"audio_frame_reader","qualname":"<WaveReader<R>>::audio_frame_reader","value":"pub fn audio_frame_reader(Self) -> Result<AudioFrameReader<R>, ParserError>","parent":null,"children":[],"decl_id":null,"docs":"\n Create an `AudioFrameReader` for reading each audio frame and consume the `WaveReader`.","sig":null,"attributes":[{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":66397,"byte_end":66400,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ Create an `AudioFrameReader` for reading each audio frame and consume the `WaveReader`.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":66405,"byte_end":66496,"line_start":242,"line_end":242,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":66501,"byte_end":66504,"line_start":243,"line_end":243,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":579},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":66876,"byte_end":66888,"line_start":252,"line_end":252,"column_start":12,"column_end":24},"name":"frame_length","qualname":"<WaveReader<R>>::frame_length","value":"pub fn frame_length(&mut Self) -> Result<u64, ParserError>","parent":null,"children":[],"decl_id":null,"docs":" The count of audio frames in the file.\n","sig":null,"attributes":[{"value":"/ The count of audio frames in the file.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":66822,"byte_end":66864,"line_start":251,"line_end":251,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":580},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":67188,"byte_end":67194,"line_start":261,"line_end":261,"column_start":12,"column_end":18},"name":"format","qualname":"<WaveReader<R>>::format","value":"pub fn format(&mut Self) -> Result<WaveFmt, ParserError>","parent":null,"children":[],"decl_id":null,"docs":" Sample and frame format of this wave file.","sig":null,"attributes":[{"value":"/ Sample and frame format of this wave file.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":67122,"byte_end":67168,"line_start":259,"line_end":259,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":67173,"byte_end":67176,"line_start":260,"line_end":260,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":581},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":67492,"byte_end":67511,"line_start":269,"line_end":269,"column_start":12,"column_end":31},"name":"broadcast_extension","qualname":"<WaveReader<R>>::broadcast_extension","value":"pub fn broadcast_extension(&mut Self) -> Result<Option<Bext>, ParserError>","parent":null,"children":[],"decl_id":null,"docs":" The Broadcast-WAV metadata record for this file, if present.\n \n","sig":null,"attributes":[{"value":"/ The Broadcast-WAV metadata record for this file, if present.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":67407,"byte_end":67471,"line_start":267,"line_end":267,"column_start":5,"column_end":69}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":67476,"byte_end":67480,"line_start":268,"line_end":268,"column_start":5,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":582},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":68510,"byte_end":68518,"line_start":298,"line_end":298,"column_start":12,"column_end":20},"name":"channels","qualname":"<WaveReader<R>>::channels","value":"pub fn channels(&mut Self) -> Result<Vec<ChannelDescriptor>, ParserError>","parent":null,"children":[],"decl_id":null,"docs":" Describe the channels in this file\n \n Returns a vector of channel descriptors, one for each channel\n \n ```rust\n use bwavfile::WaveReader;\n use bwavfile::ChannelMask;","sig":null,"attributes":[{"value":"/ Describe the channels in this file","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":67871,"byte_end":67909,"line_start":281,"line_end":281,"column_start":5,"column_end":43}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":67914,"byte_end":67918,"line_start":282,"line_end":282,"column_start":5,"column_end":9}},{"value":"/ Returns a vector of channel descriptors, one for each channel","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":67923,"byte_end":67988,"line_start":283,"line_end":283,"column_start":5,"column_end":70}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":67993,"byte_end":67997,"line_start":284,"line_end":284,"column_start":5,"column_end":9}},{"value":"/ ```rust","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":68002,"byte_end":68013,"line_start":285,"line_end":285,"column_start":5,"column_end":16}},{"value":"/ use bwavfile::WaveReader;","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":68018,"byte_end":68047,"line_start":286,"line_end":286,"column_start":5,"column_end":34}},{"value":"/ use bwavfile::ChannelMask;","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":68052,"byte_end":68082,"line_start":287,"line_end":287,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":68087,"byte_end":68090,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ let mut f = WaveReader::open(\"tests/media/pt_24bit_51.wav\").unwrap();","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":68095,"byte_end":68168,"line_start":289,"line_end":289,"column_start":5,"column_end":78}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":68173,"byte_end":68177,"line_start":290,"line_end":290,"column_start":5,"column_end":9}},{"value":"/ let chans = f.channels().unwrap();","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":68182,"byte_end":68220,"line_start":291,"line_end":291,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(chans[0].index, 0);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":68225,"byte_end":68259,"line_start":292,"line_end":292,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(chans[0].speaker, ChannelMask::FrontLeft);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":68264,"byte_end":68321,"line_start":293,"line_end":293,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(chans[3].index, 3);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":68326,"byte_end":68360,"line_start":294,"line_end":294,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(chans[3].speaker, ChannelMask::LowFrequency);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":68365,"byte_end":68425,"line_start":295,"line_end":295,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(chans[4].speaker, ChannelMask::BackLeft);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":68430,"byte_end":68486,"line_start":296,"line_end":296,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":68491,"byte_end":68498,"line_start":297,"line_end":297,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":584},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":70292,"byte_end":70302,"line_start":339,"line_end":339,"column_start":12,"column_end":22},"name":"cue_points","qualname":"<WaveReader<R>>::cue_points","value":"pub fn cue_points(&mut Self) -> Result<Vec<Cue>, ParserError>","parent":null,"children":[],"decl_id":null,"docs":" Read cue points.\n \n ```rust\n use bwavfile::WaveReader;\n use bwavfile::Cue;\n \n let mut f = WaveReader::open(\"tests/media/izotope_test.wav\").unwrap();\n let cue_points = f.cue_points().unwrap();\n \n assert_eq!(cue_points.len(), 3);\n assert_eq!(cue_points[0].frame, 12532);\n assert_eq!(cue_points[0].length, None);\n assert_eq!(cue_points[0].label, Some(String::from(\"Marker 1\")));\n assert_eq!(cue_points[0].note, Some(String::from(\"Marker 1 Comment\")));\n \n assert_eq!(cue_points[1].frame, 20997);\n assert_eq!(cue_points[1].length, None);\n assert_eq!(cue_points[1].label, Some(String::from(\"Marker 2\")));\n assert_eq!(cue_points[1].note, Some(String::from(\"Marker 2 Comment\"))); \n \n assert_eq!(cue_points[2].frame, 26711);\n assert_eq!(cue_points[2].length, Some(6465));\n assert_eq!(cue_points[2].label, Some(String::from(\"Timed Region\")));\n assert_eq!(cue_points[2].note, Some(String::from(\"Region Comment\"))); \n \n ```\n","sig":null,"attributes":[{"value":"/ Read cue points.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":69190,"byte_end":69210,"line_start":313,"line_end":313,"column_start":5,"column_end":25}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":69215,"byte_end":69219,"line_start":314,"line_end":314,"column_start":5,"column_end":9}},{"value":"/ ```rust","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":69224,"byte_end":69235,"line_start":315,"line_end":315,"column_start":5,"column_end":16}},{"value":"/ use bwavfile::WaveReader;","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":69240,"byte_end":69269,"line_start":316,"line_end":316,"column_start":5,"column_end":34}},{"value":"/ use bwavfile::Cue;","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":69274,"byte_end":69296,"line_start":317,"line_end":317,"column_start":5,"column_end":27}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":69301,"byte_end":69305,"line_start":318,"line_end":318,"column_start":5,"column_end":9}},{"value":"/ let mut f = WaveReader::open(\"tests/media/izotope_test.wav\").unwrap();","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":69310,"byte_end":69384,"line_start":319,"line_end":319,"column_start":5,"column_end":79}},{"value":"/ let cue_points = f.cue_points().unwrap();","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":69389,"byte_end":69434,"line_start":320,"line_end":320,"column_start":5,"column_end":50}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":69439,"byte_end":69443,"line_start":321,"line_end":321,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(cue_points.len(), 3);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":69448,"byte_end":69484,"line_start":322,"line_end":322,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(cue_points[0].frame, 12532);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":69489,"byte_end":69532,"line_start":323,"line_end":323,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(cue_points[0].length, None);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":69537,"byte_end":69580,"line_start":324,"line_end":324,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(cue_points[0].label, Some(String::from(\"Marker 1\")));","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":69585,"byte_end":69653,"line_start":325,"line_end":325,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(cue_points[0].note, Some(String::from(\"Marker 1 Comment\")));","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":69658,"byte_end":69733,"line_start":326,"line_end":326,"column_start":5,"column_end":80}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":69738,"byte_end":69742,"line_start":327,"line_end":327,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(cue_points[1].frame, 20997);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":69747,"byte_end":69790,"line_start":328,"line_end":328,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(cue_points[1].length, None);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":69795,"byte_end":69838,"line_start":329,"line_end":329,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(cue_points[1].label, Some(String::from(\"Marker 2\")));","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":69843,"byte_end":69911,"line_start":330,"line_end":330,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(cue_points[1].note, Some(String::from(\"Marker 2 Comment\"))); ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":69916,"byte_end":69992,"line_start":331,"line_end":331,"column_start":5,"column_end":81}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":69997,"byte_end":70001,"line_start":332,"line_end":332,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(cue_points[2].frame, 26711);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":70006,"byte_end":70049,"line_start":333,"line_end":333,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(cue_points[2].length, Some(6465));","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":70054,"byte_end":70103,"line_start":334,"line_end":334,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(cue_points[2].label, Some(String::from(\"Timed Region\")));","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":70108,"byte_end":70180,"line_start":335,"line_end":335,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(cue_points[2].note, Some(String::from(\"Region Comment\"))); ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":70185,"byte_end":70259,"line_start":336,"line_end":336,"column_start":5,"column_end":79}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":70264,"byte_end":70268,"line_start":337,"line_end":337,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":70273,"byte_end":70280,"line_start":338,"line_end":338,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":585},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":71009,"byte_end":71018,"line_start":358,"line_end":358,"column_start":12,"column_end":21},"name":"read_ixml","qualname":"<WaveReader<R>>::read_ixml","value":"pub fn read_ixml(&mut Self, &mut Vec<u8>) -> Result<usize, ParserError>","parent":null,"children":[],"decl_id":null,"docs":" Read iXML data.\n \n The iXML data will be appended to `buffer`.\n If there are no iXML metadata present in the file, \n Ok(0) will be returned.\n","sig":null,"attributes":[{"value":"/ Read iXML data.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":70825,"byte_end":70844,"line_start":353,"line_end":353,"column_start":5,"column_end":24}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":70849,"byte_end":70853,"line_start":354,"line_end":354,"column_start":5,"column_end":9}},{"value":"/ The iXML data will be appended to `buffer`.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":70858,"byte_end":70905,"line_start":355,"line_end":355,"column_start":5,"column_end":52}},{"value":"/ If there are no iXML metadata present in the file, ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":70910,"byte_end":70965,"line_start":356,"line_end":356,"column_start":5,"column_end":60}},{"value":"/ Ok(0) will be returned.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":70970,"byte_end":70997,"line_start":357,"line_end":357,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":586},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":71393,"byte_end":71402,"line_start":369,"line_end":369,"column_start":12,"column_end":21},"name":"read_axml","qualname":"<WaveReader<R>>::read_axml","value":"pub fn read_axml(&mut Self, &mut Vec<u8>) -> Result<usize, ParserError>","parent":null,"children":[],"decl_id":null,"docs":" Read AXML data.\n \n The axml data will be appended to `buffer`. By convention this will \n generally be ADM metadata.\n \n If there are no axml metadata present in the file, \n Ok(0) will be returned\n","sig":null,"attributes":[{"value":"/ Read AXML data.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":71141,"byte_end":71160,"line_start":362,"line_end":362,"column_start":5,"column_end":24}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":71165,"byte_end":71169,"line_start":363,"line_end":363,"column_start":5,"column_end":9}},{"value":"/ The axml data will be appended to `buffer`. By convention this will ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":71174,"byte_end":71246,"line_start":364,"line_end":364,"column_start":5,"column_end":77}},{"value":"/ generally be ADM metadata.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":71251,"byte_end":71281,"line_start":365,"line_end":365,"column_start":5,"column_end":35}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":71286,"byte_end":71290,"line_start":366,"line_end":366,"column_start":5,"column_end":9}},{"value":"/ If there are no axml metadata present in the file, ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":71295,"byte_end":71350,"line_start":367,"line_end":367,"column_start":5,"column_end":60}},{"value":"/ Ok(0) will be returned","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":71355,"byte_end":71381,"line_start":368,"line_end":368,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":587},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":71790,"byte_end":71807,"line_start":382,"line_end":382,"column_start":12,"column_end":29},"name":"validate_readable","qualname":"<WaveReader<R>>::validate_readable","value":"pub fn validate_readable(&mut Self) -> Result<(), ParserError>","parent":null,"children":[],"decl_id":null,"docs":" Validate file is readable.\n \n  `Ok(())` if the source meets the minimum standard of \n  readability by a permissive client:\n  - `fmt` chunk and `data` chunk are present\n  - `fmt` chunk appears before `data` chunk\n","sig":null,"attributes":[{"value":"*\n    * Validate file is readable.\n    * \n    *  `Ok(())` if the source meets the minimum standard of \n    *  readability by a permissive client:\n    *  - `fmt` chunk and `data` chunk are present\n    *  - `fmt` chunk appears before `data` chunk\n    */","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":71525,"byte_end":71778,"line_start":374,"line_end":381,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":588},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":73192,"byte_end":73208,"line_start":420,"line_end":420,"column_start":12,"column_end":28},"name":"validate_minimal","qualname":"<WaveReader<R>>::validate_minimal","value":"pub fn validate_minimal(&mut Self) -> Result<(), ParserError>","parent":null,"children":[],"decl_id":null,"docs":" Validate minimal WAVE file.","sig":null,"attributes":[{"value":"/ Validate minimal WAVE file.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":72135,"byte_end":72166,"line_start":393,"line_end":393,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":72171,"byte_end":72174,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ `Ok(())` if the source is `validate_readable()` AND","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":72179,"byte_end":72234,"line_start":395,"line_end":395,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":72239,"byte_end":72242,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/   - Contains _only_ a `fmt` chunk and `data` chunk, with no other chunks present","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":72247,"byte_end":72331,"line_start":397,"line_end":397,"column_start":5,"column_end":89}},{"value":"/   - `fmt` chunk is exactly 16 bytes long and begins _exactly_ at file offset 12","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":72336,"byte_end":72419,"line_start":398,"line_end":398,"column_start":5,"column_end":88}},{"value":"/   - `data` content begins _exactly_ at file offset 36","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":72424,"byte_end":72481,"line_start":399,"line_end":399,"column_start":5,"column_end":62}},{"value":"/   - is not an RF64/BW64","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":72486,"byte_end":72513,"line_start":400,"line_end":400,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":72518,"byte_end":72521,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ Some clients require a WAVE file to only contain format and data without any other","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":72526,"byte_end":72612,"line_start":402,"line_end":402,"column_start":5,"column_end":91}},{"value":"/ metadata and this function is provided to validate this condition.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":72617,"byte_end":72687,"line_start":403,"line_end":403,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":72692,"byte_end":72695,"line_start":404,"line_end":404,"column_start":5,"column_end":8}},{"value":"/ ### Examples","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":72700,"byte_end":72716,"line_start":405,"line_end":405,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":72721,"byte_end":72724,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":72729,"byte_end":72736,"line_start":407,"line_end":407,"column_start":5,"column_end":12}},{"value":"/ # use bwavfile::WaveReader;","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":72741,"byte_end":72772,"line_start":408,"line_end":408,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":72777,"byte_end":72780,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ let mut w = WaveReader::open(\"tests/media/ff_minimal.wav\").unwrap();","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":72785,"byte_end":72857,"line_start":410,"line_end":410,"column_start":5,"column_end":77}},{"value":"/ w.validate_minimal().expect(\"Minimal wav did not validate not minimal!\");","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":72862,"byte_end":72939,"line_start":411,"line_end":411,"column_start":5,"column_end":82}},{"value":"/ ```","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":72944,"byte_end":72951,"line_start":412,"line_end":412,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":72956,"byte_end":72959,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":72964,"byte_end":72971,"line_start":414,"line_end":414,"column_start":5,"column_end":12}},{"value":"/ # use bwavfile::WaveReader;","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":72976,"byte_end":73007,"line_start":415,"line_end":415,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":73012,"byte_end":73015,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ let mut x = WaveReader::open(\"tests/media/pt_24bit_51.wav\").unwrap();","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":73020,"byte_end":73093,"line_start":417,"line_end":417,"column_start":5,"column_end":78}},{"value":"/ x.validate_minimal().expect_err(\"Complex WAV validated minimal!\");","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":73098,"byte_end":73168,"line_start":418,"line_end":418,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":73173,"byte_end":73180,"line_start":419,"line_end":419,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":74435,"byte_end":74458,"line_start":453,"line_end":453,"column_start":12,"column_end":35},"name":"validate_broadcast_wave","qualname":"<WaveReader<R>>::validate_broadcast_wave","value":"pub fn validate_broadcast_wave(&mut Self) -> Result<(), ParserError>","parent":null,"children":[],"decl_id":null,"docs":" Validate Broadcast-WAVE file format\n \n Returns `Ok(())` if `validate_readable()` and file contains a \n Broadcast-WAV metadata record (a `bext` chunk).\n \n ### Examples\n \n ```\n # use bwavfile::WaveReader;\n \n let mut w = WaveReader::open(\"tests/media/ff_bwav_stereo.wav\").unwrap();\n w.validate_broadcast_wave().expect(\"BWAVE file did not validate BWAVE\");\n \n let mut x = WaveReader::open(\"tests/media/pt_24bit.wav\").unwrap();\n x.validate_broadcast_wave().expect(\"BWAVE file did not validate BWAVE\");\n \n let mut y = WaveReader::open(\"tests/media/audacity_16bit.wav\").unwrap();\n y.validate_broadcast_wave().expect_err(\"Plain WAV file DID validate BWAVE\");\n ```","sig":null,"attributes":[{"value":"/ Validate Broadcast-WAVE file format","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":73630,"byte_end":73669,"line_start":433,"line_end":433,"column_start":5,"column_end":44}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":73674,"byte_end":73678,"line_start":434,"line_end":434,"column_start":5,"column_end":9}},{"value":"/ Returns `Ok(())` if `validate_readable()` and file contains a ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":73683,"byte_end":73749,"line_start":435,"line_end":435,"column_start":5,"column_end":71}},{"value":"/ Broadcast-WAV metadata record (a `bext` chunk).","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":73754,"byte_end":73805,"line_start":436,"line_end":436,"column_start":5,"column_end":56}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":73810,"byte_end":73814,"line_start":437,"line_end":437,"column_start":5,"column_end":9}},{"value":"/ ### Examples","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":73819,"byte_end":73835,"line_start":438,"line_end":438,"column_start":5,"column_end":21}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":73840,"byte_end":73844,"line_start":439,"line_end":439,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":73849,"byte_end":73856,"line_start":440,"line_end":440,"column_start":5,"column_end":12}},{"value":"/ # use bwavfile::WaveReader;","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":73861,"byte_end":73892,"line_start":441,"line_end":441,"column_start":5,"column_end":36}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":73897,"byte_end":73901,"line_start":442,"line_end":442,"column_start":5,"column_end":9}},{"value":"/ let mut w = WaveReader::open(\"tests/media/ff_bwav_stereo.wav\").unwrap();","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":73906,"byte_end":73982,"line_start":443,"line_end":443,"column_start":5,"column_end":81}},{"value":"/ w.validate_broadcast_wave().expect(\"BWAVE file did not validate BWAVE\");","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":73987,"byte_end":74063,"line_start":444,"line_end":444,"column_start":5,"column_end":81}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":74068,"byte_end":74072,"line_start":445,"line_end":445,"column_start":5,"column_end":9}},{"value":"/ let mut x = WaveReader::open(\"tests/media/pt_24bit.wav\").unwrap();","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":74077,"byte_end":74147,"line_start":446,"line_end":446,"column_start":5,"column_end":75}},{"value":"/ x.validate_broadcast_wave().expect(\"BWAVE file did not validate BWAVE\");","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":74152,"byte_end":74228,"line_start":447,"line_end":447,"column_start":5,"column_end":81}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":74233,"byte_end":74237,"line_start":448,"line_end":448,"column_start":5,"column_end":9}},{"value":"/ let mut y = WaveReader::open(\"tests/media/audacity_16bit.wav\").unwrap();","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":74242,"byte_end":74318,"line_start":449,"line_end":449,"column_start":5,"column_end":81}},{"value":"/ y.validate_broadcast_wave().expect_err(\"Plain WAV file DID validate BWAVE\");","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":74323,"byte_end":74403,"line_start":450,"line_end":450,"column_start":5,"column_end":85}},{"value":"/ ```","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":74408,"byte_end":74415,"line_start":451,"line_end":451,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":74420,"byte_end":74423,"line_start":452,"line_end":452,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":74824,"byte_end":74853,"line_start":464,"line_end":464,"column_start":12,"column_end":41},"name":"validate_data_chunk_alignment","qualname":"<WaveReader<R>>::validate_data_chunk_alignment","value":"pub fn validate_data_chunk_alignment(&mut Self) -> Result<(), ParserError>","parent":null,"children":[],"decl_id":null,"docs":"\n Verify data is aligned to a block boundary.","sig":null,"attributes":[{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":74628,"byte_end":74631,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ Verify data is aligned to a block boundary.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":74636,"byte_end":74683,"line_start":460,"line_end":460,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":74688,"byte_end":74691,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ Returns `Ok(())` if `validate_readable()` and the start of the ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":74696,"byte_end":74763,"line_start":462,"line_end":462,"column_start":5,"column_end":72}},{"value":"/ `data` chunk's content begins at 0x4000.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":74768,"byte_end":74812,"line_start":463,"line_end":463,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":75483,"byte_end":75511,"line_start":481,"line_end":481,"column_start":12,"column_end":40},"name":"validate_prepared_for_append","qualname":"<WaveReader<R>>::validate_prepared_for_append","value":"pub fn validate_prepared_for_append(&mut Self) -> Result<(), ParserError>","parent":null,"children":[],"decl_id":null,"docs":" Verify audio data can be appended immediately to this file.\n \n Returns `Ok(())` if:\n  - `validate_readable()`\n  - there is a `JUNK` or `FLLR` immediately at the beginning of the chunk \n    list adequately large enough to be overwritten by a `ds64` (92 bytes)\n  - `data` is the final chunk\n","sig":null,"attributes":[{"value":"/ Verify audio data can be appended immediately to this file.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":75137,"byte_end":75200,"line_start":474,"line_end":474,"column_start":5,"column_end":68}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":75205,"byte_end":75209,"line_start":475,"line_end":475,"column_start":5,"column_end":9}},{"value":"/ Returns `Ok(())` if:","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":75214,"byte_end":75238,"line_start":476,"line_end":476,"column_start":5,"column_end":29}},{"value":"/  - `validate_readable()`","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":75243,"byte_end":75271,"line_start":477,"line_end":477,"column_start":5,"column_end":33}},{"value":"/  - there is a `JUNK` or `FLLR` immediately at the beginning of the chunk ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":75276,"byte_end":75353,"line_start":478,"line_end":478,"column_start":5,"column_end":82}},{"value":"/    list adequately large enough to be overwritten by a `ds64` (92 bytes)","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":75358,"byte_end":75434,"line_start":479,"line_end":479,"column_start":5,"column_end":81}},{"value":"/  - `data` is the final chunk","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":75439,"byte_end":75471,"line_start":480,"line_end":480,"column_start":5,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":684},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":79676,"byte_end":79692,"line_start":19,"line_end":19,"column_start":12,"column_end":28},"name":"AudioFrameWriter","qualname":"::wavewriter::AudioFrameWriter","value":"AudioFrameWriter {  }","parent":null,"children":[{"krate":0,"index":686}],"decl_id":null,"docs":" Write audio frames to a `WaveWriter`.\n \n \n","sig":null,"attributes":[{"value":"/ Write audio frames to a `WaveWriter`.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":79613,"byte_end":79654,"line_start":16,"line_end":16,"column_start":1,"column_end":42}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":79655,"byte_end":79659,"line_start":17,"line_end":17,"column_start":1,"column_end":5}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":79660,"byte_end":79664,"line_start":18,"line_end":18,"column_start":1,"column_end":5}}]},{"kind":"Method","id":{"krate":0,"index":691},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":80464,"byte_end":80484,"line_start":42,"line_end":42,"column_start":12,"column_end":32},"name":"write_integer_frames","qualname":"<AudioFrameWriter<W>>::write_integer_frames","value":"pub fn write_integer_frames(&mut Self, &[i32]) -> Result<u64, Error>","parent":null,"children":[],"decl_id":null,"docs":" Write interleaved samples in `buffer`\n \n # Panics\n \n This function will panic if `buffer.len()` modulo the Wave file's channel count\n is not zero.\n","sig":null,"attributes":[{"value":"/ Write interleaved samples in `buffer`","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":80267,"byte_end":80308,"line_start":36,"line_end":36,"column_start":5,"column_end":46}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":80313,"byte_end":80317,"line_start":37,"line_end":37,"column_start":5,"column_end":9}},{"value":"/ # Panics","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":80322,"byte_end":80334,"line_start":38,"line_end":38,"column_start":5,"column_end":17}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":80339,"byte_end":80343,"line_start":39,"line_end":39,"column_start":5,"column_end":9}},{"value":"/ This function will panic if `buffer.len()` modulo the Wave file's channel count","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":80348,"byte_end":80431,"line_start":40,"line_end":40,"column_start":5,"column_end":88}},{"value":"/ is not zero.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":80436,"byte_end":80452,"line_start":41,"line_end":41,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":692},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":81042,"byte_end":81045,"line_start":56,"line_end":56,"column_start":12,"column_end":15},"name":"end","qualname":"<AudioFrameWriter<W>>::end","value":"pub fn end(Self) -> Result<WaveWriter<W>, Error>","parent":null,"children":[],"decl_id":null,"docs":" Finish writing audio frames and unwrap the inner `WaveWriter`.\n \n This method must be called when the client has finished writing audio\n data. This will finalize the audio data chunk.\n","sig":null,"attributes":[{"value":"/ Finish writing audio frames and unwrap the inner `WaveWriter`.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":80822,"byte_end":80888,"line_start":52,"line_end":52,"column_start":5,"column_end":71}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":80893,"byte_end":80897,"line_start":53,"line_end":53,"column_start":5,"column_end":9}},{"value":"/ This method must be called when the client has finished writing audio","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":80902,"byte_end":80975,"line_start":54,"line_end":54,"column_start":5,"column_end":78}},{"value":"/ data. This will finalize the audio data chunk.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":80980,"byte_end":81030,"line_start":55,"line_end":55,"column_start":5,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":708},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":86956,"byte_end":86966,"line_start":199,"line_end":199,"column_start":12,"column_end":22},"name":"WaveWriter","qualname":"::wavewriter::WaveWriter","value":"WaveWriter { is_rf64, format }","parent":null,"children":[{"krate":0,"index":710},{"krate":0,"index":711},{"krate":0,"index":712},{"krate":0,"index":713}],"decl_id":null,"docs":" Wave, Broadcast-WAV and RF64/BW64 writer.\n \n A `WaveWriter` creates a new wave file at the given path (with `create()`)\n or into the given `Write`- and `Seek`-able inner writer.\n \n Audio is added to the wave file by starting the audio data chunk with\n `WaveWriter::audio_frame_writer()`. All of the functions that add chunks\n move the WaveWriter and return it to the host when complete.\n \n # Structure of New Wave Files\n \n `WaveWriter` will create a Wave file with two chunks automatically: a 96\n byte `JUNK` chunk and a standard `fmt ` chunk, which has the extended \n length if the format your provided requires it. The first `JUNK` chunk is \n a reservation for a `ds64` record which will be written over it if\n the file needs to be upgraded to RF64 format.\n \n Chunks are added to the file in the order the client adds them. \n `audio_file_writer()` will add a `data` chunk for the audio data, and will\n also add an `elm1` filler chunk prior to the data chunk to ensure that the \n first byte of the data chunk's content is aligned with 0x4000.\n \n ```\n use bwavfile::{WaveWriter,WaveFmt};\n # use std::io::Cursor;\n \n // Write a three-sample wave file to a cursor\n let mut cursor = Cursor::new(vec![0u8;0]);\n let format = WaveFmt::new_pcm_mono(48000, 24);\n let w = WaveWriter::new(&mut cursor, format).unwrap();","sig":null,"attributes":[{"value":"/ Wave, Broadcast-WAV and RF64/BW64 writer.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":83774,"byte_end":83819,"line_start":136,"line_end":136,"column_start":1,"column_end":46}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":83820,"byte_end":83824,"line_start":137,"line_end":137,"column_start":1,"column_end":5}},{"value":"/ A `WaveWriter` creates a new wave file at the given path (with `create()`)","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":83825,"byte_end":83903,"line_start":138,"line_end":138,"column_start":1,"column_end":79}},{"value":"/ or into the given `Write`- and `Seek`-able inner writer.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":83904,"byte_end":83964,"line_start":139,"line_end":139,"column_start":1,"column_end":61}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":83965,"byte_end":83969,"line_start":140,"line_end":140,"column_start":1,"column_end":5}},{"value":"/ Audio is added to the wave file by starting the audio data chunk with","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":83970,"byte_end":84043,"line_start":141,"line_end":141,"column_start":1,"column_end":74}},{"value":"/ `WaveWriter::audio_frame_writer()`. All of the functions that add chunks","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":84044,"byte_end":84120,"line_start":142,"line_end":142,"column_start":1,"column_end":77}},{"value":"/ move the WaveWriter and return it to the host when complete.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":84121,"byte_end":84185,"line_start":143,"line_end":143,"column_start":1,"column_end":65}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":84186,"byte_end":84190,"line_start":144,"line_end":144,"column_start":1,"column_end":5}},{"value":"/ # Structure of New Wave Files","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":84191,"byte_end":84224,"line_start":145,"line_end":145,"column_start":1,"column_end":34}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":84225,"byte_end":84229,"line_start":146,"line_end":146,"column_start":1,"column_end":5}},{"value":"/ `WaveWriter` will create a Wave file with two chunks automatically: a 96","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":84230,"byte_end":84306,"line_start":147,"line_end":147,"column_start":1,"column_end":77}},{"value":"/ byte `JUNK` chunk and a standard `fmt ` chunk, which has the extended ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":84307,"byte_end":84381,"line_start":148,"line_end":148,"column_start":1,"column_end":75}},{"value":"/ length if the format your provided requires it. The first `JUNK` chunk is ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":84382,"byte_end":84460,"line_start":149,"line_end":149,"column_start":1,"column_end":79}},{"value":"/ a reservation for a `ds64` record which will be written over it if","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":84461,"byte_end":84531,"line_start":150,"line_end":150,"column_start":1,"column_end":71}},{"value":"/ the file needs to be upgraded to RF64 format.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":84532,"byte_end":84581,"line_start":151,"line_end":151,"column_start":1,"column_end":50}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":84582,"byte_end":84586,"line_start":152,"line_end":152,"column_start":1,"column_end":5}},{"value":"/ Chunks are added to the file in the order the client adds them. ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":84587,"byte_end":84655,"line_start":153,"line_end":153,"column_start":1,"column_end":69}},{"value":"/ `audio_file_writer()` will add a `data` chunk for the audio data, and will","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":84656,"byte_end":84734,"line_start":154,"line_end":154,"column_start":1,"column_end":79}},{"value":"/ also add an `elm1` filler chunk prior to the data chunk to ensure that the ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":84735,"byte_end":84814,"line_start":155,"line_end":155,"column_start":1,"column_end":80}},{"value":"/ first byte of the data chunk's content is aligned with 0x4000.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":84815,"byte_end":84881,"line_start":156,"line_end":156,"column_start":1,"column_end":67}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":84882,"byte_end":84886,"line_start":157,"line_end":157,"column_start":1,"column_end":5}},{"value":"/ ```","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":84887,"byte_end":84894,"line_start":158,"line_end":158,"column_start":1,"column_end":8}},{"value":"/ use bwavfile::{WaveWriter,WaveFmt};","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":84895,"byte_end":84934,"line_start":159,"line_end":159,"column_start":1,"column_end":40}},{"value":"/ # use std::io::Cursor;","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":84935,"byte_end":84961,"line_start":160,"line_end":160,"column_start":1,"column_end":27}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":84962,"byte_end":84966,"line_start":161,"line_end":161,"column_start":1,"column_end":5}},{"value":"/ // Write a three-sample wave file to a cursor","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":84967,"byte_end":85016,"line_start":162,"line_end":162,"column_start":1,"column_end":50}},{"value":"/ let mut cursor = Cursor::new(vec![0u8;0]);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":85017,"byte_end":85063,"line_start":163,"line_end":163,"column_start":1,"column_end":47}},{"value":"/ let format = WaveFmt::new_pcm_mono(48000, 24);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":85064,"byte_end":85114,"line_start":164,"line_end":164,"column_start":1,"column_end":51}},{"value":"/ let w = WaveWriter::new(&mut cursor, format).unwrap();","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":85115,"byte_end":85173,"line_start":165,"line_end":165,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":85174,"byte_end":85177,"line_start":166,"line_end":166,"column_start":1,"column_end":4}},{"value":"/ let mut frame_writer = w.audio_frame_writer().unwrap();","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":85178,"byte_end":85237,"line_start":167,"line_end":167,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":85238,"byte_end":85241,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ frame_writer.write_integer_frames(&[0i32]).unwrap();","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":85242,"byte_end":85298,"line_start":169,"line_end":169,"column_start":1,"column_end":57}},{"value":"/ frame_writer.write_integer_frames(&[0i32]).unwrap();","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":85299,"byte_end":85355,"line_start":170,"line_end":170,"column_start":1,"column_end":57}},{"value":"/ frame_writer.write_integer_frames(&[0i32]).unwrap();","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":85356,"byte_end":85412,"line_start":171,"line_end":171,"column_start":1,"column_end":57}},{"value":"/ frame_writer.end().unwrap();","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":85413,"byte_end":85445,"line_start":172,"line_end":172,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":85446,"byte_end":85453,"line_start":173,"line_end":173,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":85454,"byte_end":85457,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ ## Resources","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":85458,"byte_end":85474,"line_start":175,"line_end":175,"column_start":1,"column_end":17}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":85475,"byte_end":85479,"line_start":176,"line_end":176,"column_start":1,"column_end":5}},{"value":"/ ### Implementation of Wave Files","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":85480,"byte_end":85516,"line_start":177,"line_end":177,"column_start":1,"column_end":37}},{"value":"/ - [Peter Kabal, McGill University](http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/WAVE/WAVE.html)","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":85517,"byte_end":85624,"line_start":178,"line_end":178,"column_start":1,"column_end":108}},{"value":"/ - [Multimedia Programming Interface and Data Specifications 1.0](http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/WAVE/Docs/riffmci.pdf) ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":85625,"byte_end":85770,"line_start":179,"line_end":179,"column_start":1,"column_end":146}},{"value":"/   (August 1991), IBM Corporation and Microsoft Corporation","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":85771,"byte_end":85833,"line_start":180,"line_end":180,"column_start":1,"column_end":63}},{"value":"/  ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":85834,"byte_end":85839,"line_start":181,"line_end":181,"column_start":1,"column_end":6}},{"value":"/ ### Implementation of Broadcast Wave Files","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":85840,"byte_end":85886,"line_start":182,"line_end":182,"column_start":1,"column_end":47}},{"value":"/ - [EBU Tech 3285][ebu3285] (May 2011), \"Specification of the Broadcast Wave Format (BWF)\"","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":85887,"byte_end":85980,"line_start":183,"line_end":183,"column_start":1,"column_end":94}},{"value":"/   - [Supplement 1](https://tech.ebu.ch/docs/tech/tech3285s1.pdf) (July 1997): MPEG Audio","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":85981,"byte_end":86073,"line_start":184,"line_end":184,"column_start":1,"column_end":93}},{"value":"/   - [EBU Rec 68](https://tech.ebu.ch/docs/r/r068.pdf): Signal modulation and format constraints","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":86074,"byte_end":86173,"line_start":185,"line_end":185,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":86174,"byte_end":86177,"line_start":186,"line_end":186,"column_start":1,"column_end":4}},{"value":"/ ### Implementation of 64-bit Wave Files","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":86178,"byte_end":86221,"line_start":187,"line_end":187,"column_start":1,"column_end":44}},{"value":"/ - [ITU-R 2088][itu2088] (October 2019), \"Long-form file format for the international exchange of audio programme materials with metadata\"","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":86222,"byte_end":86363,"line_start":188,"line_end":188,"column_start":1,"column_end":142}},{"value":"/   - Presently in force, adopted by the EBU in [EBU Tech 3306v2][ebu3306v2] (June 2018).","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":86364,"byte_end":86455,"line_start":189,"line_end":189,"column_start":1,"column_end":92}},{"value":"/ - [EBU Tech 3306v1][ebu3306v1] (July 2009), \"MBWF / RF64: An extended File Format for Audio\"","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":86456,"byte_end":86552,"line_start":190,"line_end":190,"column_start":1,"column_end":97}},{"value":"/   - No longer in force, however long-established.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":86553,"byte_end":86606,"line_start":191,"line_end":191,"column_start":1,"column_end":54}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":86607,"byte_end":86611,"line_start":192,"line_end":192,"column_start":1,"column_end":5}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":86612,"byte_end":86615,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ [ebu3285]: https://tech.ebu.ch/docs/tech/tech3285.pdf","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":86616,"byte_end":86673,"line_start":194,"line_end":194,"column_start":1,"column_end":58}},{"value":"/ [ebu3306v1]: https://tech.ebu.ch/docs/tech/tech3306v1_1.pdf","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":86674,"byte_end":86737,"line_start":195,"line_end":195,"column_start":1,"column_end":64}},{"value":"/ [ebu3306v2]: https://tech.ebu.ch/docs/tech/tech3306.pdf","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":86738,"byte_end":86797,"line_start":196,"line_end":196,"column_start":1,"column_end":60}},{"value":"/ [itu2088]: https://www.itu.int/dms_pubrec/itu-r/rec/bs/R-REC-BS.2088-1-201910-I!!PDF-E.pdf","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":86798,"byte_end":86892,"line_start":197,"line_end":197,"column_start":1,"column_end":95}},{"value":"/ [rfc3261]: https://tools.ietf.org/html/rfc2361 ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":86893,"byte_end":86944,"line_start":198,"line_end":198,"column_start":1,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":712},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":87069,"byte_end":87076,"line_start":204,"line_end":204,"column_start":9,"column_end":16},"name":"is_rf64","qualname":"::wavewriter::WaveWriter::is_rf64","value":"bool","parent":{"krate":0,"index":708},"children":[],"decl_id":null,"docs":" True if file is RF64\n","sig":null,"attributes":[{"value":"/ True if file is RF64","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":87036,"byte_end":87060,"line_start":203,"line_end":203,"column_start":5,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":713},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":87126,"byte_end":87132,"line_start":207,"line_end":207,"column_start":9,"column_end":15},"name":"format","qualname":"::wavewriter::WaveWriter::format","value":"fmt::WaveFmt","parent":{"krate":0,"index":708},"children":[],"decl_id":null,"docs":" Format of the wave file.\n","sig":null,"attributes":[{"value":"/ Format of the wave file.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":87089,"byte_end":87117,"line_start":206,"line_end":206,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":716},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":87277,"byte_end":87283,"line_start":215,"line_end":215,"column_start":12,"column_end":18},"name":"create","qualname":"<WaveWriter<BufWriter<File>>>::create","value":"pub fn create(&str, WaveFmt) -> Result<Self, Error>","parent":null,"children":[],"decl_id":null,"docs":" Create a new Wave file at `path`.\n","sig":null,"attributes":[{"value":"/ Create a new Wave file at `path`.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":87228,"byte_end":87265,"line_start":214,"line_end":214,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":718},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":87552,"byte_end":87569,"line_start":224,"line_end":224,"column_start":12,"column_end":29},"name":"create_unbuffered","qualname":"<WaveWriter<File>>::create_unbuffered","value":"pub fn create_unbuffered(&str, WaveFmt) -> Result<Self, Error>","parent":null,"children":[],"decl_id":null,"docs":" Creare a new Wave file with unbuffered IO at `path`\n","sig":null,"attributes":[{"value":"/ Creare a new Wave file with unbuffered IO at `path`","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":87485,"byte_end":87540,"line_start":223,"line_end":223,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":721},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":87996,"byte_end":87999,"line_start":237,"line_end":237,"column_start":12,"column_end":15},"name":"new","qualname":"<WaveWriter<W>>::new","value":"pub fn new(W, WaveFmt) -> Result<Self, Error>","parent":null,"children":[],"decl_id":null,"docs":" Wrap a writer in a Wave writer.\n \n The inner writer will immediately have a RIFF WAVE file header \n written to it along with the format descriptor (and possibly a `fact`\n chunk if appropriate).\n","sig":null,"attributes":[{"value":"/ Wrap a writer in a Wave writer.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":87759,"byte_end":87794,"line_start":232,"line_end":232,"column_start":5,"column_end":40}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":87799,"byte_end":87803,"line_start":233,"line_end":233,"column_start":5,"column_end":9}},{"value":"/ The inner writer will immediately have a RIFF WAVE file header ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":87808,"byte_end":87875,"line_start":234,"line_end":234,"column_start":5,"column_end":72}},{"value":"/ written to it along with the format descriptor (and possibly a `fact`","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":87880,"byte_end":87953,"line_start":235,"line_end":235,"column_start":5,"column_end":78}},{"value":"/ chunk if appropriate).","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":87958,"byte_end":87984,"line_start":236,"line_end":236,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":723},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":89394,"byte_end":89418,"line_start":276,"line_end":276,"column_start":12,"column_end":36},"name":"write_broadcast_metadata","qualname":"<WaveWriter<W>>::write_broadcast_metadata","value":"pub fn write_broadcast_metadata(&mut Self, &Bext) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Write Broadcast-Wave metadata to the file.\n \n This function will write the metadata chunk immediately to the end of \n the file; if you have already written and closed the audio data the \n bext chunk will be positioned after it.\n","sig":null,"attributes":[{"value":"/ Write Broadcast-Wave metadata to the file.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":89123,"byte_end":89169,"line_start":271,"line_end":271,"column_start":5,"column_end":51}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":89174,"byte_end":89178,"line_start":272,"line_end":272,"column_start":5,"column_end":9}},{"value":"/ This function will write the metadata chunk immediately to the end of ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":89183,"byte_end":89257,"line_start":273,"line_end":273,"column_start":5,"column_end":79}},{"value":"/ the file; if you have already written and closed the audio data the ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":89262,"byte_end":89334,"line_start":274,"line_end":274,"column_start":5,"column_end":77}},{"value":"/ bext chunk will be positioned after it.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":89339,"byte_end":89382,"line_start":275,"line_end":275,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":724},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":89718,"byte_end":89728,"line_start":286,"line_end":286,"column_start":12,"column_end":22},"name":"write_ixml","qualname":"<WaveWriter<W>>::write_ixml","value":"pub fn write_ixml(&mut Self, &[u8]) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Write iXML metadata\n","sig":null,"attributes":[{"value":"/ Write iXML metadata","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":89683,"byte_end":89706,"line_start":285,"line_end":285,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":725},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":89904,"byte_end":89914,"line_start":292,"line_end":292,"column_start":12,"column_end":22},"name":"write_axml","qualname":"<WaveWriter<W>>::write_axml","value":"pub fn write_axml(&mut Self, &[u8]) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Write axml/ADM metadata\n","sig":null,"attributes":[{"value":"/ Write axml/ADM metadata","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":89865,"byte_end":89892,"line_start":291,"line_end":291,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":726},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":90095,"byte_end":90105,"line_start":298,"line_end":298,"column_start":12,"column_end":22},"name":"write_junk","qualname":"<WaveWriter<W>>::write_junk","value":"pub fn write_junk(&mut Self, u32) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Write a `JUNK` filler chunk\n","sig":null,"attributes":[{"value":"/ Write a `JUNK` filler chunk","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":90052,"byte_end":90083,"line_start":297,"line_end":297,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":727},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":90372,"byte_end":90390,"line_start":306,"line_end":306,"column_start":12,"column_end":30},"name":"audio_frame_writer","qualname":"<WaveWriter<W>>::audio_frame_writer","value":"pub fn audio_frame_writer(Self) -> Result<AudioFrameWriter<W>, Error>","parent":null,"children":[],"decl_id":null,"docs":" Create an audio frame writer, which takes possession of the callee \n `WaveWriter`.\n  \n","sig":null,"attributes":[{"value":"/ Create an audio frame writer, which takes possession of the callee ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":90257,"byte_end":90328,"line_start":303,"line_end":303,"column_start":5,"column_end":76}},{"value":"/ `WaveWriter`.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":90333,"byte_end":90350,"line_start":304,"line_end":304,"column_start":5,"column_end":22}},{"value":"/  ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":90355,"byte_end":90360,"line_start":305,"line_end":305,"column_start":5,"column_end":10}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fourcc.rs","byte_start":1891,"byte_end":1897,"line_start":11,"line_end":11,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":14}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fourcc.rs","byte_start":1996,"byte_end":2002,"line_start":17,"line_end":17,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":18}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fourcc.rs","byte_start":2158,"byte_end":2164,"line_start":23,"line_end":23,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":22}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fourcc.rs","byte_start":2659,"byte_end":2665,"line_start":49,"line_end":49,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":34}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fourcc.rs","byte_start":2816,"byte_end":2822,"line_start":56,"line_end":56,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":37}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fourcc.rs","byte_start":2965,"byte_end":2971,"line_start":63,"line_end":63,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":40}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fourcc.rs","byte_start":3383,"byte_end":3384,"line_start":78,"line_end":78,"column_start":24,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":47}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fourcc.rs","byte_start":3609,"byte_end":3610,"line_start":86,"line_end":86,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":52}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/errors.rs","byte_start":6192,"byte_end":6197,"line_start":47,"line_end":47,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":84}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/errors.rs","byte_start":6308,"byte_end":6313,"line_start":53,"line_end":53,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/common_format.rs","byte_start":8422,"byte_end":8434,"line_start":66,"line_end":66,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":103},{"krate":0,"index":104}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/parser.rs","byte_start":11298,"byte_end":11304,"line_start":55,"line_end":55,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":173}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/parser.rs","byte_start":12654,"byte_end":12660,"line_start":102,"line_end":102,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":177},{"krate":0,"index":178}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/parser.rs","byte_start":12867,"byte_end":12873,"line_start":112,"line_end":112,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/chunks.rs","byte_start":20655,"byte_end":20656,"line_start":28,"line_end":28,"column_start":30,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/chunks.rs","byte_start":23431,"byte_end":23432,"line_start":94,"line_end":94,"column_start":29,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":280},{"krate":0,"index":283},{"krate":0,"index":285}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/cue.rs","byte_start":28735,"byte_end":28741,"line_start":23,"line_end":23,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":354},{"krate":0,"index":355}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/cue.rs","byte_start":30180,"byte_end":30188,"line_start":67,"line_end":67,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":357},{"krate":0,"index":358}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/cue.rs","byte_start":30919,"byte_end":30926,"line_start":97,"line_end":97,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":360},{"krate":0,"index":361}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/cue.rs","byte_start":31784,"byte_end":31791,"line_start":133,"line_end":133,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":363},{"krate":0,"index":364}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/cue.rs","byte_start":33460,"byte_end":33473,"line_start":183,"line_end":183,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":366},{"krate":0,"index":367}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/cue.rs","byte_start":35545,"byte_end":35548,"line_start":232,"line_end":232,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":373},{"krate":0,"index":375},{"krate":0,"index":377}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/cue.rs","byte_start":37472,"byte_end":37475,"line_start":297,"line_end":297,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":388},{"krate":0,"index":397}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":45680,"byte_end":45691,"line_start":72,"line_end":72,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":442}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":46535,"byte_end":46546,"line_start":99,"line_end":99,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":444}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":50024,"byte_end":50031,"line_start":207,"line_end":207,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":453},{"krate":0,"index":455},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":460}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":58531,"byte_end":58547,"line_start":38,"line_end":38,"column_start":22,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":566},{"krate":0,"index":567},{"krate":0,"index":568},{"krate":0,"index":569}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":64343,"byte_end":64353,"line_start":176,"line_end":176,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":571}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":64553,"byte_end":64563,"line_start":185,"line_end":185,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":573}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":64888,"byte_end":64898,"line_start":197,"line_end":197,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":576},{"krate":0,"index":577},{"krate":0,"index":578},{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":581},{"krate":0,"index":582},{"krate":0,"index":584},{"krate":0,"index":585},{"krate":0,"index":586},{"krate":0,"index":587},{"krate":0,"index":588},{"krate":0,"index":590},{"krate":0,"index":591},{"krate":0,"index":592}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":76472,"byte_end":76482,"line_start":507,"line_end":507,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":598},{"krate":0,"index":599},{"krate":0,"index":601},{"krate":0,"index":604},{"krate":0,"index":605}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":79762,"byte_end":79778,"line_start":23,"line_end":23,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":689},{"krate":0,"index":690},{"krate":0,"index":691},{"krate":0,"index":692}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":81527,"byte_end":81542,"line_start":76,"line_end":76,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":701},{"krate":0,"index":702},{"krate":0,"index":703}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":83308,"byte_end":83323,"line_start":120,"line_end":120,"column_start":19,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":706},{"krate":0,"index":707}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":87193,"byte_end":87203,"line_start":212,"line_end":212,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":716}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":87462,"byte_end":87472,"line_start":222,"line_end":222,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":718}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":87716,"byte_end":87726,"line_start":230,"line_end":230,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":721},{"krate":0,"index":722},{"krate":0,"index":723},{"krate":0,"index":724},{"krate":0,"index":725},{"krate":0,"index":726},{"krate":0,"index":727},{"krate":0,"index":728},{"krate":0,"index":729},{"krate":0,"index":730}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fourcc.rs","byte_start":1891,"byte_end":1897,"line_start":11,"line_end":11,"column_start":6,"column_end":12},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":773},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fourcc.rs","byte_start":1996,"byte_end":2002,"line_start":17,"line_end":17,"column_start":26,"column_end":32},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":773},"to":{"krate":2,"index":2728}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fourcc.rs","byte_start":2158,"byte_end":2164,"line_start":23,"line_end":23,"column_start":24,"column_end":30},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":773},"to":{"krate":2,"index":2728}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fourcc.rs","byte_start":2659,"byte_end":2665,"line_start":49,"line_end":49,"column_start":24,"column_end":30},"kind":{"Impl":{"id":3}},"from":{"krate":5,"index":7216},"to":{"krate":2,"index":2728}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fourcc.rs","byte_start":2816,"byte_end":2822,"line_start":56,"line_end":56,"column_start":23,"column_end":29},"kind":{"Impl":{"id":4}},"from":{"krate":5,"index":7216},"to":{"krate":2,"index":2728}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fourcc.rs","byte_start":2965,"byte_end":2971,"line_start":63,"line_end":63,"column_start":16,"column_end":22},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":773},"to":{"krate":2,"index":8701}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fourcc.rs","byte_start":3179,"byte_end":3183,"line_start":70,"line_end":70,"column_start":27,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":4246},"to":{"krate":0,"index":41}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fourcc.rs","byte_start":3276,"byte_end":3281,"line_start":74,"line_end":74,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":4307},"to":{"krate":0,"index":43}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fourcc.rs","byte_start":3383,"byte_end":3384,"line_start":78,"line_end":78,"column_start":24,"column_end":25},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":46},"to":{"krate":0,"index":41}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fourcc.rs","byte_start":3609,"byte_end":3610,"line_start":86,"line_end":86,"column_start":25,"column_end":26},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":51},"to":{"krate":0,"index":43}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/errors.rs","byte_start":6192,"byte_end":6197,"line_start":47,"line_end":47,"column_start":26,"column_end":31},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":792},"to":{"krate":2,"index":2728}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/errors.rs","byte_start":6308,"byte_end":6313,"line_start":53,"line_end":53,"column_start":29,"column_end":34},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":792},"to":{"krate":2,"index":2728}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/common_format.rs","byte_start":8422,"byte_end":8434,"line_start":66,"line_end":66,"column_start":6,"column_end":18},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":818},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/parser.rs","byte_start":11298,"byte_end":11304,"line_start":55,"line_end":55,"column_start":22,"column_end":28},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":162},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/parser.rs","byte_start":12654,"byte_end":12660,"line_start":102,"line_end":102,"column_start":35,"column_end":41},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":162},"to":{"krate":2,"index":7161}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/parser.rs","byte_start":12867,"byte_end":12873,"line_start":112,"line_end":112,"column_start":22,"column_end":28},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":162},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/chunks.rs","byte_start":20117,"byte_end":20121,"line_start":16,"line_end":16,"column_start":28,"column_end":32},"kind":"SuperTrait","from":{"krate":1,"index":4246},"to":{"krate":0,"index":263}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/chunks.rs","byte_start":20365,"byte_end":20370,"line_start":22,"line_end":22,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":4307},"to":{"krate":0,"index":267}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/chunks.rs","byte_start":20655,"byte_end":20656,"line_start":28,"line_end":28,"column_start":30,"column_end":31},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":272},"to":{"krate":0,"index":267}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/chunks.rs","byte_start":23431,"byte_end":23432,"line_start":94,"line_end":94,"column_start":29,"column_end":30},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":279},"to":{"krate":0,"index":263}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/cue.rs","byte_start":28735,"byte_end":28741,"line_start":23,"line_end":23,"column_start":6,"column_end":12},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":894},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/cue.rs","byte_start":30180,"byte_end":30188,"line_start":67,"line_end":67,"column_start":6,"column_end":14},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":906},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/cue.rs","byte_start":30919,"byte_end":30926,"line_start":97,"line_end":97,"column_start":6,"column_end":13},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":913},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/cue.rs","byte_start":31784,"byte_end":31791,"line_start":133,"line_end":133,"column_start":6,"column_end":13},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":920},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/cue.rs","byte_start":33460,"byte_end":33473,"line_start":183,"line_end":183,"column_start":6,"column_end":19},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":933},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/cue.rs","byte_start":35545,"byte_end":35548,"line_start":232,"line_end":232,"column_start":27,"column_end":30},"kind":{"Impl":{"id":21}},"from":{"krate":5,"index":6703},"to":{"krate":0,"index":368}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/cue.rs","byte_start":37472,"byte_end":37475,"line_start":297,"line_end":297,"column_start":6,"column_end":9},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":379},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":45680,"byte_end":45691,"line_start":72,"line_end":72,"column_start":20,"column_end":31},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":968},"to":{"krate":2,"index":2728}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":46535,"byte_end":46546,"line_start":99,"line_end":99,"column_start":6,"column_end":17},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":968},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/fmt.rs","byte_start":50024,"byte_end":50031,"line_start":207,"line_end":207,"column_start":6,"column_end":13},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1043},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":58531,"byte_end":58547,"line_start":38,"line_end":38,"column_start":22,"column_end":38},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1056},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":64343,"byte_end":64353,"line_start":176,"line_end":176,"column_start":6,"column_end":16},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1065},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":64553,"byte_end":64563,"line_start":185,"line_end":185,"column_start":6,"column_end":16},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1065},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":64888,"byte_end":64898,"line_start":197,"line_end":197,"column_start":22,"column_end":32},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1065},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavereader.rs","byte_start":76472,"byte_end":76482,"line_start":507,"line_end":507,"column_start":19,"column_end":29},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1065},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":79762,"byte_end":79778,"line_start":23,"line_end":23,"column_start":9,"column_end":25},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":684},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":81527,"byte_end":81542,"line_start":76,"line_end":76,"column_start":9,"column_end":24},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":693},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":83308,"byte_end":83323,"line_start":120,"line_end":120,"column_start":19,"column_end":34},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":693},"to":{"krate":1,"index":4307}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":87193,"byte_end":87203,"line_start":212,"line_end":212,"column_start":6,"column_end":16},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":708},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":87462,"byte_end":87472,"line_start":222,"line_end":222,"column_start":6,"column_end":16},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":708},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/bwavfile-0.9.3/src/wavewriter.rs","byte_start":87716,"byte_end":87726,"line_start":230,"line_end":230,"column_start":9,"column_end":19},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":708},"to":{"krate":4294967295,"index":4294967295}}]}