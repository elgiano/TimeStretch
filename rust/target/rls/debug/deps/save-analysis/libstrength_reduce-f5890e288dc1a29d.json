{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3","program":"/Users/spluta1/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","strength_reduce","/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=f5890e288dc1a29d","-C","extra-filename=-f5890e288dc1a29d","--out-dir","/Users/spluta1/Documents/rust/time_stretch/target/rls/debug/deps","-L","dependency=/Users/spluta1/Documents/rust/time_stretch/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/spluta1/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/spluta1/Documents/rust/time_stretch/target/rls/debug/deps/libstrength_reduce-f5890e288dc1a29d.rmeta"},"prelude":{"crate_id":{"name":"strength_reduce","disambiguator":[13438270270157312807,3404482292596758658]},"crate_root":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src","external_crates":[{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[11698766721189094488,12060600386163665861]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[7682173449702177568,11032960836976215208]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[4743338922599007115,7423637119316760057]}}],"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":0,"byte_end":19956,"line_start":1,"line_end":519,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":0,"byte_end":19956,"line_start":1,"line_end":519,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":40},{"krate":0,"index":69},{"krate":0,"index":75},{"krate":0,"index":74},{"krate":0,"index":72},{"krate":0,"index":46},{"krate":0,"index":50},{"krate":0,"index":53},{"krate":0,"index":77},{"krate":0,"index":84},{"krate":0,"index":83},{"krate":0,"index":81},{"krate":0,"index":59},{"krate":0,"index":63},{"krate":0,"index":66},{"krate":0,"index":96},{"krate":0,"index":102},{"krate":0,"index":101},{"krate":0,"index":99},{"krate":0,"index":86},{"krate":0,"index":90},{"krate":0,"index":93},{"krate":0,"index":114},{"krate":0,"index":120},{"krate":0,"index":119},{"krate":0,"index":117},{"krate":0,"index":104},{"krate":0,"index":108},{"krate":0,"index":111},{"krate":0,"index":132},{"krate":0,"index":138},{"krate":0,"index":137},{"krate":0,"index":135},{"krate":0,"index":122},{"krate":0,"index":126},{"krate":0,"index":129},{"krate":0,"index":150},{"krate":0,"index":156},{"krate":0,"index":155},{"krate":0,"index":153},{"krate":0,"index":140},{"krate":0,"index":144},{"krate":0,"index":147}],"decl_id":null,"docs":" `strength_reduce` implements integer division and modulo via \"arithmetic strength reduction\"","sig":null,"attributes":[{"value":"/ `strength_reduce` implements integer division and modulo via \"arithmetic strength reduction\"","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":0,"byte_end":96,"line_start":1,"line_end":1,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":97,"byte_end":100,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Modern processors can do multiplication and shifts much faster than division, and \"arithmetic strength reduction\" is an algorithm to transform divisions into multiplications and shifts.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":101,"byte_end":290,"line_start":3,"line_end":3,"column_start":1,"column_end":190}},{"value":"/ Compilers already perform this optimization for divisors that are known at compile time; this library enables this optimization for divisors that are only known at runtime.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":291,"byte_end":467,"line_start":4,"line_end":4,"column_start":1,"column_end":177}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":468,"byte_end":471,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ Benchmarking shows a 5-10x speedup or integer division and modulo operations.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":472,"byte_end":553,"line_start":6,"line_end":6,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":554,"byte_end":557,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ # Example:","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":558,"byte_end":572,"line_start":8,"line_end":8,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":573,"byte_end":580,"line_start":9,"line_end":9,"column_start":1,"column_end":8}},{"value":"/ use strength_reduce::StrengthReducedU64;","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":581,"byte_end":625,"line_start":10,"line_end":10,"column_start":1,"column_end":45}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":626,"byte_end":630,"line_start":11,"line_end":11,"column_start":1,"column_end":5}},{"value":"/ let mut my_array: Vec<u64> = (0..500).collect();","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":631,"byte_end":683,"line_start":12,"line_end":12,"column_start":1,"column_end":53}},{"value":"/ let divisor = 3;","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":684,"byte_end":704,"line_start":13,"line_end":13,"column_start":1,"column_end":21}},{"value":"/ let modulo = 14;","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":705,"byte_end":725,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":726,"byte_end":729,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ // slow naive division and modulo","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":730,"byte_end":767,"line_start":16,"line_end":16,"column_start":1,"column_end":38}},{"value":"/ for element in &mut my_array {","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":768,"byte_end":802,"line_start":17,"line_end":17,"column_start":1,"column_end":35}},{"value":"/     *element = (*element / divisor) % modulo;","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":803,"byte_end":852,"line_start":18,"line_end":18,"column_start":1,"column_end":50}},{"value":"/ }","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":853,"byte_end":858,"line_start":19,"line_end":19,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":859,"byte_end":862,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ // fast strength-reduced division and modulo","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":863,"byte_end":911,"line_start":21,"line_end":21,"column_start":1,"column_end":49}},{"value":"/ let reduced_divisor = StrengthReducedU64::new(divisor);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":912,"byte_end":971,"line_start":22,"line_end":22,"column_start":1,"column_end":60}},{"value":"/ let reduced_modulo = StrengthReducedU64::new(modulo);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":972,"byte_end":1029,"line_start":23,"line_end":23,"column_start":1,"column_end":58}},{"value":"/ for element in &mut my_array {","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":1030,"byte_end":1064,"line_start":24,"line_end":24,"column_start":1,"column_end":35}},{"value":"/     *element = (*element / reduced_divisor) % reduced_modulo;","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":1065,"byte_end":1130,"line_start":25,"line_end":25,"column_start":1,"column_end":66}},{"value":"/ }","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":1131,"byte_end":1136,"line_start":26,"line_end":26,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":1137,"byte_end":1144,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":1145,"byte_end":1148,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ This library is intended for hot loops like the example above, where a division is repeated many times in a loop with the divisor remaining unchanged. ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":1149,"byte_end":1304,"line_start":29,"line_end":29,"column_start":1,"column_end":156}},{"value":"/ There is a setup cost associated with creating stength-reduced division instances, so using strength-reduced division for 1-2 divisions is not worth the setup cost.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":1305,"byte_end":1473,"line_start":30,"line_end":30,"column_start":1,"column_end":169}},{"value":"/ The break-even point differs by use-case, but is typically low: Benchmarking has shown that takes 3 to 4 repeated divisions with the same StengthReduced## instance to be worth it.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":1474,"byte_end":1657,"line_start":31,"line_end":31,"column_start":1,"column_end":184}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":1658,"byte_end":1662,"line_start":32,"line_end":32,"column_start":1,"column_end":5}},{"value":"/ `strength_reduce` is `#![no_std]`","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":1663,"byte_end":1700,"line_start":33,"line_end":33,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":1701,"byte_end":1704,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ The optimizations that this library provides are inherently dependent on architecture, compiler, and platform,","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":1705,"byte_end":1819,"line_start":35,"line_end":35,"column_start":1,"column_end":115}},{"value":"/ so test before you use. ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":1820,"byte_end":1848,"line_start":36,"line_end":36,"column_start":1,"column_end":29}},{"value":"no_std","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":1849,"byte_end":1859,"line_start":37,"line_end":37,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":69},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":2308,"byte_end":2325,"line_start":54,"line_end":54,"column_start":12,"column_end":29},"name":"StrengthReducedU8","qualname":"::StrengthReducedU8","value":"StrengthReducedU8 {  }","parent":null,"children":[{"krate":0,"index":70},{"krate":0,"index":71}],"decl_id":null,"docs":" Implements unsigned division and modulo via mutiplication and shifts.","sig":null,"attributes":[{"value":"/ Implements unsigned division and modulo via mutiplication and shifts.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":2005,"byte_end":2078,"line_start":49,"line_end":49,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":2079,"byte_end":2082,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ Creating a an instance of this struct is more expensive than a single division, but if the division is repeated,","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":2083,"byte_end":2199,"line_start":51,"line_end":51,"column_start":1,"column_end":117}},{"value":"/ this version will be several times faster than naive division.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":2200,"byte_end":2266,"line_start":52,"line_end":52,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":2727,"byte_end":2730,"line_start":67,"line_end":67,"column_start":12,"column_end":15},"name":"new","qualname":"<StrengthReducedU8>::new","value":"pub fn new(u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new divisor instance.","sig":null,"attributes":[{"value":"/ Creates a new divisor instance.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":2397,"byte_end":2432,"line_start":59,"line_end":59,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":2437,"byte_end":2440,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ If possible, avoid calling new() from an inner loop: The intended usage is to create an instance of this struct outside the loop, and use it for divison and remainders inside the loop.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":2445,"byte_end":2633,"line_start":61,"line_end":61,"column_start":5,"column_end":193}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":2638,"byte_end":2641,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ # Panics:","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":2646,"byte_end":2659,"line_start":63,"line_end":63,"column_start":5,"column_end":18}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":2664,"byte_end":2668,"line_start":64,"line_end":64,"column_start":5,"column_end":9}},{"value":"/ Panics if `divisor` is 0","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":2673,"byte_end":2701,"line_start":65,"line_end":65,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":2706,"byte_end":2715,"line_start":66,"line_end":66,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":3143,"byte_end":3150,"line_start":81,"line_end":81,"column_start":12,"column_end":19},"name":"div_rem","qualname":"<StrengthReducedU8>::div_rem","value":"pub fn div_rem(u8, Self) -> (u8, u8)","parent":null,"children":[],"decl_id":null,"docs":" Simultaneous truncated integer division and modulus.\n Returns `(quotient, remainder)`.\n","sig":null,"attributes":[{"value":"/ Simultaneous truncated integer division and modulus.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":3020,"byte_end":3076,"line_start":78,"line_end":78,"column_start":5,"column_end":61}},{"value":"/ Returns `(quotient, remainder)`.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":3081,"byte_end":3117,"line_start":79,"line_end":79,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":3122,"byte_end":3131,"line_start":80,"line_end":80,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":3394,"byte_end":3397,"line_start":89,"line_end":89,"column_start":12,"column_end":15},"name":"get","qualname":"<StrengthReducedU8>::get","value":"pub fn get(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the value used to create this struct\n","sig":null,"attributes":[{"value":"/ Retrieve the value used to create this struct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":3319,"byte_end":3368,"line_start":87,"line_end":87,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":3373,"byte_end":3382,"line_start":88,"line_end":88,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":77},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":15034,"byte_end":15053,"line_start":395,"line_end":395,"column_start":12,"column_end":31},"name":"StrengthReducedU128","qualname":"::StrengthReducedU128","value":"StrengthReducedU128 {  }","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80}],"decl_id":null,"docs":" Implements unsigned division and modulo via mutiplication and shifts.","sig":null,"attributes":[{"value":"/ Implements unsigned division and modulo via mutiplication and shifts.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":14731,"byte_end":14804,"line_start":390,"line_end":390,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":14805,"byte_end":14808,"line_start":391,"line_end":391,"column_start":1,"column_end":4}},{"value":"/ Creating a an instance of this struct is more expensive than a single division, but if the division is repeated,","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":14809,"byte_end":14925,"line_start":392,"line_end":392,"column_start":1,"column_end":117}},{"value":"/ this version will be several times faster than naive division.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":14926,"byte_end":14992,"line_start":393,"line_end":393,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":15488,"byte_end":15491,"line_start":409,"line_end":409,"column_start":12,"column_end":15},"name":"new","qualname":"<StrengthReducedU128>::new","value":"pub fn new(u128) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new divisor instance.","sig":null,"attributes":[{"value":"/ Creates a new divisor instance.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":15158,"byte_end":15193,"line_start":401,"line_end":401,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":15198,"byte_end":15201,"line_start":402,"line_end":402,"column_start":5,"column_end":8}},{"value":"/ If possible, avoid calling new() from an inner loop: The intended usage is to create an instance of this struct outside the loop, and use it for divison and remainders inside the loop.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":15206,"byte_end":15394,"line_start":403,"line_end":403,"column_start":5,"column_end":193}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":15399,"byte_end":15402,"line_start":404,"line_end":404,"column_start":5,"column_end":8}},{"value":"/ # Panics:","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":15407,"byte_end":15420,"line_start":405,"line_end":405,"column_start":5,"column_end":18}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":15425,"byte_end":15429,"line_start":406,"line_end":406,"column_start":5,"column_end":9}},{"value":"/ Panics if `divisor` is 0","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":15434,"byte_end":15462,"line_start":407,"line_end":407,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":15467,"byte_end":15476,"line_start":408,"line_end":408,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":16120,"byte_end":16127,"line_start":425,"line_end":425,"column_start":12,"column_end":19},"name":"div_rem","qualname":"<StrengthReducedU128>::div_rem","value":"pub fn div_rem(u128, Self) -> (u128, u128)","parent":null,"children":[],"decl_id":null,"docs":" Simultaneous truncated integer division and modulus.\n Returns `(quotient, remainder)`.\n","sig":null,"attributes":[{"value":"/ Simultaneous truncated integer division and modulus.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":15997,"byte_end":16053,"line_start":422,"line_end":422,"column_start":5,"column_end":61}},{"value":"/ Returns `(quotient, remainder)`.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":16058,"byte_end":16094,"line_start":423,"line_end":423,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":16099,"byte_end":16108,"line_start":424,"line_end":424,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":16396,"byte_end":16399,"line_start":433,"line_end":433,"column_start":12,"column_end":15},"name":"get","qualname":"<StrengthReducedU128>::get","value":"pub fn get(&Self) -> u128","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the value used to create this struct\n","sig":null,"attributes":[{"value":"/ Retrieve the value used to create this struct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":16321,"byte_end":16370,"line_start":431,"line_end":431,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":16375,"byte_end":16384,"line_start":432,"line_end":432,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":96},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":17392,"byte_end":17410,"line_start":466,"line_end":466,"column_start":23,"column_end":41},"name":"StrengthReducedU16","qualname":"::StrengthReducedU16","value":"StrengthReducedU16 {  }","parent":null,"children":[{"krate":0,"index":97},{"krate":0,"index":98}],"decl_id":null,"docs":" Implements unsigned division and modulo via mutiplication and shifts.","sig":null,"attributes":[{"value":"/ Implements unsigned division and modulo via mutiplication and shifts.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":4550,"byte_end":4623,"line_start":131,"line_end":131,"column_start":9,"column_end":82}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":4632,"byte_end":4635,"line_start":132,"line_end":132,"column_start":9,"column_end":12}},{"value":"/ Creating a an instance of this struct is more expensive than a single division, but if the division is repeated,","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":4644,"byte_end":4760,"line_start":133,"line_end":133,"column_start":9,"column_end":125}},{"value":"/ this version will be several times faster than naive division.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":4769,"byte_end":4835,"line_start":134,"line_end":134,"column_start":9,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":114},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":17440,"byte_end":17458,"line_start":467,"line_end":467,"column_start":23,"column_end":41},"name":"StrengthReducedU32","qualname":"::StrengthReducedU32","value":"StrengthReducedU32 {  }","parent":null,"children":[{"krate":0,"index":115},{"krate":0,"index":116}],"decl_id":null,"docs":" Implements unsigned division and modulo via mutiplication and shifts.","sig":null,"attributes":[{"value":"/ Implements unsigned division and modulo via mutiplication and shifts.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":7632,"byte_end":7705,"line_start":212,"line_end":212,"column_start":9,"column_end":82}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":7714,"byte_end":7717,"line_start":213,"line_end":213,"column_start":9,"column_end":12}},{"value":"/ Creating a an instance of this struct is more expensive than a single division, but if the division is repeated,","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":7726,"byte_end":7842,"line_start":214,"line_end":214,"column_start":9,"column_end":125}},{"value":"/ this version will be several times faster than naive division.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":7851,"byte_end":7917,"line_start":215,"line_end":215,"column_start":9,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":132},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":17488,"byte_end":17506,"line_start":468,"line_end":468,"column_start":23,"column_end":41},"name":"StrengthReducedU64","qualname":"::StrengthReducedU64","value":"StrengthReducedU64 {  }","parent":null,"children":[{"krate":0,"index":133},{"krate":0,"index":134}],"decl_id":null,"docs":" Implements unsigned division and modulo via mutiplication and shifts.","sig":null,"attributes":[{"value":"/ Implements unsigned division and modulo via mutiplication and shifts.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":11292,"byte_end":11365,"line_start":304,"line_end":304,"column_start":9,"column_end":82}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":11374,"byte_end":11377,"line_start":305,"line_end":305,"column_start":9,"column_end":12}},{"value":"/ Creating a an instance of this struct is more expensive than a single division, but if the division is repeated,","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":11386,"byte_end":11502,"line_start":306,"line_end":306,"column_start":9,"column_end":125}},{"value":"/ this version will be several times faster than naive division.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":11511,"byte_end":11577,"line_start":307,"line_end":307,"column_start":9,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":150},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":17809,"byte_end":17829,"line_start":476,"line_end":476,"column_start":23,"column_end":43},"name":"StrengthReducedUsize","qualname":"::StrengthReducedUsize","value":"StrengthReducedUsize {  }","parent":null,"children":[{"krate":0,"index":151},{"krate":0,"index":152}],"decl_id":null,"docs":" Implements unsigned division and modulo via mutiplication and shifts.","sig":null,"attributes":[{"value":"/ Implements unsigned division and modulo via mutiplication and shifts.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":11292,"byte_end":11365,"line_start":304,"line_end":304,"column_start":9,"column_end":82}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":11374,"byte_end":11377,"line_start":305,"line_end":305,"column_start":9,"column_end":12}},{"value":"/ Creating a an instance of this struct is more expensive than a single division, but if the division is repeated,","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":11386,"byte_end":11502,"line_start":306,"line_end":306,"column_start":9,"column_end":125}},{"value":"/ this version will be several times faster than naive division.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":11511,"byte_end":11577,"line_start":307,"line_end":307,"column_start":9,"column_end":75}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":2373,"byte_end":2390,"line_start":58,"line_end":58,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":15132,"byte_end":15151,"line_start":400,"line_end":400,"column_start":6,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":2373,"byte_end":2390,"line_start":58,"line_end":58,"column_start":6,"column_end":23},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":69},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/strength_reduce-0.2.3/src/lib.rs","byte_start":15132,"byte_end":15151,"line_start":400,"line_end":400,"column_start":6,"column_end":25},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":77},"to":{"krate":4294967295,"index":4294967295}}]}