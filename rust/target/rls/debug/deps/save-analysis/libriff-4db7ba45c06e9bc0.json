{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1","program":"/Users/spluta1/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","riff","--edition=2018","/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=4db7ba45c06e9bc0","-C","extra-filename=-4db7ba45c06e9bc0","--out-dir","/Users/spluta1/Documents/rust/time_stretch/target/rls/debug/deps","-L","dependency=/Users/spluta1/Documents/rust/time_stretch/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/spluta1/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/spluta1/Documents/rust/time_stretch/target/rls/debug/deps/libriff-4db7ba45c06e9bc0.rmeta"},"prelude":{"crate_id":{"name":"riff","disambiguator":[8318115331546405403,11421819855624979102]},"crate_root":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src","external_crates":[{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[11266178634318078844,10430434914575217037]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[11698766721189094488,12060600386163665861]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[7682173449702177568,11032960836976215208]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[4743338922599007115,7423637119316760057]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[2427264904945132901,10184032034968735412]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[9774951351864599068,14817832832842499961]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[10809433593918525561,458952361993985826]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15028772050842969220,14160812736163645060]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[6995225455969351707,4449664983666090491]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8140348155906305511,16205222570971502248]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[233178625001733801,10631967199943834554]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[1525994598401419908,3288373240607898362]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[6171023582747105604,8380219937402072808]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[16379221974889702373,16836676840445794723]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[17037182358159064978,13693302728723089691]}}],"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":0,"byte_end":8601,"line_start":1,"line_end":312,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":0,"byte_end":8601,"line_start":1,"line_end":312,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":6},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":15},{"krate":0,"index":18},{"krate":0,"index":92},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":95},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":28},{"krate":0,"index":30},{"krate":0,"index":105},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":119},{"krate":0,"index":32},{"krate":0,"index":125},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":129},{"krate":0,"index":59},{"krate":0,"index":65},{"krate":0,"index":70}],"decl_id":null,"docs":" # riff\n \n `riff` provides utility methods for reading and writing RIFF-formatted files,\n such as Microsoft Wave, AVI or DLS files.\n","sig":null,"attributes":[{"value":"/ # riff","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":0,"byte_end":10,"line_start":1,"line_end":1,"column_start":1,"column_end":11}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":11,"byte_end":15,"line_start":2,"line_end":2,"column_start":1,"column_end":5}},{"value":"/ `riff` provides utility methods for reading and writing RIFF-formatted files,","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":16,"byte_end":97,"line_start":3,"line_end":3,"column_start":1,"column_end":82}},{"value":"/ such as Microsoft Wave, AVI or DLS files.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":98,"byte_end":143,"line_start":4,"line_end":4,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":92},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":348,"byte_end":355,"line_start":15,"line_end":15,"column_start":12,"column_end":19},"name":"ChunkId","qualname":"::ChunkId","value":"ChunkId { value }","parent":null,"children":[{"krate":0,"index":93}],"decl_id":null,"docs":" A chunk id, also known as FourCC\n","sig":null,"attributes":[{"value":"/ A chunk id, also known as FourCC","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":268,"byte_end":304,"line_start":13,"line_end":13,"column_start":1,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":93},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":394,"byte_end":399,"line_start":17,"line_end":17,"column_start":7,"column_end":12},"name":"value","qualname":"::ChunkId::value","value":"[u8; 4]","parent":{"krate":0,"index":92},"children":[],"decl_id":null,"docs":" The raw bytes of the id\n","sig":null,"attributes":[{"value":"/ The raw bytes of the id","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":360,"byte_end":387,"line_start":16,"line_end":16,"column_start":3,"column_end":30}}]},{"kind":"Static","id":{"krate":0,"index":21},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":441,"byte_end":448,"line_start":21,"line_end":21,"column_start":12,"column_end":19},"name":"RIFF_ID","qualname":"::RIFF_ID","value":"ChunkId","parent":null,"children":[],"decl_id":null,"docs":" The `RIFF` id\n","sig":null,"attributes":[{"value":"/ The `RIFF` id","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":412,"byte_end":429,"line_start":20,"line_end":20,"column_start":1,"column_end":18}}]},{"kind":"Static","id":{"krate":0,"index":22},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":535,"byte_end":542,"line_start":24,"line_end":24,"column_start":12,"column_end":19},"name":"LIST_ID","qualname":"::LIST_ID","value":"ChunkId","parent":null,"children":[],"decl_id":null,"docs":" The `LIST` id\n","sig":null,"attributes":[{"value":"/ The `LIST` id","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":506,"byte_end":523,"line_start":23,"line_end":23,"column_start":1,"column_end":18}}]},{"kind":"Static","id":{"krate":0,"index":23},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":629,"byte_end":636,"line_start":27,"line_end":27,"column_start":12,"column_end":19},"name":"SEQT_ID","qualname":"::SEQT_ID","value":"ChunkId","parent":null,"children":[],"decl_id":null,"docs":" The `seqt` id\n","sig":null,"attributes":[{"value":"/ The `seqt` id","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":600,"byte_end":617,"line_start":26,"line_end":26,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":964,"byte_end":970,"line_start":39,"line_end":39,"column_start":10,"column_end":16},"name":"as_str","qualname":"<ChunkId>::as_str","value":"pub fn as_str(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the value of the id as a string.\n \n # Examples\n ```\n assert_eq!(riff::RIFF_ID.as_str(), \"RIFF\");\n ```\n \n # Panics\n This function panics when the value does not represent a valid UTF-8 string.\n","sig":null,"attributes":[{"value":"/ Returns the value of the id as a string.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":711,"byte_end":755,"line_start":30,"line_end":30,"column_start":3,"column_end":47}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":758,"byte_end":762,"line_start":31,"line_end":31,"column_start":3,"column_end":7}},{"value":"/ # Examples","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":765,"byte_end":779,"line_start":32,"line_end":32,"column_start":3,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":782,"byte_end":789,"line_start":33,"line_end":33,"column_start":3,"column_end":10}},{"value":"/ assert_eq!(riff::RIFF_ID.as_str(), \"RIFF\");","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":792,"byte_end":839,"line_start":34,"line_end":34,"column_start":3,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":842,"byte_end":849,"line_start":35,"line_end":35,"column_start":3,"column_end":10}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":852,"byte_end":856,"line_start":36,"line_end":36,"column_start":3,"column_end":7}},{"value":"/ # Panics","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":859,"byte_end":871,"line_start":37,"line_end":37,"column_start":3,"column_end":15}},{"value":"/ This function panics when the value does not represent a valid UTF-8 string.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":874,"byte_end":954,"line_start":38,"line_end":38,"column_start":3,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":1471,"byte_end":1474,"line_start":61,"line_end":61,"column_start":10,"column_end":13},"name":"new","qualname":"<ChunkId>::new","value":"pub fn new(&str) -> Result<ChunkId, &str>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new ChunkId from a string.\n \n # Examples\n ```\n # use std::error::Error;\n #\n # fn try_main() -> Result<(), Box<Error>> {\n let chunk_id = riff::ChunkId::new(\"RIFF\")?;\n #   Ok(())\n # }\n #\n # fn main() {\n #     try_main().unwrap();\n # }\n ```\n \n # Errors\n The function fails when the string's length in bytes is not exactly 4.\n","sig":null,"attributes":[{"value":"/ Creates a new ChunkId from a string.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":1041,"byte_end":1081,"line_start":43,"line_end":43,"column_start":3,"column_end":43}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":1084,"byte_end":1088,"line_start":44,"line_end":44,"column_start":3,"column_end":7}},{"value":"/ # Examples","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":1091,"byte_end":1105,"line_start":45,"line_end":45,"column_start":3,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":1108,"byte_end":1115,"line_start":46,"line_end":46,"column_start":3,"column_end":10}},{"value":"/ # use std::error::Error;","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":1118,"byte_end":1146,"line_start":47,"line_end":47,"column_start":3,"column_end":31}},{"value":"/ #","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":1149,"byte_end":1154,"line_start":48,"line_end":48,"column_start":3,"column_end":8}},{"value":"/ # fn try_main() -> Result<(), Box<Error>> {","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":1157,"byte_end":1204,"line_start":49,"line_end":49,"column_start":3,"column_end":50}},{"value":"/ let chunk_id = riff::ChunkId::new(\"RIFF\")?;","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":1207,"byte_end":1254,"line_start":50,"line_end":50,"column_start":3,"column_end":50}},{"value":"/ #   Ok(())","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":1257,"byte_end":1271,"line_start":51,"line_end":51,"column_start":3,"column_end":17}},{"value":"/ # }","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":1274,"byte_end":1281,"line_start":52,"line_end":52,"column_start":3,"column_end":10}},{"value":"/ #","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":1284,"byte_end":1289,"line_start":53,"line_end":53,"column_start":3,"column_end":8}},{"value":"/ # fn main() {","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":1292,"byte_end":1309,"line_start":54,"line_end":54,"column_start":3,"column_end":20}},{"value":"/ #     try_main().unwrap();","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":1312,"byte_end":1342,"line_start":55,"line_end":55,"column_start":3,"column_end":33}},{"value":"/ # }","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":1345,"byte_end":1352,"line_start":56,"line_end":56,"column_start":3,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":1355,"byte_end":1362,"line_start":57,"line_end":57,"column_start":3,"column_end":10}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":1365,"byte_end":1369,"line_start":58,"line_end":58,"column_start":3,"column_end":7}},{"value":"/ # Errors","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":1372,"byte_end":1384,"line_start":59,"line_end":59,"column_start":3,"column_end":15}},{"value":"/ The function fails when the string's length in bytes is not exactly 4.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":1387,"byte_end":1461,"line_start":60,"line_end":60,"column_start":3,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":106},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":2062,"byte_end":2066,"line_start":87,"line_end":87,"column_start":3,"column_end":7},"name":"Data","qualname":"::ChunkContents::Data","value":"ChunkContents::Data(ChunkId, Vec<u8>)","parent":{"krate":0,"index":105},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":110},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":2088,"byte_end":2096,"line_start":88,"line_end":88,"column_start":3,"column_end":11},"name":"Children","qualname":"::ChunkContents::Children","value":"ChunkContents::Children(ChunkId, ChunkId, Vec<ChunkContents>)","parent":{"krate":0,"index":105},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":115},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":2138,"byte_end":2152,"line_start":89,"line_end":89,"column_start":3,"column_end":17},"name":"ChildrenNoType","qualname":"::ChunkContents::ChildrenNoType","value":"ChunkContents::ChildrenNoType(ChunkId, Vec<ChunkContents>)","parent":{"krate":0,"index":105},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":105},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":2044,"byte_end":2057,"line_start":86,"line_end":86,"column_start":10,"column_end":23},"name":"ChunkContents","qualname":"::ChunkContents","value":"pub enum ChunkContents {\n    Data(ChunkId, Vec<u8>),\n    Children(ChunkId, ChunkId, Vec<ChunkContents>),\n    ChildrenNoType(ChunkId, Vec<ChunkContents>),\n}","parent":null,"children":[{"krate":0,"index":106},{"krate":0,"index":110},{"krate":0,"index":115}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":2215,"byte_end":2220,"line_start":93,"line_end":93,"column_start":10,"column_end":15},"name":"write","qualname":"<ChunkContents>::write","value":"pub fn write<T>(&Self, &mut T) -> std::io::Result<u64> where T: Seek + Write","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":125},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":4630,"byte_end":4635,"line_start":163,"line_end":163,"column_start":12,"column_end":17},"name":"Chunk","qualname":"::Chunk","value":"Chunk {  }","parent":null,"children":[{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128}],"decl_id":null,"docs":" A chunk, also known as a form\n","sig":null,"attributes":[{"value":"/ A chunk, also known as a form","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":4553,"byte_end":4586,"line_start":161,"line_end":161,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":59},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":4738,"byte_end":4742,"line_start":170,"line_end":170,"column_start":12,"column_end":16},"name":"Iter","qualname":"::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64}],"decl_id":null,"docs":" An iterator over the children of a `Chunk`\n","sig":null,"attributes":[{"value":"/ An iterator over the children of a `Chunk`","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":4680,"byte_end":4726,"line_start":169,"line_end":169,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":5245,"byte_end":5247,"line_start":195,"line_end":195,"column_start":10,"column_end":12},"name":"id","qualname":"<Chunk>::id","value":"pub fn id(&Self) -> ChunkId","parent":null,"children":[],"decl_id":null,"docs":" Returns the `ChunkId` of this chunk.\n","sig":null,"attributes":[{"value":"/ Returns the `ChunkId` of this chunk.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":5195,"byte_end":5235,"line_start":194,"line_end":194,"column_start":3,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":5351,"byte_end":5354,"line_start":200,"line_end":200,"column_start":10,"column_end":13},"name":"len","qualname":"<Chunk>::len","value":"pub fn len(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes in this chunk.\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes in this chunk.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":5295,"byte_end":5341,"line_start":199,"line_end":199,"column_start":3,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":5467,"byte_end":5473,"line_start":205,"line_end":205,"column_start":10,"column_end":16},"name":"offset","qualname":"<Chunk>::offset","value":"pub fn offset(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the offset of this chunk from the start of the stream.\n","sig":null,"attributes":[{"value":"/ Returns the offset of this chunk from the start of the stream.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":5391,"byte_end":5457,"line_start":204,"line_end":204,"column_start":3,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":5623,"byte_end":5632,"line_start":212,"line_end":212,"column_start":10,"column_end":19},"name":"read_type","qualname":"<Chunk>::read_type","value":"pub fn read_type<T>(&Self, &mut T) -> std::io::Result<ChunkId> where T: Read +\nSeek","parent":null,"children":[],"decl_id":null,"docs":" Reads the chunk type of this chunk.\n \n Generally only valid for `RIFF` and `LIST` chunks.\n","sig":null,"attributes":[{"value":"/ Reads the chunk type of this chunk.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":5510,"byte_end":5549,"line_start":209,"line_end":209,"column_start":3,"column_end":42}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":5552,"byte_end":5556,"line_start":210,"line_end":210,"column_start":3,"column_end":7}},{"value":"/ Generally only valid for `RIFF` and `LIST` chunks.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":5559,"byte_end":5613,"line_start":211,"line_end":211,"column_start":3,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":5954,"byte_end":5958,"line_start":223,"line_end":223,"column_start":10,"column_end":14},"name":"read","qualname":"<Chunk>::read","value":"pub fn read<T>(&mut T, u64) -> std::io::Result<Chunk> where T: Read + Seek","parent":null,"children":[],"decl_id":null,"docs":" Reads a chunk from the specified position in the stream.\n","sig":null,"attributes":[{"value":"/ Reads a chunk from the specified position in the stream.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":5884,"byte_end":5944,"line_start":222,"line_end":222,"column_start":3,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":6411,"byte_end":6424,"line_start":241,"line_end":241,"column_start":10,"column_end":23},"name":"read_contents","qualname":"<Chunk>::read_contents","value":"pub fn read_contents<T>(&Self, &mut T) -> std::io::Result<Vec<u8>> where\nT: Read + Seek","parent":null,"children":[],"decl_id":null,"docs":" Reads the entirety of the contents of a chunk.\n","sig":null,"attributes":[{"value":"/ Reads the entirety of the contents of a chunk.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":6351,"byte_end":6401,"line_start":240,"line_end":240,"column_start":3,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":6893,"byte_end":6897,"line_start":255,"line_end":255,"column_start":10,"column_end":14},"name":"iter","qualname":"<Chunk>::iter","value":"pub fn iter<'a, T>(&Self, &'a mut T) -> Iter where T: Seek + Read","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the children of the chunk.\n \n If the chunk has children but is noncompliant, e.g. it has\n no type identifier (like `seqt` chunks), use `iter_no_type` instead.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over the children of the chunk.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":6681,"byte_end":6736,"line_start":251,"line_end":251,"column_start":3,"column_end":58}},{"value":"/ ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":6739,"byte_end":6743,"line_start":252,"line_end":252,"column_start":3,"column_end":7}},{"value":"/ If the chunk has children but is noncompliant, e.g. it has","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":6746,"byte_end":6808,"line_start":253,"line_end":253,"column_start":3,"column_end":65}},{"value":"/ no type identifier (like `seqt` chunks), use `iter_no_type` instead.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":6811,"byte_end":6883,"line_start":254,"line_end":254,"column_start":3,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":7276,"byte_end":7288,"line_start":267,"line_end":267,"column_start":10,"column_end":22},"name":"iter_no_type","qualname":"<Chunk>::iter_no_type","value":"pub fn iter_no_type<'a, T>(&Self, &'a mut T) -> Iter where T: Seek + Read","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the chilren of the chunk. Only valid for\n noncompliant chunks that have children but no chunk type identifier\n (like `seqt` chunks).\n","sig":null,"attributes":[{"value":"/ Returns an iterator over the chilren of the chunk. Only valid for","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":7095,"byte_end":7164,"line_start":264,"line_end":264,"column_start":3,"column_end":72}},{"value":"/ noncompliant chunks that have children but no chunk type identifier","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":7167,"byte_end":7238,"line_start":265,"line_end":265,"column_start":3,"column_end":74}},{"value":"/ (like `seqt` chunks).","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":7241,"byte_end":7266,"line_start":266,"line_end":266,"column_start":3,"column_end":28}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":699,"byte_end":706,"line_start":29,"line_end":29,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":25},{"krate":0,"index":26}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":1758,"byte_end":1765,"line_start":73,"line_end":73,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":29}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":1898,"byte_end":1905,"line_start":79,"line_end":79,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":31}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":2190,"byte_end":2203,"line_start":92,"line_end":92,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":33}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":4849,"byte_end":4853,"line_start":177,"line_end":177,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":69}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":5185,"byte_end":5190,"line_start":193,"line_end":193,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":78},{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":89}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":699,"byte_end":706,"line_start":29,"line_end":29,"column_start":6,"column_end":13},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":92},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":1758,"byte_end":1765,"line_start":73,"line_end":73,"column_start":23,"column_end":30},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":92},"to":{"krate":2,"index":8708}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":1898,"byte_end":1905,"line_start":79,"line_end":79,"column_start":21,"column_end":28},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":92},"to":{"krate":2,"index":8701}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":2190,"byte_end":2203,"line_start":92,"line_end":92,"column_start":6,"column_end":19},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":105},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":4849,"byte_end":4853,"line_start":177,"line_end":177,"column_start":26,"column_end":30},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":59},"to":{"krate":2,"index":7161}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/riff-1.0.1/src/lib.rs","byte_start":5185,"byte_end":5190,"line_start":193,"line_end":193,"column_start":6,"column_end":11},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":125},"to":{"krate":4294967295,"index":4294967295}}]}