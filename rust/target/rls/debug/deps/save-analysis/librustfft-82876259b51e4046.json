{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1","program":"/Users/spluta1/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","rustfft","--edition=2018","/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"avx\"","--cfg","feature=\"default\"","--cfg","feature=\"sse\"","-C","metadata=82876259b51e4046","-C","extra-filename=-82876259b51e4046","--out-dir","/Users/spluta1/Documents/rust/time_stretch/target/rls/debug/deps","-L","dependency=/Users/spluta1/Documents/rust/time_stretch/target/rls/debug/deps","--extern","num_complex=/Users/spluta1/Documents/rust/time_stretch/target/rls/debug/deps/libnum_complex-4325bbbf30ace341.rmeta","--extern","num_integer=/Users/spluta1/Documents/rust/time_stretch/target/rls/debug/deps/libnum_integer-a360eb8838f33862.rmeta","--extern","num_traits=/Users/spluta1/Documents/rust/time_stretch/target/rls/debug/deps/libnum_traits-285069ed5db0b4b6.rmeta","--extern","primal_check=/Users/spluta1/Documents/rust/time_stretch/target/rls/debug/deps/libprimal_check-f0f1fb56cec0d58d.rmeta","--extern","strength_reduce=/Users/spluta1/Documents/rust/time_stretch/target/rls/debug/deps/libstrength_reduce-f5890e288dc1a29d.rmeta","--extern","transpose=/Users/spluta1/Documents/rust/time_stretch/target/rls/debug/deps/libtranspose-094d7221c544813d.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/spluta1/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/spluta1/Documents/rust/time_stretch/target/rls/debug/deps/librustfft-82876259b51e4046.rmeta"},"prelude":{"crate_id":{"name":"rustfft","disambiguator":[18312276072940434199,18373487257210581486]},"crate_root":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src","external_crates":[{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[11266178634318078844,10430434914575217037]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_vector.rs","num":2,"id":{"name":"core","disambiguator":[11698766721189094488,12060600386163665861]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[7682173449702177568,11032960836976215208]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[4743338922599007115,7423637119316760057]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[2427264904945132901,10184032034968735412]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[9774951351864599068,14817832832842499961]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[10809433593918525561,458952361993985826]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15028772050842969220,14160812736163645060]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[6995225455969351707,4449664983666090491]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8140348155906305511,16205222570971502248]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[233178625001733801,10631967199943834554]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[1525994598401419908,3288373240607898362]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[6171023582747105604,8380219937402072808]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[16379221974889702373,16836676840445794723]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[17037182358159064978,13693302728723089691]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/bluesteins_algorithm.rs","num":16,"id":{"name":"num_complex","disambiguator":[14058316524210774147,4955096035788976948]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/common.rs","num":17,"id":{"name":"num_traits","disambiguator":[2989495312243378153,7941914983733176037]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","num":18,"id":{"name":"num_integer","disambiguator":[17316086056191561063,15440118491029719635]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","num":19,"id":{"name":"strength_reduce","disambiguator":[13438270270157312807,3404482292596758658]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","num":20,"id":{"name":"transpose","disambiguator":[2082918241939600709,5705930986802704350]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/raders_algorithm.rs","num":21,"id":{"name":"primal_check","disambiguator":[15709841444248103327,16942345003955410193]}}],"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":0,"byte_end":20521,"line_start":1,"line_end":399,"column_start":1,"column_end":16}},"imports":[{"kind":"Use","ref_id":{"krate":16,"index":0},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":6057,"byte_end":6068,"line_start":103,"line_end":103,"column_start":9,"column_end":20},"alias_span":null,"name":"num_complex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":17,"index":0},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":6078,"byte_end":6088,"line_start":104,"line_end":104,"column_start":9,"column_end":19},"alias_span":null,"name":"num_traits","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":71},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mod.rs","byte_start":32673,"byte_end":32692,"line_start":11,"line_end":11,"column_start":37,"column_end":56},"alias_span":null,"name":"BluesteinsAlgorithm","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":120},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mod.rs","byte_start":32713,"byte_end":32716,"line_start":12,"line_end":12,"column_start":20,"column_end":23},"alias_span":null,"name":"Dft","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":175},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mod.rs","byte_start":32756,"byte_end":32775,"line_start":13,"line_end":13,"column_start":39,"column_end":58},"alias_span":null,"name":"GoodThomasAlgorithm","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":194},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mod.rs","byte_start":32777,"byte_end":32801,"line_start":13,"line_end":13,"column_start":60,"column_end":84},"alias_span":null,"name":"GoodThomasAlgorithmSmall","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":257},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mod.rs","byte_start":32832,"byte_end":32842,"line_start":14,"line_end":14,"column_start":29,"column_end":39},"alias_span":null,"name":"MixedRadix","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":272},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mod.rs","byte_start":32844,"byte_end":32859,"line_start":14,"line_end":14,"column_start":41,"column_end":56},"alias_span":null,"name":"MixedRadixSmall","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":337},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mod.rs","byte_start":32894,"byte_end":32909,"line_start":15,"line_end":15,"column_start":33,"column_end":48},"alias_span":null,"name":"RadersAlgorithm","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":428},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mod.rs","byte_start":32934,"byte_end":32955,"line_start":16,"line_end":16,"column_start":24,"column_end":45},"alias_span":null,"name":"bitreversed_transpose","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":430},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mod.rs","byte_start":32957,"byte_end":32969,"line_start":16,"line_end":16,"column_start":47,"column_end":59},"alias_span":null,"name":"reverse_bits","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":415},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mod.rs","byte_start":32971,"byte_end":32977,"line_start":16,"line_end":16,"column_start":61,"column_end":67},"alias_span":null,"name":"Radix4","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":23},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":6311,"byte_end":6317,"line_start":120,"line_end":120,"column_start":24,"column_end":30},"alias_span":null,"name":"FftNum","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":874},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":6341,"byte_end":6351,"line_start":121,"line_end":121,"column_start":23,"column_end":33},"alias_span":null,"name":"FftPlanner","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":888},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":6353,"byte_end":6369,"line_start":121,"line_end":121,"column_start":35,"column_end":51},"alias_span":null,"name":"FftPlannerScalar","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2724},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":16113,"byte_end":16126,"line_start":317,"line_end":317,"column_start":33,"column_end":46},"alias_span":null,"name":"FftPlannerAvx","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4287},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":20477,"byte_end":20490,"line_start":396,"line_end":396,"column_start":33,"column_end":46},"alias_span":null,"name":"FftPlannerSse","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":0,"byte_end":20521,"line_start":1,"line_end":399,"column_start":1,"column_end":16},"name":"","qualname":"::","value":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":6},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":30},{"krate":0,"index":726},{"krate":0,"index":759},{"krate":0,"index":784},{"krate":0,"index":825},{"krate":0,"index":906},{"krate":0,"index":930},{"krate":0,"index":933},{"krate":0,"index":936},{"krate":0,"index":939},{"krate":0,"index":940},{"krate":0,"index":943},{"krate":0,"index":946},{"krate":0,"index":4853},{"krate":0,"index":4868},{"krate":0,"index":4866},{"krate":0,"index":4863},{"krate":0,"index":4864},{"krate":0,"index":4860},{"krate":0,"index":4861},{"krate":0,"index":4858},{"krate":0,"index":948},{"krate":0,"index":950},{"krate":0,"index":952},{"krate":0,"index":954},{"krate":0,"index":961},{"krate":0,"index":2940},{"krate":0,"index":2943},{"krate":0,"index":4310}],"decl_id":null,"docs":" RustFFT is a high-performance FFT library written in pure Rust.","sig":null,"attributes":[{"value":"/ RustFFT is a high-performance FFT library written in pure Rust.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":59,"byte_end":126,"line_start":3,"line_end":3,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":127,"byte_end":130,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ RustFFT supports the AVX instruction set for increased performance. No special code is needed to activate AVX:","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":131,"byte_end":245,"line_start":5,"line_end":5,"column_start":1,"column_end":115}},{"value":"/ Simply plan a FFT using the FftPlanner on a machine that supports the `avx` and `fma` CPU features, and RustFFT","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":246,"byte_end":361,"line_start":6,"line_end":6,"column_start":1,"column_end":116}},{"value":"/ will automatically switch to faster AVX-accelerated algorithms.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":362,"byte_end":429,"line_start":7,"line_end":7,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":430,"byte_end":433,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ For machines that do not have AVX, RustFFT also supports the SSE4.1 instruction set.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":434,"byte_end":522,"line_start":9,"line_end":9,"column_start":1,"column_end":89}},{"value":"/ As for AVX, this is enabled automatically when using the FftPlanner.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":523,"byte_end":595,"line_start":10,"line_end":10,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":596,"byte_end":599,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ ### Usage","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":600,"byte_end":613,"line_start":12,"line_end":12,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":614,"byte_end":617,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ The recommended way to use RustFFT is to create a [`FftPlanner`](crate::FftPlanner) instance and then call its","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":618,"byte_end":732,"line_start":14,"line_end":14,"column_start":1,"column_end":115}},{"value":"/ [`plan_fft`](crate::FftPlanner::plan_fft) method. This method will automatically choose which FFT algorithms are best","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":733,"byte_end":854,"line_start":15,"line_end":15,"column_start":1,"column_end":122}},{"value":"/ for a given size and initialize the required buffers and precomputed data.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":855,"byte_end":933,"line_start":16,"line_end":16,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":934,"byte_end":937,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":938,"byte_end":945,"line_start":18,"line_end":18,"column_start":1,"column_end":8}},{"value":"/ // Perform a forward FFT of size 1234","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":946,"byte_end":987,"line_start":19,"line_end":19,"column_start":1,"column_end":42}},{"value":"/ use rustfft::{FftPlanner, num_complex::Complex};","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":988,"byte_end":1040,"line_start":20,"line_end":20,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":1041,"byte_end":1044,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ let mut planner = FftPlanner::new();","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":1045,"byte_end":1085,"line_start":22,"line_end":22,"column_start":1,"column_end":41}},{"value":"/ let fft = planner.plan_fft_forward(1234);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":1086,"byte_end":1131,"line_start":23,"line_end":23,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":1132,"byte_end":1135,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ let mut buffer = vec![Complex{ re: 0.0f32, im: 0.0f32 }; 1234];","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":1136,"byte_end":1203,"line_start":25,"line_end":25,"column_start":1,"column_end":68}},{"value":"/ fft.process(&mut buffer);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":1204,"byte_end":1233,"line_start":26,"line_end":26,"column_start":1,"column_end":30}},{"value":"/ ```","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":1234,"byte_end":1241,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/ The planner returns trait objects of the [`Fft`](crate::Fft) trait, allowing for FFT sizes that aren't known","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":1242,"byte_end":1354,"line_start":28,"line_end":28,"column_start":1,"column_end":113}},{"value":"/ until runtime.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":1355,"byte_end":1373,"line_start":29,"line_end":29,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":1374,"byte_end":1377,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ RustFFT also exposes individual FFT algorithms. For example, if you know beforehand that you need a power-of-two FFT, you can","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":1378,"byte_end":1507,"line_start":31,"line_end":31,"column_start":1,"column_end":130}},{"value":"/ avoid the overhead of the planner and trait object by directly creating instances of the [`Radix4`](crate::algorithm::Radix4) algorithm:","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":1508,"byte_end":1648,"line_start":32,"line_end":32,"column_start":1,"column_end":141}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":1649,"byte_end":1652,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":1653,"byte_end":1660,"line_start":34,"line_end":34,"column_start":1,"column_end":8}},{"value":"/ // Computes a forward FFT of size 4096","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":1661,"byte_end":1703,"line_start":35,"line_end":35,"column_start":1,"column_end":43}},{"value":"/ use rustfft::{Fft, FftDirection, num_complex::Complex, algorithm::Radix4};","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":1704,"byte_end":1782,"line_start":36,"line_end":36,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":1783,"byte_end":1786,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ let fft = Radix4::new(4096, FftDirection::Forward);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":1787,"byte_end":1842,"line_start":38,"line_end":38,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":1843,"byte_end":1846,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ let mut buffer = vec![Complex{ re: 0.0f32, im: 0.0f32 }; 4096];","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":1847,"byte_end":1914,"line_start":40,"line_end":40,"column_start":1,"column_end":68}},{"value":"/ fft.process(&mut buffer);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":1915,"byte_end":1944,"line_start":41,"line_end":41,"column_start":1,"column_end":30}},{"value":"/ ```","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":1945,"byte_end":1952,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":1953,"byte_end":1956,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ For the vast majority of situations, simply using the [`FftPlanner`](crate::FftPlanner) will be enough, but","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":1957,"byte_end":2068,"line_start":44,"line_end":44,"column_start":1,"column_end":112}},{"value":"/ advanced users may have better insight than the planner into which algorithms are best for a specific size. See the","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":2069,"byte_end":2188,"line_start":45,"line_end":45,"column_start":1,"column_end":120}},{"value":"/ [`algorithm`](crate::algorithm) module for a complete list of scalar algorithms implemented by RustFFT.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":2189,"byte_end":2296,"line_start":46,"line_end":46,"column_start":1,"column_end":108}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":2297,"byte_end":2300,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Users should beware, however, that bypassing the planner will disable all AVX and SSE optimizations.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":2301,"byte_end":2405,"line_start":48,"line_end":48,"column_start":1,"column_end":105}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":2406,"byte_end":2409,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ ### Feature Flags","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":2410,"byte_end":2431,"line_start":50,"line_end":50,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":2432,"byte_end":2435,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ * `avx` (Enabled by default)","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":2436,"byte_end":2468,"line_start":52,"line_end":52,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":2469,"byte_end":2472,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/     On x86_64, the `avx` feature enables compilation of AVX-accelerated code. Enabling it greatly improves performance if the","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":2473,"byte_end":2602,"line_start":54,"line_end":54,"column_start":1,"column_end":130}},{"value":"/     client CPU supports AVX and FMA, while disabling it reduces compile time and binary size.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":2603,"byte_end":2700,"line_start":55,"line_end":55,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":2701,"byte_end":2704,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/     On every platform besides x86_64, this feature does nothing, and RustFFT will behave like it's not set.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":2705,"byte_end":2816,"line_start":57,"line_end":57,"column_start":1,"column_end":112}},{"value":"/ * `sse` (Enabled by default)","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":2817,"byte_end":2849,"line_start":58,"line_end":58,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":2850,"byte_end":2853,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/     On x86_64, the `sse` feature enables compilation of SSE4.1-accelerated code. Enabling it improves performance","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":2854,"byte_end":2971,"line_start":60,"line_end":60,"column_start":1,"column_end":118}},{"value":"/     if the client CPU supports SSE4.1, while disabling it reduces compile time and binary size. If AVX is also","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":2972,"byte_end":3086,"line_start":61,"line_end":61,"column_start":1,"column_end":115}},{"value":"/     supported and its feature flag is enabled, RustFFT will use AVX instead of SSE4.1.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":3087,"byte_end":3177,"line_start":62,"line_end":62,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":3178,"byte_end":3181,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/     On every platform besides x86_64, this feature does nothing, and RustFFT will behave like it's not set.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":3182,"byte_end":3293,"line_start":64,"line_end":64,"column_start":1,"column_end":112}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":3294,"byte_end":3297,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ ### Normalization","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":3298,"byte_end":3319,"line_start":66,"line_end":66,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":3320,"byte_end":3323,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ RustFFT does not normalize outputs. Callers must manually normalize the results by scaling each element by","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":3324,"byte_end":3434,"line_start":68,"line_end":68,"column_start":1,"column_end":111}},{"value":"/ `1/len().sqrt()`. Multiple normalization steps can be merged into one via pairwise multiplication, so when","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":3435,"byte_end":3545,"line_start":69,"line_end":69,"column_start":1,"column_end":111}},{"value":"/ doing a forward FFT followed by an inverse callers can normalize once by scaling each element by `1/len()`","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":3546,"byte_end":3656,"line_start":70,"line_end":70,"column_start":1,"column_end":111}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":3657,"byte_end":3660,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ ### Output Order","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":3661,"byte_end":3681,"line_start":72,"line_end":72,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":3682,"byte_end":3685,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ Elements in the output are ordered by ascending frequency, with the first element corresponding to frequency 0.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":3686,"byte_end":3801,"line_start":74,"line_end":74,"column_start":1,"column_end":116}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":3802,"byte_end":3805,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ ### AVX Performance Tips","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":3806,"byte_end":3834,"line_start":76,"line_end":76,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":3835,"byte_end":3838,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ In any FFT computation, the time required to compute a FFT of size N relies heavily on the [prime factorization](https://en.wikipedia.org/wiki/Integer_factorization) of N.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":3839,"byte_end":4014,"line_start":78,"line_end":78,"column_start":1,"column_end":176}},{"value":"/ If N's prime factors are all very small, computing a FFT of size N will be fast, and it'll be slow if N has large prime","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":4015,"byte_end":4138,"line_start":79,"line_end":79,"column_start":1,"column_end":124}},{"value":"/ factors, or if N is a prime number.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":4139,"byte_end":4178,"line_start":80,"line_end":80,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":4179,"byte_end":4182,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ In most FFT libraries (Including RustFFT when using non-AVX code), power-of-two FFT sizes are the fastest, and users see a steep","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":4183,"byte_end":4315,"line_start":82,"line_end":82,"column_start":1,"column_end":133}},{"value":"/ falloff in performance when using non-power-of-two sizes. Thankfully, RustFFT using AVX acceleration is not quite as restrictive:","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":4316,"byte_end":4449,"line_start":83,"line_end":83,"column_start":1,"column_end":134}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":4450,"byte_end":4453,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ - Any FFT whose size is of the form `2^n * 3^m` can be considered the \"fastest\" in RustFFT.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":4454,"byte_end":4549,"line_start":85,"line_end":85,"column_start":1,"column_end":96}},{"value":"/ - Any FFT whose prime factors are all 11 or smaller will also be very fast, but the fewer the factors of 2 and 3 the slower it will be.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":4550,"byte_end":4689,"line_start":86,"line_end":86,"column_start":1,"column_end":140}},{"value":"/     For example, computing a FFT of size 13552 `(2^4*7*11*11)` is takes 12% longer to compute than 13824 `(2^9 * 3^3)`,","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":4690,"byte_end":4813,"line_start":87,"line_end":87,"column_start":1,"column_end":124}},{"value":"/     and computing a FFT of size 2541 `(3*7*11*11)` takes 65% longer to compute than 2592 `(2^5 * 3^4)`","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":4814,"byte_end":4920,"line_start":88,"line_end":88,"column_start":1,"column_end":107}},{"value":"/ - Any other FFT size will be noticeably slower. A considerable amount of effort has been put into making these FFT sizes as fast as","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":4921,"byte_end":5056,"line_start":89,"line_end":89,"column_start":1,"column_end":136}},{"value":"/     they can be, but some FFT sizes just take more work than others. For example, computing a FFT of size 5183 `(71 * 73)` takes about","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":5057,"byte_end":5195,"line_start":90,"line_end":90,"column_start":1,"column_end":139}},{"value":"/     5x longer than computing a FFT of size 5184 `(2^6 * 3^4)`.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":5196,"byte_end":5262,"line_start":91,"line_end":91,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":5263,"byte_end":5266,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ In most cases, even prime-sized FFTs will be fast enough for your application. In the example of 5183 above, even that \"slow\" FFT","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":5267,"byte_end":5400,"line_start":93,"line_end":93,"column_start":1,"column_end":134}},{"value":"/ only takes a few tens of microseconds to compute.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":5401,"byte_end":5454,"line_start":94,"line_end":94,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":5455,"byte_end":5458,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ Some applications of the FFT allow for choosing an arbitrary FFT size (In many applications the size is pre-determined by whatever you're computing).","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":5459,"byte_end":5612,"line_start":96,"line_end":96,"column_start":1,"column_end":154}},{"value":"/ If your application supports choosing your own size, our advice is still to start by trying the size that's most convenient to your application.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":5613,"byte_end":5761,"line_start":97,"line_end":97,"column_start":1,"column_end":149}},{"value":"/ If that's too slow, see if you can find a nearby size whose prime factors are all 11 or smaller, and you can expect a 2x-5x speedup.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":5762,"byte_end":5898,"line_start":98,"line_end":98,"column_start":1,"column_end":137}},{"value":"/ If that's still too slow, find a nearby size whose prime factors are all 2 or 3, and you can expect a 1.1x-1.5x speedup.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":5899,"byte_end":6023,"line_start":99,"line_end":99,"column_start":1,"column_end":125}}]},{"kind":"Trait","id":{"krate":0,"index":23},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/common.rs","byte_start":21058,"byte_end":21064,"line_start":5,"line_end":5,"column_start":11,"column_end":17},"name":"FftNum","qualname":"::common::FftNum","value":"FftNum: Copy + FromPrimitive + Signed + Sync + Send + Debug + 'static","parent":null,"children":[],"decl_id":null,"docs":" Generic floating point number, implemented for f32 and f64\n","sig":null,"attributes":[{"value":"/ Generic floating point number, implemented for f32 and f64","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/common.rs","byte_start":20985,"byte_end":21047,"line_start":4,"line_end":4,"column_start":1,"column_end":63}}]},{"kind":"Mod","id":{"krate":0,"index":30},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"algorithm","qualname":"::algorithm","value":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mod.rs","parent":null,"children":[{"krate":0,"index":31},{"krate":0,"index":83},{"krate":0,"index":129},{"krate":0,"index":211},{"krate":0,"index":285},{"krate":0,"index":352},{"krate":0,"index":434},{"krate":0,"index":693},{"krate":0,"index":696},{"krate":0,"index":699},{"krate":0,"index":700},{"krate":0,"index":703},{"krate":0,"index":706},{"krate":0,"index":707},{"krate":0,"index":710},{"krate":0,"index":713},{"krate":0,"index":716},{"krate":0,"index":717},{"krate":0,"index":720},{"krate":0,"index":723}],"decl_id":null,"docs":" Individual FFT algorithms\n","sig":null,"attributes":[{"value":"/ Individual FFT algorithms","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":6117,"byte_end":6146,"line_start":109,"line_end":109,"column_start":1,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":71},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/bluesteins_algorithm.rs","byte_start":34752,"byte_end":34771,"line_start":41,"line_end":41,"column_start":12,"column_end":31},"name":"BluesteinsAlgorithm","qualname":"::algorithm::bluesteins_algorithm::BluesteinsAlgorithm","value":"BluesteinsAlgorithm {  }","parent":null,"children":[{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77}],"decl_id":null,"docs":" Implementation of Bluestein's Algorithm","sig":null,"attributes":[{"value":"/ Implementation of Bluestein's Algorithm","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/bluesteins_algorithm.rs","byte_start":33244,"byte_end":33287,"line_start":11,"line_end":11,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/bluesteins_algorithm.rs","byte_start":33288,"byte_end":33291,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This algorithm computes an arbitrary-sized FFT in O(nlogn) time. It does this by converting this size-N FFT into a","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/bluesteins_algorithm.rs","byte_start":33292,"byte_end":33410,"line_start":13,"line_end":13,"column_start":1,"column_end":119}},{"value":"/ size-M FFT where M >= 2N - 1.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/bluesteins_algorithm.rs","byte_start":33411,"byte_end":33444,"line_start":14,"line_end":14,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/bluesteins_algorithm.rs","byte_start":33445,"byte_end":33448,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ The choice of M is very important for the performance of Bluestein's Algorithm. The most obvious choice is the next-largest","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/bluesteins_algorithm.rs","byte_start":33449,"byte_end":33576,"line_start":16,"line_end":16,"column_start":1,"column_end":128}},{"value":"/ power of two -- but if there's a smaller/faster FFT size that satisfies the `>= 2N - 1` requirement, that will significantly","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/bluesteins_algorithm.rs","byte_start":33577,"byte_end":33705,"line_start":17,"line_end":17,"column_start":1,"column_end":129}},{"value":"/ improve this algorithm's overall performance.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/bluesteins_algorithm.rs","byte_start":33706,"byte_end":33755,"line_start":18,"line_end":18,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/bluesteins_algorithm.rs","byte_start":33756,"byte_end":33759,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ ~~~","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/bluesteins_algorithm.rs","byte_start":33760,"byte_end":33767,"line_start":20,"line_end":20,"column_start":1,"column_end":8}},{"value":"/ // Computes a forward FFT of size 1201, using Bluestein's Algorithm","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/bluesteins_algorithm.rs","byte_start":33768,"byte_end":33839,"line_start":21,"line_end":21,"column_start":1,"column_end":72}},{"value":"/ use rustfft::algorithm::BluesteinsAlgorithm;","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/bluesteins_algorithm.rs","byte_start":33840,"byte_end":33888,"line_start":22,"line_end":22,"column_start":1,"column_end":49}},{"value":"/ use rustfft::{Fft, FftPlanner};","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/bluesteins_algorithm.rs","byte_start":33889,"byte_end":33924,"line_start":23,"line_end":23,"column_start":1,"column_end":36}},{"value":"/ use rustfft::num_complex::Complex;","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/bluesteins_algorithm.rs","byte_start":33925,"byte_end":33963,"line_start":24,"line_end":24,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/bluesteins_algorithm.rs","byte_start":33964,"byte_end":33967,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ let mut buffer = vec![Complex{ re: 0.0f32, im: 0.0f32 }; 1201];","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/bluesteins_algorithm.rs","byte_start":33968,"byte_end":34035,"line_start":26,"line_end":26,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/bluesteins_algorithm.rs","byte_start":34036,"byte_end":34039,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ // We need to find an inner FFT whose size is greater than 1201*2 - 1.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/bluesteins_algorithm.rs","byte_start":34040,"byte_end":34114,"line_start":28,"line_end":28,"column_start":1,"column_end":75}},{"value":"/ // The size 2401 (7^4) satisfies this requirement, while also being relatively fast.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/bluesteins_algorithm.rs","byte_start":34115,"byte_end":34203,"line_start":29,"line_end":29,"column_start":1,"column_end":89}},{"value":"/ let mut planner = FftPlanner::new();","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/bluesteins_algorithm.rs","byte_start":34204,"byte_end":34244,"line_start":30,"line_end":30,"column_start":1,"column_end":41}},{"value":"/ let inner_fft = planner.plan_fft_forward(2401);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/bluesteins_algorithm.rs","byte_start":34245,"byte_end":34296,"line_start":31,"line_end":31,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/bluesteins_algorithm.rs","byte_start":34297,"byte_end":34300,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ let fft = BluesteinsAlgorithm::new(1201, inner_fft);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/bluesteins_algorithm.rs","byte_start":34301,"byte_end":34357,"line_start":33,"line_end":33,"column_start":1,"column_end":57}},{"value":"/ fft.process(&mut buffer);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/bluesteins_algorithm.rs","byte_start":34358,"byte_end":34387,"line_start":34,"line_end":34,"column_start":1,"column_end":30}},{"value":"/ ~~~","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/bluesteins_algorithm.rs","byte_start":34388,"byte_end":34395,"line_start":35,"line_end":35,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/bluesteins_algorithm.rs","byte_start":34396,"byte_end":34399,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ Bluesteins's Algorithm is relatively expensive compared to other FFT algorithms. Benchmarking shows that it is up to","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/bluesteins_algorithm.rs","byte_start":34400,"byte_end":34520,"line_start":37,"line_end":37,"column_start":1,"column_end":121}},{"value":"/ an order of magnitude slower than similar composite sizes. In the example size above of 1201, benchmarking shows","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/bluesteins_algorithm.rs","byte_start":34521,"byte_end":34637,"line_start":38,"line_end":38,"column_start":1,"column_end":117}},{"value":"/ that it takes 5x more time to compute than computing a FFT of size 1200 via a step of MixedRadix.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/bluesteins_algorithm.rs","byte_start":34638,"byte_end":34739,"line_start":39,"line_end":39,"column_start":1,"column_end":102}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/bluesteins_algorithm.rs","byte_start":35460,"byte_end":35463,"line_start":60,"line_end":60,"column_start":12,"column_end":15},"name":"new","qualname":"<BluesteinsAlgorithm<T>>::new","value":"pub fn new(usize, Arc<dyn Fft<T>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a FFT instance which will process inputs/outputs of size `len`. `inner_fft.len()` must be >= `len * 2 - 1`","sig":null,"attributes":[{"value":"/ Creates a FFT instance which will process inputs/outputs of size `len`. `inner_fft.len()` must be >= `len * 2 - 1`","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/bluesteins_algorithm.rs","byte_start":34982,"byte_end":35100,"line_start":52,"line_end":52,"column_start":5,"column_end":123}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/bluesteins_algorithm.rs","byte_start":35105,"byte_end":35108,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ Note that this constructor is quite expensive to run; This algorithm must compute a FFT using `inner_fft` within the","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/bluesteins_algorithm.rs","byte_start":35113,"byte_end":35233,"line_start":54,"line_end":54,"column_start":5,"column_end":125}},{"value":"/ constructor. This further underlines the fact that Bluesteins Algorithm is more expensive to run than other","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/bluesteins_algorithm.rs","byte_start":35238,"byte_end":35349,"line_start":55,"line_end":55,"column_start":5,"column_end":116}},{"value":"/ FFT algorithms","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/bluesteins_algorithm.rs","byte_start":35354,"byte_end":35372,"line_start":56,"line_end":56,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/bluesteins_algorithm.rs","byte_start":35377,"byte_end":35380,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/bluesteins_algorithm.rs","byte_start":35385,"byte_end":35397,"line_start":58,"line_end":58,"column_start":5,"column_end":17}},{"value":"/ Panics if `inner_fft.len() < len * 2 - 1`.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/bluesteins_algorithm.rs","byte_start":35402,"byte_end":35448,"line_start":59,"line_end":59,"column_start":5,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":120},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/dft.rs","byte_start":42767,"byte_end":42770,"line_start":24,"line_end":24,"column_start":12,"column_end":15},"name":"Dft","qualname":"::algorithm::dft::Dft","value":"Dft {  }","parent":null,"children":[{"krate":0,"index":122},{"krate":0,"index":123}],"decl_id":null,"docs":" Naive O(n^2 ) Discrete Fourier Transform implementation","sig":null,"attributes":[{"value":"/ Naive O(n^2 ) Discrete Fourier Transform implementation","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/dft.rs","byte_start":42293,"byte_end":42352,"line_start":9,"line_end":9,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/dft.rs","byte_start":42353,"byte_end":42356,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This implementation is primarily used to test other FFT algorithms.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/dft.rs","byte_start":42357,"byte_end":42428,"line_start":11,"line_end":11,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/dft.rs","byte_start":42429,"byte_end":42432,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ~~~","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/dft.rs","byte_start":42433,"byte_end":42440,"line_start":13,"line_end":13,"column_start":1,"column_end":8}},{"value":"/ // Computes a naive DFT of size 123","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/dft.rs","byte_start":42441,"byte_end":42480,"line_start":14,"line_end":14,"column_start":1,"column_end":40}},{"value":"/ use rustfft::algorithm::Dft;","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/dft.rs","byte_start":42481,"byte_end":42513,"line_start":15,"line_end":15,"column_start":1,"column_end":33}},{"value":"/ use rustfft::{Fft, FftDirection};","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/dft.rs","byte_start":42514,"byte_end":42551,"line_start":16,"line_end":16,"column_start":1,"column_end":38}},{"value":"/ use rustfft::num_complex::Complex;","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/dft.rs","byte_start":42552,"byte_end":42590,"line_start":17,"line_end":17,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/dft.rs","byte_start":42591,"byte_end":42594,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ let mut buffer = vec![Complex{ re: 0.0f32, im: 0.0f32 }; 123];","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/dft.rs","byte_start":42595,"byte_end":42661,"line_start":19,"line_end":19,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/dft.rs","byte_start":42662,"byte_end":42665,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ let dft = Dft::new(123, FftDirection::Forward);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/dft.rs","byte_start":42666,"byte_end":42717,"line_start":21,"line_end":21,"column_start":1,"column_end":52}},{"value":"/ dft.process(&mut buffer);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/dft.rs","byte_start":42718,"byte_end":42747,"line_start":22,"line_end":22,"column_start":1,"column_end":30}},{"value":"/ ~~~","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/dft.rs","byte_start":42748,"byte_end":42755,"line_start":23,"line_end":23,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/dft.rs","byte_start":42971,"byte_end":42974,"line_start":31,"line_end":31,"column_start":12,"column_end":15},"name":"new","qualname":"<Dft<T>>::new","value":"pub fn new(usize, FftDirection) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Preallocates necessary arrays and precomputes necessary data to efficiently compute Dft\n","sig":null,"attributes":[{"value":"/ Preallocates necessary arrays and precomputes necessary data to efficiently compute Dft","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/dft.rs","byte_start":42868,"byte_end":42959,"line_start":30,"line_end":30,"column_start":5,"column_end":96}}]},{"kind":"Struct","id":{"krate":0,"index":175},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":55867,"byte_end":55886,"line_start":41,"line_end":41,"column_start":12,"column_end":31},"name":"GoodThomasAlgorithm","qualname":"::algorithm::good_thomas_algorithm::GoodThomasAlgorithm","value":"GoodThomasAlgorithm {  }","parent":null,"children":[{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186}],"decl_id":null,"docs":" Implementation of the [Good-Thomas Algorithm (AKA Prime Factor Algorithm)](https://en.wikipedia.org/wiki/Prime-factor_FFT_algorithm)","sig":null,"attributes":[{"value":"/ Implementation of the [Good-Thomas Algorithm (AKA Prime Factor Algorithm)](https://en.wikipedia.org/wiki/Prime-factor_FFT_algorithm)","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":54546,"byte_end":54682,"line_start":14,"line_end":14,"column_start":1,"column_end":137}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":54683,"byte_end":54686,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ This algorithm factors a size n FFT into n1 * n2, where GCD(n1, n2) == 1","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":54687,"byte_end":54763,"line_start":16,"line_end":16,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":54764,"byte_end":54767,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Conceptually, this algorithm is very similar to the Mixed-Radix, except because GCD(n1, n2) == 1 we can do some","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":54768,"byte_end":54883,"line_start":18,"line_end":18,"column_start":1,"column_end":116}},{"value":"/ number theory trickery to reduce the number of floating-point multiplications and additions. Additionally, It can","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":54884,"byte_end":55001,"line_start":19,"line_end":19,"column_start":1,"column_end":118}},{"value":"/ be faster than Mixed-Radix at sizes below 10,000 or so.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":55002,"byte_end":55061,"line_start":20,"line_end":20,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":55062,"byte_end":55065,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ ~~~","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":55066,"byte_end":55073,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/ // Computes a forward FFT of size 1200, using the Good-Thomas Algorithm","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":55074,"byte_end":55149,"line_start":23,"line_end":23,"column_start":1,"column_end":76}},{"value":"/ use rustfft::algorithm::GoodThomasAlgorithm;","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":55150,"byte_end":55198,"line_start":24,"line_end":24,"column_start":1,"column_end":49}},{"value":"/ use rustfft::{Fft, FftPlanner};","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":55199,"byte_end":55234,"line_start":25,"line_end":25,"column_start":1,"column_end":36}},{"value":"/ use rustfft::num_complex::Complex;","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":55235,"byte_end":55273,"line_start":26,"line_end":26,"column_start":1,"column_end":39}},{"value":"/ use rustfft::num_traits::Zero;","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":55274,"byte_end":55308,"line_start":27,"line_end":27,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":55309,"byte_end":55312,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ let mut buffer = vec![Complex{ re: 0.0f32, im: 0.0f32 }; 1200];","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":55313,"byte_end":55380,"line_start":29,"line_end":29,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":55381,"byte_end":55384,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ // we need to find an n1 and n2 such that n1 * n2 == 1200 and GCD(n1, n2) == 1","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":55385,"byte_end":55467,"line_start":31,"line_end":31,"column_start":1,"column_end":83}},{"value":"/ // n1 = 48 and n2 = 25 satisfies this","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":55468,"byte_end":55509,"line_start":32,"line_end":32,"column_start":1,"column_end":42}},{"value":"/ let mut planner = FftPlanner::new();","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":55510,"byte_end":55550,"line_start":33,"line_end":33,"column_start":1,"column_end":41}},{"value":"/ let inner_fft_n1 = planner.plan_fft_forward(48);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":55551,"byte_end":55603,"line_start":34,"line_end":34,"column_start":1,"column_end":53}},{"value":"/ let inner_fft_n2 = planner.plan_fft_forward(25);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":55604,"byte_end":55656,"line_start":35,"line_end":35,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":55657,"byte_end":55660,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ // the good-thomas FFT length will be inner_fft_n1.len() * inner_fft_n2.len() = 1200","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":55661,"byte_end":55749,"line_start":37,"line_end":37,"column_start":1,"column_end":89}},{"value":"/ let fft = GoodThomasAlgorithm::new(inner_fft_n1, inner_fft_n2);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":55750,"byte_end":55817,"line_start":38,"line_end":38,"column_start":1,"column_end":68}},{"value":"/ fft.process(&mut buffer);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":55818,"byte_end":55847,"line_start":39,"line_end":39,"column_start":1,"column_end":30}},{"value":"/ ~~~","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":55848,"byte_end":55855,"line_start":40,"line_end":40,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":56452,"byte_end":56455,"line_start":62,"line_end":62,"column_start":12,"column_end":15},"name":"new","qualname":"<GoodThomasAlgorithm<T>>::new","value":"pub fn new(Arc<dyn Fft<T>>, Arc<dyn Fft<T>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a FFT instance which will process inputs/outputs of size `width_fft.len() * height_fft.len()`","sig":null,"attributes":[{"value":"/ Creates a FFT instance which will process inputs/outputs of size `width_fft.len() * height_fft.len()`","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":56259,"byte_end":56364,"line_start":59,"line_end":59,"column_start":5,"column_end":110}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":56369,"byte_end":56372,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ `GCD(width_fft.len(), height_fft.len())` must be equal to 1","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":56377,"byte_end":56440,"line_start":61,"line_end":61,"column_start":5,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":194},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":68651,"byte_end":68675,"line_start":312,"line_end":312,"column_start":12,"column_end":36},"name":"GoodThomasAlgorithmSmall","qualname":"::algorithm::good_thomas_algorithm::GoodThomasAlgorithmSmall","value":"GoodThomasAlgorithmSmall {  }","parent":null,"children":[{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201}],"decl_id":null,"docs":" Implementation of the Good-Thomas Algorithm, specialized for smaller input sizes","sig":null,"attributes":[{"value":"/ Implementation of the Good-Thomas Algorithm, specialized for smaller input sizes","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":67343,"byte_end":67427,"line_start":285,"line_end":285,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":67428,"byte_end":67431,"line_start":286,"line_end":286,"column_start":1,"column_end":4}},{"value":"/ This algorithm factors a size n FFT into n1 * n2, where GCD(n1, n2) == 1","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":67432,"byte_end":67508,"line_start":287,"line_end":287,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":67509,"byte_end":67512,"line_start":288,"line_end":288,"column_start":1,"column_end":4}},{"value":"/ Conceptually, this algorithm is very similar to MixedRadix, except because GCD(n1, n2) == 1 we can do some","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":67513,"byte_end":67623,"line_start":289,"line_end":289,"column_start":1,"column_end":111}},{"value":"/ number theory trickery to reduce the number of floating point operations. It typically performs","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":67624,"byte_end":67723,"line_start":290,"line_end":290,"column_start":1,"column_end":100}},{"value":"/ better than MixedRadixSmall, especially at the smallest sizes.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":67724,"byte_end":67790,"line_start":291,"line_end":291,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":67791,"byte_end":67794,"line_start":292,"line_end":292,"column_start":1,"column_end":4}},{"value":"/ ~~~","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":67795,"byte_end":67802,"line_start":293,"line_end":293,"column_start":1,"column_end":8}},{"value":"/ // Computes a forward FFT of size 56 using GoodThomasAlgorithmSmall","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":67803,"byte_end":67874,"line_start":294,"line_end":294,"column_start":1,"column_end":72}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":67875,"byte_end":67898,"line_start":295,"line_end":295,"column_start":1,"column_end":24}},{"value":"/ use rustfft::algorithm::GoodThomasAlgorithmSmall;","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":67899,"byte_end":67952,"line_start":296,"line_end":296,"column_start":1,"column_end":54}},{"value":"/ use rustfft::algorithm::butterflies::{Butterfly7, Butterfly8};","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":67953,"byte_end":68019,"line_start":297,"line_end":297,"column_start":1,"column_end":67}},{"value":"/ use rustfft::{Fft, FftDirection};","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":68020,"byte_end":68057,"line_start":298,"line_end":298,"column_start":1,"column_end":38}},{"value":"/ use rustfft::num_complex::Complex;","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":68058,"byte_end":68096,"line_start":299,"line_end":299,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":68097,"byte_end":68100,"line_start":300,"line_end":300,"column_start":1,"column_end":4}},{"value":"/ let mut buffer = vec![Complex{ re: 0.0f32, im: 0.0f32 }; 56];","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":68101,"byte_end":68166,"line_start":301,"line_end":301,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":68167,"byte_end":68170,"line_start":302,"line_end":302,"column_start":1,"column_end":4}},{"value":"/ // we need to find an n1 and n2 such that n1 * n2 == 56 and GCD(n1, n2) == 1","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":68171,"byte_end":68251,"line_start":303,"line_end":303,"column_start":1,"column_end":81}},{"value":"/ // n1 = 7 and n2 = 8 satisfies this","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":68252,"byte_end":68291,"line_start":304,"line_end":304,"column_start":1,"column_end":40}},{"value":"/ let inner_fft_n1 = Arc::new(Butterfly7::new(FftDirection::Forward));","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":68292,"byte_end":68364,"line_start":305,"line_end":305,"column_start":1,"column_end":73}},{"value":"/ let inner_fft_n2 = Arc::new(Butterfly8::new(FftDirection::Forward));","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":68365,"byte_end":68437,"line_start":306,"line_end":306,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":68438,"byte_end":68441,"line_start":307,"line_end":307,"column_start":1,"column_end":4}},{"value":"/ // the good-thomas FFT length will be inner_fft_n1.len() * inner_fft_n2.len() = 56","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":68442,"byte_end":68528,"line_start":308,"line_end":308,"column_start":1,"column_end":87}},{"value":"/ let fft = GoodThomasAlgorithmSmall::new(inner_fft_n1, inner_fft_n2);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":68529,"byte_end":68601,"line_start":309,"line_end":309,"column_start":1,"column_end":73}},{"value":"/ fft.process(&mut buffer);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":68602,"byte_end":68631,"line_start":310,"line_end":310,"column_start":1,"column_end":30}},{"value":"/ ~~~","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":68632,"byte_end":68639,"line_start":311,"line_end":311,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":69107,"byte_end":69110,"line_start":328,"line_end":328,"column_start":12,"column_end":15},"name":"new","qualname":"<GoodThomasAlgorithmSmall<T>>::new","value":"pub fn new(Arc<dyn Fft<T>>, Arc<dyn Fft<T>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a FFT instance which will process inputs/outputs of size `width_fft.len() * height_fft.len()`","sig":null,"attributes":[{"value":"/ Creates a FFT instance which will process inputs/outputs of size `width_fft.len() * height_fft.len()`","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":68914,"byte_end":69019,"line_start":325,"line_end":325,"column_start":5,"column_end":110}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":69024,"byte_end":69027,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ `GCD(width_fft.len(), height_fft.len())` must be equal to 1","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":69032,"byte_end":69095,"line_start":327,"line_end":327,"column_start":5,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":257},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":81059,"byte_end":81069,"line_start":36,"line_end":36,"column_start":12,"column_end":22},"name":"MixedRadix","qualname":"::algorithm::mixed_radix::MixedRadix","value":"MixedRadix {  }","parent":null,"children":[{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266}],"decl_id":null,"docs":" Implementation of the Mixed-Radix FFT algorithm","sig":null,"attributes":[{"value":"/ Implementation of the Mixed-Radix FFT algorithm","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":80117,"byte_end":80168,"line_start":13,"line_end":13,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":80169,"byte_end":80172,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ This algorithm factors a size n FFT into n1 * n2, computes several inner FFTs of size n1 and n2, then combines the","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":80173,"byte_end":80291,"line_start":15,"line_end":15,"column_start":1,"column_end":119}},{"value":"/ results to get the final answer","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":80292,"byte_end":80327,"line_start":16,"line_end":16,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":80328,"byte_end":80331,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ ~~~","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":80332,"byte_end":80339,"line_start":18,"line_end":18,"column_start":1,"column_end":8}},{"value":"/ // Computes a forward FFT of size 1200, using the Mixed-Radix Algorithm","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":80340,"byte_end":80415,"line_start":19,"line_end":19,"column_start":1,"column_end":76}},{"value":"/ use rustfft::algorithm::MixedRadix;","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":80416,"byte_end":80455,"line_start":20,"line_end":20,"column_start":1,"column_end":40}},{"value":"/ use rustfft::{Fft, FftPlanner};","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":80456,"byte_end":80491,"line_start":21,"line_end":21,"column_start":1,"column_end":36}},{"value":"/ use rustfft::num_complex::Complex;","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":80492,"byte_end":80530,"line_start":22,"line_end":22,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":80531,"byte_end":80534,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ let mut buffer = vec![Complex{ re: 0.0f32, im: 0.0f32 }; 1200];","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":80535,"byte_end":80602,"line_start":24,"line_end":24,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":80603,"byte_end":80606,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ // we need to find an n1 and n2 such that n1 * n2 == 1200","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":80607,"byte_end":80668,"line_start":26,"line_end":26,"column_start":1,"column_end":62}},{"value":"/ // n1 = 30 and n2 = 40 satisfies this","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":80669,"byte_end":80710,"line_start":27,"line_end":27,"column_start":1,"column_end":42}},{"value":"/ let mut planner = FftPlanner::new();","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":80711,"byte_end":80751,"line_start":28,"line_end":28,"column_start":1,"column_end":41}},{"value":"/ let inner_fft_n1 = planner.plan_fft_forward(30);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":80752,"byte_end":80804,"line_start":29,"line_end":29,"column_start":1,"column_end":53}},{"value":"/ let inner_fft_n2 = planner.plan_fft_forward(40);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":80805,"byte_end":80857,"line_start":30,"line_end":30,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":80858,"byte_end":80861,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ // the mixed radix FFT length will be inner_fft_n1.len() * inner_fft_n2.len() = 1200","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":80862,"byte_end":80950,"line_start":32,"line_end":32,"column_start":1,"column_end":89}},{"value":"/ let fft = MixedRadix::new(inner_fft_n1, inner_fft_n2);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":80951,"byte_end":81009,"line_start":33,"line_end":33,"column_start":1,"column_end":59}},{"value":"/ fft.process(&mut buffer);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":81010,"byte_end":81039,"line_start":34,"line_end":34,"column_start":1,"column_end":30}},{"value":"/ ~~~","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":81040,"byte_end":81047,"line_start":35,"line_end":35,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":81476,"byte_end":81479,"line_start":53,"line_end":53,"column_start":12,"column_end":15},"name":"new","qualname":"<MixedRadix<T>>::new","value":"pub fn new(Arc<dyn Fft<T>>, Arc<dyn Fft<T>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a FFT instance which will process inputs/outputs of size `width_fft.len() * height_fft.len()`\n","sig":null,"attributes":[{"value":"/ Creates a FFT instance which will process inputs/outputs of size `width_fft.len() * height_fft.len()`","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":81359,"byte_end":81464,"line_start":52,"line_end":52,"column_start":5,"column_end":110}}]},{"kind":"Struct","id":{"krate":0,"index":272},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":88469,"byte_end":88484,"line_start":228,"line_end":228,"column_start":12,"column_end":27},"name":"MixedRadixSmall","qualname":"::algorithm::mixed_radix::MixedRadixSmall","value":"MixedRadixSmall {  }","parent":null,"children":[{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279}],"decl_id":null,"docs":" Implementation of the Mixed-Radix FFT algorithm, specialized for smaller input sizes","sig":null,"attributes":[{"value":"/ Implementation of the Mixed-Radix FFT algorithm, specialized for smaller input sizes","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":87386,"byte_end":87474,"line_start":202,"line_end":202,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":87475,"byte_end":87478,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ This algorithm factors a size n FFT into n1 * n2, computes several inner FFTs of size n1 and n2, then combines the","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":87479,"byte_end":87597,"line_start":204,"line_end":204,"column_start":1,"column_end":119}},{"value":"/ results to get the final answer","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":87598,"byte_end":87633,"line_start":205,"line_end":205,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":87634,"byte_end":87637,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ ~~~","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":87638,"byte_end":87645,"line_start":207,"line_end":207,"column_start":1,"column_end":8}},{"value":"/ // Computes a forward FFT of size 40 using MixedRadixSmall","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":87646,"byte_end":87708,"line_start":208,"line_end":208,"column_start":1,"column_end":63}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":87709,"byte_end":87732,"line_start":209,"line_end":209,"column_start":1,"column_end":24}},{"value":"/ use rustfft::algorithm::MixedRadixSmall;","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":87733,"byte_end":87777,"line_start":210,"line_end":210,"column_start":1,"column_end":45}},{"value":"/ use rustfft::algorithm::butterflies::{Butterfly5, Butterfly8};","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":87778,"byte_end":87844,"line_start":211,"line_end":211,"column_start":1,"column_end":67}},{"value":"/ use rustfft::{Fft, FftDirection};","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":87845,"byte_end":87882,"line_start":212,"line_end":212,"column_start":1,"column_end":38}},{"value":"/ use rustfft::num_complex::Complex;","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":87883,"byte_end":87921,"line_start":213,"line_end":213,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":87922,"byte_end":87925,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ let len = 40;","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":87926,"byte_end":87943,"line_start":215,"line_end":215,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":87944,"byte_end":87947,"line_start":216,"line_end":216,"column_start":1,"column_end":4}},{"value":"/ let mut buffer = vec![Complex{ re: 0.0f32, im: 0.0f32 }; len];","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":87948,"byte_end":88014,"line_start":217,"line_end":217,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":88015,"byte_end":88018,"line_start":218,"line_end":218,"column_start":1,"column_end":4}},{"value":"/ // we need to find an n1 and n2 such that n1 * n2 == 40","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":88019,"byte_end":88078,"line_start":219,"line_end":219,"column_start":1,"column_end":60}},{"value":"/ // n1 = 5 and n2 = 8 satisfies this","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":88079,"byte_end":88118,"line_start":220,"line_end":220,"column_start":1,"column_end":40}},{"value":"/ let inner_fft_n1 = Arc::new(Butterfly5::new(FftDirection::Forward));","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":88119,"byte_end":88191,"line_start":221,"line_end":221,"column_start":1,"column_end":73}},{"value":"/ let inner_fft_n2 = Arc::new(Butterfly8::new(FftDirection::Forward));","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":88192,"byte_end":88264,"line_start":222,"line_end":222,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":88265,"byte_end":88268,"line_start":223,"line_end":223,"column_start":1,"column_end":4}},{"value":"/ // the mixed radix FFT length will be inner_fft_n1.len() * inner_fft_n2.len() = 40","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":88269,"byte_end":88355,"line_start":224,"line_end":224,"column_start":1,"column_end":87}},{"value":"/ let fft = MixedRadixSmall::new(inner_fft_n1, inner_fft_n2);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":88356,"byte_end":88419,"line_start":225,"line_end":225,"column_start":1,"column_end":64}},{"value":"/ fft.process(&mut buffer);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":88420,"byte_end":88449,"line_start":226,"line_end":226,"column_start":1,"column_end":30}},{"value":"/ ~~~","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":88450,"byte_end":88457,"line_start":227,"line_end":227,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":88828,"byte_end":88831,"line_start":242,"line_end":242,"column_start":12,"column_end":15},"name":"new","qualname":"<MixedRadixSmall<T>>::new","value":"pub fn new(Arc<dyn Fft<T>>, Arc<dyn Fft<T>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a FFT instance which will process inputs/outputs of size `width_fft.len() * height_fft.len()`\n","sig":null,"attributes":[{"value":"/ Creates a FFT instance which will process inputs/outputs of size `width_fft.len() * height_fft.len()`","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":88711,"byte_end":88816,"line_start":241,"line_end":241,"column_start":5,"column_end":110}}]},{"kind":"Struct","id":{"krate":0,"index":337},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/raders_algorithm.rs","byte_start":98429,"byte_end":98444,"line_start":43,"line_end":43,"column_start":12,"column_end":27},"name":"RadersAlgorithm","qualname":"::algorithm::raders_algorithm::RadersAlgorithm","value":"RadersAlgorithm {  }","parent":null,"children":[{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":346}],"decl_id":null,"docs":" Implementation of Rader's Algorithm","sig":null,"attributes":[{"value":"/ Implementation of Rader's Algorithm","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/raders_algorithm.rs","byte_start":97224,"byte_end":97263,"line_start":15,"line_end":15,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/raders_algorithm.rs","byte_start":97264,"byte_end":97267,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ This algorithm computes a prime-sized FFT in O(nlogn) time. It does this by converting this size-N FFT into a","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/raders_algorithm.rs","byte_start":97268,"byte_end":97381,"line_start":17,"line_end":17,"column_start":1,"column_end":114}},{"value":"/ size-(N - 1) FFT, which is guaranteed to be composite.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/raders_algorithm.rs","byte_start":97382,"byte_end":97440,"line_start":18,"line_end":18,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/raders_algorithm.rs","byte_start":97441,"byte_end":97444,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ The worst case for this algorithm is when (N - 1) is 2 * prime, resulting in a","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/raders_algorithm.rs","byte_start":97445,"byte_end":97527,"line_start":20,"line_end":20,"column_start":1,"column_end":83}},{"value":"/ [Cunningham Chain](https://en.wikipedia.org/wiki/Cunningham_chain)","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/raders_algorithm.rs","byte_start":97528,"byte_end":97598,"line_start":21,"line_end":21,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/raders_algorithm.rs","byte_start":97599,"byte_end":97602,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ ~~~","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/raders_algorithm.rs","byte_start":97603,"byte_end":97610,"line_start":23,"line_end":23,"column_start":1,"column_end":8}},{"value":"/ // Computes a forward FFT of size 1201 (prime number), using Rader's Algorithm","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/raders_algorithm.rs","byte_start":97611,"byte_end":97693,"line_start":24,"line_end":24,"column_start":1,"column_end":83}},{"value":"/ use rustfft::algorithm::RadersAlgorithm;","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/raders_algorithm.rs","byte_start":97694,"byte_end":97738,"line_start":25,"line_end":25,"column_start":1,"column_end":45}},{"value":"/ use rustfft::{Fft, FftPlanner};","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/raders_algorithm.rs","byte_start":97739,"byte_end":97774,"line_start":26,"line_end":26,"column_start":1,"column_end":36}},{"value":"/ use rustfft::num_complex::Complex;","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/raders_algorithm.rs","byte_start":97775,"byte_end":97813,"line_start":27,"line_end":27,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/raders_algorithm.rs","byte_start":97814,"byte_end":97817,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ let mut buffer = vec![Complex{ re: 0.0f32, im: 0.0f32 }; 1201];","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/raders_algorithm.rs","byte_start":97818,"byte_end":97885,"line_start":29,"line_end":29,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/raders_algorithm.rs","byte_start":97886,"byte_end":97889,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ // plan a FFT of size n - 1 = 1200","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/raders_algorithm.rs","byte_start":97890,"byte_end":97928,"line_start":31,"line_end":31,"column_start":1,"column_end":39}},{"value":"/ let mut planner = FftPlanner::new();","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/raders_algorithm.rs","byte_start":97929,"byte_end":97969,"line_start":32,"line_end":32,"column_start":1,"column_end":41}},{"value":"/ let inner_fft = planner.plan_fft_forward(1200);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/raders_algorithm.rs","byte_start":97970,"byte_end":98021,"line_start":33,"line_end":33,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/raders_algorithm.rs","byte_start":98022,"byte_end":98025,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ let fft = RadersAlgorithm::new(inner_fft);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/raders_algorithm.rs","byte_start":98026,"byte_end":98072,"line_start":35,"line_end":35,"column_start":1,"column_end":47}},{"value":"/ fft.process(&mut buffer);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/raders_algorithm.rs","byte_start":98073,"byte_end":98102,"line_start":36,"line_end":36,"column_start":1,"column_end":30}},{"value":"/ ~~~","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/raders_algorithm.rs","byte_start":98103,"byte_end":98110,"line_start":37,"line_end":37,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/raders_algorithm.rs","byte_start":98111,"byte_end":98114,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ Rader's Algorithm is relatively expensive compared to other FFT algorithms. Benchmarking shows that it is up to","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/raders_algorithm.rs","byte_start":98115,"byte_end":98230,"line_start":39,"line_end":39,"column_start":1,"column_end":116}},{"value":"/ an order of magnitude slower than similar composite sizes. In the example size above of 1201, benchmarking shows","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/raders_algorithm.rs","byte_start":98231,"byte_end":98347,"line_start":40,"line_end":40,"column_start":1,"column_end":117}},{"value":"/ that it takes 2.5x more time to compute than a FFT of size 1200.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/raders_algorithm.rs","byte_start":98348,"byte_end":98416,"line_start":41,"line_end":41,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":349},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/raders_algorithm.rs","byte_start":99216,"byte_end":99219,"line_start":65,"line_end":65,"column_start":12,"column_end":15},"name":"new","qualname":"<RadersAlgorithm<T>>::new","value":"pub fn new(Arc<dyn Fft<T>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a FFT instance which will process inputs/outputs of size `inner_fft.len() + 1`.","sig":null,"attributes":[{"value":"/ Creates a FFT instance which will process inputs/outputs of size `inner_fft.len() + 1`.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/raders_algorithm.rs","byte_start":98756,"byte_end":98847,"line_start":57,"line_end":57,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/raders_algorithm.rs","byte_start":98852,"byte_end":98855,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ Note that this constructor is quite expensive to run; This algorithm must compute a FFT using `inner_fft` within the","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/raders_algorithm.rs","byte_start":98860,"byte_end":98980,"line_start":59,"line_end":59,"column_start":5,"column_end":125}},{"value":"/ constructor. This further underlines the fact that Rader's Algorithm is more expensive to run than other","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/raders_algorithm.rs","byte_start":98985,"byte_end":99093,"line_start":60,"line_end":60,"column_start":5,"column_end":113}},{"value":"/ FFT algorithms","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/raders_algorithm.rs","byte_start":99098,"byte_end":99116,"line_start":61,"line_end":61,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/raders_algorithm.rs","byte_start":99121,"byte_end":99124,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/raders_algorithm.rs","byte_start":99129,"byte_end":99141,"line_start":63,"line_end":63,"column_start":5,"column_end":17}},{"value":"/ Panics if `inner_fft.len() + 1` is not a prime number.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/raders_algorithm.rs","byte_start":99146,"byte_end":99204,"line_start":64,"line_end":64,"column_start":5,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":415},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/radix4.rs","byte_start":108582,"byte_end":108588,"line_start":30,"line_end":30,"column_start":12,"column_end":18},"name":"Radix4","qualname":"::algorithm::radix4::Radix4","value":"Radix4 {  }","parent":null,"children":[{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":419},{"krate":0,"index":420},{"krate":0,"index":421},{"krate":0,"index":422}],"decl_id":null,"docs":" FFT algorithm optimized for power-of-two sizes","sig":null,"attributes":[{"value":"/ FFT algorithm optimized for power-of-two sizes","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/radix4.rs","byte_start":108181,"byte_end":108231,"line_start":16,"line_end":16,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/radix4.rs","byte_start":108232,"byte_end":108235,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ ~~~","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/radix4.rs","byte_start":108236,"byte_end":108243,"line_start":18,"line_end":18,"column_start":1,"column_end":8}},{"value":"/ // Computes a forward FFT of size 4096","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/radix4.rs","byte_start":108244,"byte_end":108286,"line_start":19,"line_end":19,"column_start":1,"column_end":43}},{"value":"/ use rustfft::algorithm::Radix4;","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/radix4.rs","byte_start":108287,"byte_end":108322,"line_start":20,"line_end":20,"column_start":1,"column_end":36}},{"value":"/ use rustfft::{Fft, FftDirection};","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/radix4.rs","byte_start":108323,"byte_end":108360,"line_start":21,"line_end":21,"column_start":1,"column_end":38}},{"value":"/ use rustfft::num_complex::Complex;","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/radix4.rs","byte_start":108361,"byte_end":108399,"line_start":22,"line_end":22,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/radix4.rs","byte_start":108400,"byte_end":108403,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ let mut buffer = vec![Complex{ re: 0.0f32, im: 0.0f32 }; 4096];","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/radix4.rs","byte_start":108404,"byte_end":108471,"line_start":24,"line_end":24,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/radix4.rs","byte_start":108472,"byte_end":108475,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ let fft = Radix4::new(4096, FftDirection::Forward);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/radix4.rs","byte_start":108476,"byte_end":108531,"line_start":26,"line_end":26,"column_start":1,"column_end":56}},{"value":"/ fft.process(&mut buffer);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/radix4.rs","byte_start":108532,"byte_end":108561,"line_start":27,"line_end":27,"column_start":1,"column_end":30}},{"value":"/ ~~~","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/radix4.rs","byte_start":108562,"byte_end":108569,"line_start":28,"line_end":28,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":425},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/radix4.rs","byte_start":108913,"byte_end":108916,"line_start":44,"line_end":44,"column_start":12,"column_end":15},"name":"new","qualname":"<Radix4<T>>::new","value":"pub fn new(usize, FftDirection) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Preallocates necessary arrays and precomputes necessary data to efficiently compute the power-of-two FFT\n","sig":null,"attributes":[{"value":"/ Preallocates necessary arrays and precomputes necessary data to efficiently compute the power-of-two FFT","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/radix4.rs","byte_start":108793,"byte_end":108901,"line_start":43,"line_end":43,"column_start":5,"column_end":113}}]},{"kind":"Function","id":{"krate":0,"index":428},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/radix4.rs","byte_start":112912,"byte_end":112933,"line_start":150,"line_end":150,"column_start":8,"column_end":29},"name":"bitreversed_transpose","qualname":"::algorithm::radix4::bitreversed_transpose","value":"pub fn bitreversed_transpose<T: Copy>(usize, &[T], &mut [T], &[usize])","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":430},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/radix4.rs","byte_start":114907,"byte_end":114919,"line_start":201,"line_end":201,"column_start":8,"column_end":20},"name":"reverse_bits","qualname":"::algorithm::radix4::reverse_bits","value":"pub fn reverse_bits(usize, usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":434},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"butterflies","qualname":"::algorithm::butterflies","value":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","parent":null,"children":[{"krate":0,"index":435},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":442},{"krate":0,"index":445},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":452},{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":459},{"krate":0,"index":462},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":469},{"krate":0,"index":472},{"krate":0,"index":476},{"krate":0,"index":480},{"krate":0,"index":483},{"krate":0,"index":489},{"krate":0,"index":492},{"krate":0,"index":495},{"krate":0,"index":4445},{"krate":0,"index":4448},{"krate":0,"index":4456},{"krate":0,"index":4459},{"krate":0,"index":499},{"krate":0,"index":504},{"krate":0,"index":4463},{"krate":0,"index":4466},{"krate":0,"index":4474},{"krate":0,"index":4477},{"krate":0,"index":508},{"krate":0,"index":513},{"krate":0,"index":4481},{"krate":0,"index":4484},{"krate":0,"index":4492},{"krate":0,"index":4495},{"krate":0,"index":517},{"krate":0,"index":521},{"krate":0,"index":4499},{"krate":0,"index":4502},{"krate":0,"index":4510},{"krate":0,"index":4513},{"krate":0,"index":526},{"krate":0,"index":530},{"krate":0,"index":4517},{"krate":0,"index":4520},{"krate":0,"index":4528},{"krate":0,"index":4531},{"krate":0,"index":533},{"krate":0,"index":538},{"krate":0,"index":4535},{"krate":0,"index":4538},{"krate":0,"index":4546},{"krate":0,"index":4549},{"krate":0,"index":544},{"krate":0,"index":548},{"krate":0,"index":4553},{"krate":0,"index":4556},{"krate":0,"index":4564},{"krate":0,"index":4567},{"krate":0,"index":552},{"krate":0,"index":556},{"krate":0,"index":4571},{"krate":0,"index":4574},{"krate":0,"index":4582},{"krate":0,"index":4585},{"krate":0,"index":564},{"krate":0,"index":568},{"krate":0,"index":4589},{"krate":0,"index":4592},{"krate":0,"index":4600},{"krate":0,"index":4603},{"krate":0,"index":577},{"krate":0,"index":581},{"krate":0,"index":4607},{"krate":0,"index":4610},{"krate":0,"index":4618},{"krate":0,"index":4621},{"krate":0,"index":587},{"krate":0,"index":591},{"krate":0,"index":4625},{"krate":0,"index":4628},{"krate":0,"index":4636},{"krate":0,"index":4639},{"krate":0,"index":602},{"krate":0,"index":606},{"krate":0,"index":4643},{"krate":0,"index":4646},{"krate":0,"index":4654},{"krate":0,"index":4657},{"krate":0,"index":618},{"krate":0,"index":622},{"krate":0,"index":4661},{"krate":0,"index":4664},{"krate":0,"index":4672},{"krate":0,"index":4675},{"krate":0,"index":636},{"krate":0,"index":640},{"krate":0,"index":4679},{"krate":0,"index":4682},{"krate":0,"index":4690},{"krate":0,"index":4693},{"krate":0,"index":657},{"krate":0,"index":661},{"krate":0,"index":4697},{"krate":0,"index":4700},{"krate":0,"index":4708},{"krate":0,"index":4711},{"krate":0,"index":679},{"krate":0,"index":683},{"krate":0,"index":4715},{"krate":0,"index":4718},{"krate":0,"index":4726},{"krate":0,"index":4729},{"krate":0,"index":689}],"decl_id":null,"docs":" Hardcoded size-specfic FFT algorithms\n","sig":null,"attributes":[{"value":"/ Hardcoded size-specfic FFT algorithms","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mod.rs","byte_start":32573,"byte_end":32614,"line_start":8,"line_end":8,"column_start":1,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":476},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":121061,"byte_end":121071,"line_start":94,"line_end":94,"column_start":12,"column_end":22},"name":"Butterfly1","qualname":"::algorithm::butterflies::Butterfly1","value":"Butterfly1 {  }","parent":null,"children":[{"krate":0,"index":478},{"krate":0,"index":479}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":482},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":121216,"byte_end":121219,"line_start":100,"line_end":100,"column_start":12,"column_end":15},"name":"new","qualname":"<Butterfly1<T>>::new","value":"pub fn new(FftDirection) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":121187,"byte_end":121204,"line_start":99,"line_end":99,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":495},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":122059,"byte_end":122069,"line_start":138,"line_end":138,"column_start":12,"column_end":22},"name":"Butterfly2","qualname":"::algorithm::butterflies::Butterfly2","value":"Butterfly2 {  }","parent":null,"children":[{"krate":0,"index":497},{"krate":0,"index":498}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":501},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":122296,"byte_end":122299,"line_start":145,"line_end":145,"column_start":12,"column_end":15},"name":"new","qualname":"<Butterfly2<T>>::new","value":"pub fn new(FftDirection) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":122267,"byte_end":122284,"line_start":144,"line_end":144,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":504},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":122976,"byte_end":122986,"line_start":171,"line_end":171,"column_start":12,"column_end":22},"name":"Butterfly3","qualname":"::algorithm::butterflies::Butterfly3","value":"Butterfly3 { twiddle }","parent":null,"children":[{"krate":0,"index":506},{"krate":0,"index":507}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":506},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":123000,"byte_end":123007,"line_start":172,"line_end":172,"column_start":9,"column_end":16},"name":"twiddle","qualname":"::algorithm::butterflies::Butterfly3::twiddle","value":"num_complex::Complex<T>","parent":{"krate":0,"index":504},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":510},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":123199,"byte_end":123202,"line_start":178,"line_end":178,"column_start":12,"column_end":15},"name":"new","qualname":"<Butterfly3<T>>::new","value":"pub fn new(FftDirection) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":123170,"byte_end":123187,"line_start":177,"line_end":177,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":511},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":123390,"byte_end":123402,"line_start":185,"line_end":185,"column_start":12,"column_end":24},"name":"direction_of","qualname":"<Butterfly3<T>>::direction_of","value":"pub fn direction_of(&Butterfly3<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":123361,"byte_end":123378,"line_start":184,"line_end":184,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":513},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":124285,"byte_end":124295,"line_start":217,"line_end":217,"column_start":12,"column_end":22},"name":"Butterfly4","qualname":"::algorithm::butterflies::Butterfly4","value":"Butterfly4 {  }","parent":null,"children":[{"krate":0,"index":515},{"krate":0,"index":516}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":124522,"byte_end":124525,"line_start":224,"line_end":224,"column_start":12,"column_end":15},"name":"new","qualname":"<Butterfly4<T>>::new","value":"pub fn new(FftDirection) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":124493,"byte_end":124510,"line_start":223,"line_end":223,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":521},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":126015,"byte_end":126025,"line_start":266,"line_end":266,"column_start":12,"column_end":22},"name":"Butterfly5","qualname":"::algorithm::butterflies::Butterfly5","value":"Butterfly5 {  }","parent":null,"children":[{"krate":0,"index":523},{"krate":0,"index":524},{"krate":0,"index":525}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":126239,"byte_end":126242,"line_start":273,"line_end":273,"column_start":12,"column_end":15},"name":"new","qualname":"<Butterfly5<T>>::new","value":"pub fn new(FftDirection) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":530},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":132610,"byte_end":132620,"line_start":421,"line_end":421,"column_start":12,"column_end":22},"name":"Butterfly6","qualname":"::algorithm::butterflies::Butterfly6","value":"Butterfly6 {  }","parent":null,"children":[{"krate":0,"index":532}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":535},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":132833,"byte_end":132836,"line_start":429,"line_end":429,"column_start":12,"column_end":15},"name":"new","qualname":"<Butterfly6<T>>::new","value":"pub fn new(FftDirection) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":132804,"byte_end":132821,"line_start":428,"line_end":428,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":132988,"byte_end":133000,"line_start":435,"line_end":435,"column_start":12,"column_end":24},"name":"direction_of","qualname":"<Butterfly6<T>>::direction_of","value":"pub fn direction_of(&Butterfly6<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":132959,"byte_end":132976,"line_start":434,"line_end":434,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":538},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":134864,"byte_end":134874,"line_start":479,"line_end":479,"column_start":12,"column_end":22},"name":"Butterfly7","qualname":"::algorithm::butterflies::Butterfly7","value":"Butterfly7 {  }","parent":null,"children":[{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":543}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":546},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":135114,"byte_end":135117,"line_start":487,"line_end":487,"column_start":12,"column_end":15},"name":"new","qualname":"<Butterfly7<T>>::new","value":"pub fn new(FftDirection) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":548},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":142184,"byte_end":142194,"line_start":674,"line_end":674,"column_start":12,"column_end":22},"name":"Butterfly8","qualname":"::algorithm::butterflies::Butterfly8","value":"Butterfly8 {  }","parent":null,"children":[{"krate":0,"index":550},{"krate":0,"index":551}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":554},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":142392,"byte_end":142395,"line_start":681,"line_end":681,"column_start":12,"column_end":15},"name":"new","qualname":"<Butterfly8<T>>::new","value":"pub fn new(FftDirection) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":142363,"byte_end":142380,"line_start":680,"line_end":680,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":556},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":144101,"byte_end":144112,"line_start":729,"line_end":729,"column_start":12,"column_end":23},"name":"Butterfly11","qualname":"::algorithm::butterflies::Butterfly11","value":"Butterfly11 {  }","parent":null,"children":[{"krate":0,"index":558},{"krate":0,"index":559},{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":563}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":566},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":144408,"byte_end":144411,"line_start":739,"line_end":739,"column_start":12,"column_end":15},"name":"new","qualname":"<Butterfly11<T>>::new","value":"pub fn new(FftDirection) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":568},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":152905,"byte_end":152916,"line_start":982,"line_end":982,"column_start":12,"column_end":23},"name":"Butterfly13","qualname":"::algorithm::butterflies::Butterfly13","value":"Butterfly13 {  }","parent":null,"children":[{"krate":0,"index":570},{"krate":0,"index":571},{"krate":0,"index":572},{"krate":0,"index":573},{"krate":0,"index":574},{"krate":0,"index":575},{"krate":0,"index":576}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":579},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":153238,"byte_end":153241,"line_start":993,"line_end":993,"column_start":12,"column_end":15},"name":"new","qualname":"<Butterfly13<T>>::new","value":"pub fn new(FftDirection) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":581},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":164395,"byte_end":164406,"line_start":1303,"line_end":1303,"column_start":12,"column_end":23},"name":"Butterfly16","qualname":"::algorithm::butterflies::Butterfly16","value":"Butterfly16 {  }","parent":null,"children":[{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":585},{"krate":0,"index":586}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":589},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":164701,"byte_end":164704,"line_start":1314,"line_end":1314,"column_start":12,"column_end":15},"name":"new","qualname":"<Butterfly16<T>>::new","value":"pub fn new(FftDirection) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":164672,"byte_end":164689,"line_start":1313,"line_end":1313,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":591},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":168458,"byte_end":168469,"line_start":1394,"line_end":1394,"column_start":12,"column_end":23},"name":"Butterfly17","qualname":"::algorithm::butterflies::Butterfly17","value":"Butterfly17 {  }","parent":null,"children":[{"krate":0,"index":593},{"krate":0,"index":594},{"krate":0,"index":595},{"krate":0,"index":596},{"krate":0,"index":597},{"krate":0,"index":598},{"krate":0,"index":599},{"krate":0,"index":600},{"krate":0,"index":601}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":604},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":168843,"byte_end":168846,"line_start":1407,"line_end":1407,"column_start":12,"column_end":15},"name":"new","qualname":"<Butterfly17<T>>::new","value":"pub fn new(FftDirection) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":606},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":186348,"byte_end":186359,"line_start":1877,"line_end":1877,"column_start":12,"column_end":23},"name":"Butterfly19","qualname":"::algorithm::butterflies::Butterfly19","value":"Butterfly19 {  }","parent":null,"children":[{"krate":0,"index":608},{"krate":0,"index":609},{"krate":0,"index":610},{"krate":0,"index":611},{"krate":0,"index":612},{"krate":0,"index":613},{"krate":0,"index":614},{"krate":0,"index":615},{"krate":0,"index":616},{"krate":0,"index":617}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":620},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":186759,"byte_end":186762,"line_start":1891,"line_end":1891,"column_start":12,"column_end":15},"name":"new","qualname":"<Butterfly19<T>>::new","value":"pub fn new(FftDirection) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":622},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":207979,"byte_end":207990,"line_start":2454,"line_end":2454,"column_start":12,"column_end":23},"name":"Butterfly23","qualname":"::algorithm::butterflies::Butterfly23","value":"Butterfly23 {  }","parent":null,"children":[{"krate":0,"index":624},{"krate":0,"index":625},{"krate":0,"index":626},{"krate":0,"index":627},{"krate":0,"index":628},{"krate":0,"index":629},{"krate":0,"index":630},{"krate":0,"index":631},{"krate":0,"index":632},{"krate":0,"index":633},{"krate":0,"index":634},{"krate":0,"index":635}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":638},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":208444,"byte_end":208447,"line_start":2470,"line_end":2470,"column_start":12,"column_end":15},"name":"new","qualname":"<Butterfly23<T>>::new","value":"pub fn new(FftDirection) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":640},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":238306,"byte_end":238317,"line_start":3251,"line_end":3251,"column_start":12,"column_end":23},"name":"Butterfly29","qualname":"::algorithm::butterflies::Butterfly29","value":"Butterfly29 {  }","parent":null,"children":[{"krate":0,"index":642},{"krate":0,"index":643},{"krate":0,"index":644},{"krate":0,"index":645},{"krate":0,"index":646},{"krate":0,"index":647},{"krate":0,"index":648},{"krate":0,"index":649},{"krate":0,"index":650},{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":653},{"krate":0,"index":654},{"krate":0,"index":655},{"krate":0,"index":656}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":659},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":238852,"byte_end":238855,"line_start":3270,"line_end":3270,"column_start":12,"column_end":15},"name":"new","qualname":"<Butterfly29<T>>::new","value":"pub fn new(FftDirection) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":661},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":284183,"byte_end":284194,"line_start":4425,"line_end":4425,"column_start":12,"column_end":23},"name":"Butterfly31","qualname":"::algorithm::butterflies::Butterfly31","value":"Butterfly31 {  }","parent":null,"children":[{"krate":0,"index":663},{"krate":0,"index":664},{"krate":0,"index":665},{"krate":0,"index":666},{"krate":0,"index":667},{"krate":0,"index":668},{"krate":0,"index":669},{"krate":0,"index":670},{"krate":0,"index":671},{"krate":0,"index":672},{"krate":0,"index":673},{"krate":0,"index":674},{"krate":0,"index":675},{"krate":0,"index":676},{"krate":0,"index":677},{"krate":0,"index":678}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":681},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":284756,"byte_end":284759,"line_start":4445,"line_end":4445,"column_start":12,"column_end":15},"name":"new","qualname":"<Butterfly31<T>>::new","value":"pub fn new(FftDirection) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":683},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":335965,"byte_end":335976,"line_start":5741,"line_end":5741,"column_start":12,"column_end":23},"name":"Butterfly32","qualname":"::algorithm::butterflies::Butterfly32","value":"Butterfly32 {  }","parent":null,"children":[{"krate":0,"index":685},{"krate":0,"index":686},{"krate":0,"index":687}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":691},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":336235,"byte_end":336238,"line_start":5750,"line_end":5750,"column_start":12,"column_end":15},"name":"new","qualname":"<Butterfly32<T>>::new","value":"pub fn new(FftDirection) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":874},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":392385,"byte_end":392395,"line_start":58,"line_end":58,"column_start":12,"column_end":22},"name":"FftPlanner","qualname":"::plan::FftPlanner","value":"FftPlanner {  }","parent":null,"children":[{"krate":0,"index":876}],"decl_id":null,"docs":" The FFT planner creates new FFT algorithm instances.","sig":null,"attributes":[{"value":"/ The FFT planner creates new FFT algorithm instances.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":390510,"byte_end":390566,"line_start":23,"line_end":23,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":390567,"byte_end":390570,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ RustFFT has several FFT algorithms available. For a given FFT size, the `FftPlanner` decides which of the","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":390571,"byte_end":390680,"line_start":25,"line_end":25,"column_start":1,"column_end":110}},{"value":"/ available FFT algorithms to use and then initializes them.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":390681,"byte_end":390743,"line_start":26,"line_end":26,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":390744,"byte_end":390747,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ ~~~","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":390748,"byte_end":390755,"line_start":28,"line_end":28,"column_start":1,"column_end":8}},{"value":"/ // Perform a forward Fft of size 1234","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":390756,"byte_end":390797,"line_start":29,"line_end":29,"column_start":1,"column_end":42}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":390798,"byte_end":390821,"line_start":30,"line_end":30,"column_start":1,"column_end":24}},{"value":"/ use rustfft::{FftPlanner, num_complex::Complex};","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":390822,"byte_end":390874,"line_start":31,"line_end":31,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":390875,"byte_end":390878,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ let mut planner = FftPlanner::new();","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":390879,"byte_end":390919,"line_start":33,"line_end":33,"column_start":1,"column_end":41}},{"value":"/ let fft = planner.plan_fft_forward(1234);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":390920,"byte_end":390965,"line_start":34,"line_end":34,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":390966,"byte_end":390969,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ let mut buffer = vec![Complex{ re: 0.0f32, im: 0.0f32 }; 1234];","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":390970,"byte_end":391037,"line_start":36,"line_end":36,"column_start":1,"column_end":68}},{"value":"/ fft.process(&mut buffer);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":391038,"byte_end":391067,"line_start":37,"line_end":37,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":391068,"byte_end":391071,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ // The FFT instance returned by the planner has the type `Arc<dyn Fft<T>>`,","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":391072,"byte_end":391151,"line_start":39,"line_end":39,"column_start":1,"column_end":80}},{"value":"/ // where T is the numeric type, ie f32 or f64, so it's cheap to clone","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":391152,"byte_end":391225,"line_start":40,"line_end":40,"column_start":1,"column_end":74}},{"value":"/ let fft_clone = Arc::clone(&fft);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":391226,"byte_end":391263,"line_start":41,"line_end":41,"column_start":1,"column_end":38}},{"value":"/ ~~~","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":391264,"byte_end":391271,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":391272,"byte_end":391275,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ If you plan on creating multiple FFT instances, it is recommended to reuse the same planner for all of them. This","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":391276,"byte_end":391393,"line_start":44,"line_end":44,"column_start":1,"column_end":118}},{"value":"/ is because the planner re-uses internal data across FFT instances wherever possible, saving memory and reducing","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":391394,"byte_end":391509,"line_start":45,"line_end":45,"column_start":1,"column_end":116}},{"value":"/ setup time. (FFT instances created with one planner will never re-use data and buffers with FFT instances created","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":391510,"byte_end":391627,"line_start":46,"line_end":46,"column_start":1,"column_end":118}},{"value":"/ by a different planner)","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":391628,"byte_end":391655,"line_start":47,"line_end":47,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":391656,"byte_end":391659,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ Each FFT instance owns [`Arc`s](std::sync::Arc) to its internal data, rather than borrowing it from the planner, so it's perfectly","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":391660,"byte_end":391794,"line_start":49,"line_end":49,"column_start":1,"column_end":135}},{"value":"/ safe to drop the planner after creating Fft instances.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":391795,"byte_end":391853,"line_start":50,"line_end":50,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":391854,"byte_end":391857,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ In the constructor, the FftPlanner will detect available CPU features. If AVX is available, it will set itself up to plan AVX-accelerated FFTs.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":391858,"byte_end":392005,"line_start":52,"line_end":52,"column_start":1,"column_end":148}},{"value":"/ If AVX isn't available, the planner will seamlessly fall back to planning non-SIMD FFTs.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":392006,"byte_end":392098,"line_start":53,"line_end":53,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":392099,"byte_end":392102,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ If you'd prefer not to compute a FFT at all if AVX isn't available, consider creating a [`FftPlannerAvx`](crate::FftPlannerAvx) instead.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":392103,"byte_end":392243,"line_start":55,"line_end":55,"column_start":1,"column_end":141}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":392244,"byte_end":392247,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ If you'd prefer to opt out of SIMD algorithms, consider creating a [`FftPlannerScalar`](crate::FftPlannerScalar) instead.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":392248,"byte_end":392373,"line_start":57,"line_end":57,"column_start":1,"column_end":126}}]},{"kind":"Method","id":{"krate":0,"index":879},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":392540,"byte_end":392543,"line_start":63,"line_end":63,"column_start":12,"column_end":15},"name":"new","qualname":"<FftPlanner<T>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `FftPlanner` instance.\n","sig":null,"attributes":[{"value":"/ Creates a new `FftPlanner` instance.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":392488,"byte_end":392528,"line_start":62,"line_end":62,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":880},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":393455,"byte_end":393463,"line_start":84,"line_end":84,"column_start":12,"column_end":20},"name":"plan_fft","qualname":"<FftPlanner<T>>::plan_fft","value":"pub fn plan_fft(&mut Self, usize, FftDirection) -> Arc<dyn Fft<T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Fft` instance which computes FFTs of size `len`.","sig":null,"attributes":[{"value":"/ Returns a `Fft` instance which computes FFTs of size `len`.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":393031,"byte_end":393094,"line_start":79,"line_end":79,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":393099,"byte_end":393102,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ If the provided `direction` is `FftDirection::Forward`, the returned instance will compute forward FFTs. If it's `FftDirection::Inverse`, it will compute inverse FFTs.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":393107,"byte_end":393278,"line_start":81,"line_end":81,"column_start":5,"column_end":176}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":393283,"byte_end":393286,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ If this is called multiple times, the planner will attempt to re-use internal data between calls, reducing memory usage and FFT initialization time.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":393291,"byte_end":393443,"line_start":83,"line_end":83,"column_start":5,"column_end":157}}]},{"kind":"Method","id":{"krate":0,"index":881},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":394115,"byte_end":394131,"line_start":95,"line_end":95,"column_start":12,"column_end":28},"name":"plan_fft_forward","qualname":"<FftPlanner<T>>::plan_fft_forward","value":"pub fn plan_fft_forward(&mut Self, usize) -> Arc<dyn Fft<T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Fft` instance which computes forward FFTs of size `len`","sig":null,"attributes":[{"value":"/ Returns a `Fft` instance which computes forward FFTs of size `len`","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":393868,"byte_end":393938,"line_start":92,"line_end":92,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":393943,"byte_end":393946,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ If this is called multiple times, the planner will attempt to re-use internal data between calls, reducing memory usage and FFT initialization time.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":393951,"byte_end":394103,"line_start":94,"line_end":94,"column_start":5,"column_end":157}}]},{"kind":"Method","id":{"krate":0,"index":882},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":394484,"byte_end":394500,"line_start":102,"line_end":102,"column_start":12,"column_end":28},"name":"plan_fft_inverse","qualname":"<FftPlanner<T>>::plan_fft_inverse","value":"pub fn plan_fft_inverse(&mut Self, usize) -> Arc<dyn Fft<T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Fft` instance which computes inverse FFTs of size `len`","sig":null,"attributes":[{"value":"/ Returns a `Fft` instance which computes inverse FFTs of size `len`","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":394237,"byte_end":394307,"line_start":99,"line_end":99,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":394312,"byte_end":394315,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ If this is called multiple times, the planner will attempt to re-use internal data between calls, reducing memory usage and FFT initialization time.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":394320,"byte_end":394472,"line_start":101,"line_end":101,"column_start":5,"column_end":157}}]},{"kind":"Struct","id":{"krate":0,"index":888},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":399105,"byte_end":399121,"line_start":232,"line_end":232,"column_start":12,"column_end":28},"name":"FftPlannerScalar","qualname":"::plan::FftPlannerScalar","value":"FftPlannerScalar {  }","parent":null,"children":[{"krate":0,"index":890},{"krate":0,"index":891}],"decl_id":null,"docs":" The Scalar FFT planner creates new FFT algorithm instances using non-SIMD algorithms.","sig":null,"attributes":[{"value":"/ The Scalar FFT planner creates new FFT algorithm instances using non-SIMD algorithms.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":397502,"byte_end":397591,"line_start":202,"line_end":202,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":397592,"byte_end":397595,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ RustFFT has several FFT algorithms available. For a given FFT size, the `FftPlannerScalar` decides which of the","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":397596,"byte_end":397711,"line_start":204,"line_end":204,"column_start":1,"column_end":116}},{"value":"/ available FFT algorithms to use and then initializes them.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":397712,"byte_end":397774,"line_start":205,"line_end":205,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":397775,"byte_end":397778,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ Use `FftPlannerScalar` instead of [`FftPlanner`](crate::FftPlanner) or [`FftPlannerAvx`](crate::FftPlannerAvx) when you want to explicitly opt out of using any SIMD-accelerated algorithms.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":397779,"byte_end":397971,"line_start":207,"line_end":207,"column_start":1,"column_end":193}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":397972,"byte_end":397975,"line_start":208,"line_end":208,"column_start":1,"column_end":4}},{"value":"/ ~~~","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":397976,"byte_end":397983,"line_start":209,"line_end":209,"column_start":1,"column_end":8}},{"value":"/ // Perform a forward Fft of size 1234","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":397984,"byte_end":398025,"line_start":210,"line_end":210,"column_start":1,"column_end":42}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":398026,"byte_end":398049,"line_start":211,"line_end":211,"column_start":1,"column_end":24}},{"value":"/ use rustfft::{FftPlannerScalar, num_complex::Complex};","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":398050,"byte_end":398108,"line_start":212,"line_end":212,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":398109,"byte_end":398112,"line_start":213,"line_end":213,"column_start":1,"column_end":4}},{"value":"/ let mut planner = FftPlannerScalar::new();","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":398113,"byte_end":398159,"line_start":214,"line_end":214,"column_start":1,"column_end":47}},{"value":"/ let fft = planner.plan_fft_forward(1234);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":398160,"byte_end":398205,"line_start":215,"line_end":215,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":398206,"byte_end":398209,"line_start":216,"line_end":216,"column_start":1,"column_end":4}},{"value":"/ let mut buffer = vec![Complex{ re: 0.0f32, im: 0.0f32 }; 1234];","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":398210,"byte_end":398277,"line_start":217,"line_end":217,"column_start":1,"column_end":68}},{"value":"/ fft.process(&mut buffer);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":398278,"byte_end":398307,"line_start":218,"line_end":218,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":398308,"byte_end":398311,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ // The FFT instance returned by the planner has the type `Arc<dyn Fft<T>>`,","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":398312,"byte_end":398391,"line_start":220,"line_end":220,"column_start":1,"column_end":80}},{"value":"/ // where T is the numeric type, ie f32 or f64, so it's cheap to clone","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":398392,"byte_end":398465,"line_start":221,"line_end":221,"column_start":1,"column_end":74}},{"value":"/ let fft_clone = Arc::clone(&fft);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":398466,"byte_end":398503,"line_start":222,"line_end":222,"column_start":1,"column_end":38}},{"value":"/ ~~~","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":398504,"byte_end":398511,"line_start":223,"line_end":223,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":398512,"byte_end":398515,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ If you plan on creating multiple FFT instances, it is recommended to reuse the same planner for all of them. This","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":398516,"byte_end":398633,"line_start":225,"line_end":225,"column_start":1,"column_end":118}},{"value":"/ is because the planner re-uses internal data across FFT instances wherever possible, saving memory and reducing","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":398634,"byte_end":398749,"line_start":226,"line_end":226,"column_start":1,"column_end":116}},{"value":"/ setup time. (FFT instances created with one planner will never re-use data and buffers with FFT instances created","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":398750,"byte_end":398867,"line_start":227,"line_end":227,"column_start":1,"column_end":118}},{"value":"/ by a different planner)","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":398868,"byte_end":398895,"line_start":228,"line_end":228,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":398896,"byte_end":398899,"line_start":229,"line_end":229,"column_start":1,"column_end":4}},{"value":"/ Each FFT instance owns [`Arc`s](std::sync::Arc) to its internal data, rather than borrowing it from the planner, so it's perfectly","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":398900,"byte_end":399034,"line_start":230,"line_end":230,"column_start":1,"column_end":135}},{"value":"/ safe to drop the planner after creating Fft instances.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":399035,"byte_end":399093,"line_start":231,"line_end":231,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":894},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":399319,"byte_end":399322,"line_start":239,"line_end":239,"column_start":12,"column_end":15},"name":"new","qualname":"<FftPlannerScalar<T>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `FftPlannerScalar` instance.\n","sig":null,"attributes":[{"value":"/ Creates a new `FftPlannerScalar` instance.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":399261,"byte_end":399307,"line_start":238,"line_end":238,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":895},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":399883,"byte_end":399891,"line_start":251,"line_end":251,"column_start":12,"column_end":20},"name":"plan_fft","qualname":"<FftPlannerScalar<T>>::plan_fft","value":"pub fn plan_fft(&mut Self, usize, FftDirection) -> Arc<dyn Fft<T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Fft` instance which computes FFTs of size `len`.","sig":null,"attributes":[{"value":"/ Returns a `Fft` instance which computes FFTs of size `len`.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":399459,"byte_end":399522,"line_start":246,"line_end":246,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":399527,"byte_end":399530,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ If the provided `direction` is `FftDirection::Forward`, the returned instance will compute forward FFTs. If it's `FftDirection::Inverse`, it will compute inverse FFTs.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":399535,"byte_end":399706,"line_start":248,"line_end":248,"column_start":5,"column_end":176}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":399711,"byte_end":399714,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ If this is called multiple times, the planner will attempt to re-use internal data between calls, reducing memory usage and FFT initialization time.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":399719,"byte_end":399871,"line_start":250,"line_end":250,"column_start":5,"column_end":157}}]},{"kind":"Method","id":{"krate":0,"index":896},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":400497,"byte_end":400513,"line_start":262,"line_end":262,"column_start":12,"column_end":28},"name":"plan_fft_forward","qualname":"<FftPlannerScalar<T>>::plan_fft_forward","value":"pub fn plan_fft_forward(&mut Self, usize) -> Arc<dyn Fft<T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Fft` instance which computes forward FFTs of size `len`","sig":null,"attributes":[{"value":"/ Returns a `Fft` instance which computes forward FFTs of size `len`","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":400250,"byte_end":400320,"line_start":259,"line_end":259,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":400325,"byte_end":400328,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ If this is called multiple times, the planner will attempt to re-use internal data between calls, reducing memory usage and FFT initialization time.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":400333,"byte_end":400485,"line_start":261,"line_end":261,"column_start":5,"column_end":157}}]},{"kind":"Method","id":{"krate":0,"index":897},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":400866,"byte_end":400882,"line_start":269,"line_end":269,"column_start":12,"column_end":28},"name":"plan_fft_inverse","qualname":"<FftPlannerScalar<T>>::plan_fft_inverse","value":"pub fn plan_fft_inverse(&mut Self, usize) -> Arc<dyn Fft<T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Fft` instance which computes inverse FFTs of size `len`","sig":null,"attributes":[{"value":"/ Returns a `Fft` instance which computes inverse FFTs of size `len`","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":400619,"byte_end":400689,"line_start":266,"line_end":266,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":400694,"byte_end":400697,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ If this is called multiple times, the planner will attempt to re-use internal data between calls, reducing memory usage and FFT initialization time.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":400702,"byte_end":400854,"line_start":268,"line_end":268,"column_start":5,"column_end":157}}]},{"kind":"Trait","id":{"krate":0,"index":946},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":6465,"byte_end":6471,"line_start":124,"line_end":124,"column_start":11,"column_end":17},"name":"Length","qualname":"::Length","value":"Length","parent":null,"children":[{"krate":0,"index":947}],"decl_id":null,"docs":" A trait that allows FFT algorithms to report their expected input/output size\n","sig":null,"attributes":[{"value":"/ A trait that allows FFT algorithms to report their expected input/output size","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":6373,"byte_end":6454,"line_start":123,"line_end":123,"column_start":1,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":947},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":6534,"byte_end":6537,"line_start":126,"line_end":126,"column_start":8,"column_end":11},"name":"len","qualname":"::Length::len","value":"pub fn len(&Self) -> usize","parent":{"krate":0,"index":946},"children":[],"decl_id":null,"docs":" The FFT size that this algorithm can process\n","sig":null,"attributes":[{"value":"/ The FFT size that this algorithm can process","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":6478,"byte_end":6526,"line_start":125,"line_end":125,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4854},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":6698,"byte_end":6705,"line_start":132,"line_end":132,"column_start":5,"column_end":12},"name":"Forward","qualname":"::FftDirection::Forward","value":"FftDirection::Forward","parent":{"krate":0,"index":4853},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4856},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":6711,"byte_end":6718,"line_start":133,"line_end":133,"column_start":5,"column_end":12},"name":"Inverse","qualname":"::FftDirection::Inverse","value":"FftDirection::Inverse","parent":{"krate":0,"index":4853},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4853},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":6679,"byte_end":6691,"line_start":131,"line_end":131,"column_start":10,"column_end":22},"name":"FftDirection","qualname":"::FftDirection","value":"pub enum FftDirection { Forward, Inverse, }","parent":null,"children":[{"krate":0,"index":4854},{"krate":0,"index":4856}],"decl_id":null,"docs":" Represents a FFT direction, IE a forward FFT or an inverse FFT\n","sig":null,"attributes":[{"value":"/ Represents a FFT direction, IE a forward FFT or an inverse FFT","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":6558,"byte_end":6624,"line_start":129,"line_end":129,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":949},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":6987,"byte_end":7005,"line_start":141,"line_end":141,"column_start":12,"column_end":30},"name":"opposite_direction","qualname":"<FftDirection>::opposite_direction","value":"pub fn opposite_direction(&Self) -> FftDirection","parent":null,"children":[],"decl_id":null,"docs":" Returns the opposite direction of `self`.","sig":null,"attributes":[{"value":"/ Returns the opposite direction of `self`.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":6746,"byte_end":6791,"line_start":136,"line_end":136,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":6796,"byte_end":6799,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/  - If `self` is `FftDirection::Forward`, returns `FftDirection::Inverse`","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":6804,"byte_end":6880,"line_start":138,"line_end":138,"column_start":5,"column_end":81}},{"value":"/  - If `self` is `FftDirection::Inverse`, returns `FftDirection::Forward`","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":6885,"byte_end":6961,"line_start":139,"line_end":139,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":6966,"byte_end":6975,"line_start":140,"line_end":140,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":952},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":7529,"byte_end":7538,"line_start":158,"line_end":158,"column_start":11,"column_end":20},"name":"Direction","qualname":"::Direction","value":"Direction","parent":null,"children":[{"krate":0,"index":953}],"decl_id":null,"docs":" A trait that allows FFT algorithms to report whether they compute forward FFTs or inverse FFTs\n","sig":null,"attributes":[{"value":"/ A trait that allows FFT algorithms to report whether they compute forward FFTs or inverse FFTs","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":7420,"byte_end":7518,"line_start":157,"line_end":157,"column_start":1,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":953},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":7668,"byte_end":7681,"line_start":160,"line_end":160,"column_start":8,"column_end":21},"name":"fft_direction","qualname":"::Direction::fft_direction","value":"pub fn fft_direction(&Self) -> FftDirection","parent":{"krate":0,"index":952},"children":[],"decl_id":null,"docs":" Returns FftDirection::Forward if this instance computes forward FFTs, or FftDirection::Inverse for inverse FFTs\n","sig":null,"attributes":[{"value":"/ Returns FftDirection::Forward if this instance computes forward FFTs, or FftDirection::Inverse for inverse FFTs","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":7545,"byte_end":7660,"line_start":159,"line_end":159,"column_start":5,"column_end":120}}]},{"kind":"Trait","id":{"krate":0,"index":954},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":8134,"byte_end":8137,"line_start":168,"line_end":168,"column_start":11,"column_end":14},"name":"Fft","qualname":"::Fft","value":"Fft<T: FftNum>: Length + Direction + Sync + Send","parent":null,"children":[{"krate":0,"index":956},{"krate":0,"index":957},{"krate":0,"index":958},{"krate":0,"index":959},{"krate":0,"index":960}],"decl_id":null,"docs":" Trait for algorithms that compute FFTs.","sig":null,"attributes":[{"value":"/ Trait for algorithms that compute FFTs.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":7709,"byte_end":7752,"line_start":163,"line_end":163,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":7753,"byte_end":7756,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ This trait has a few methods for computing FFTs. Its most conveinent method is [`process(slice)`](crate::Fft::process).","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":7757,"byte_end":7880,"line_start":165,"line_end":165,"column_start":1,"column_end":124}},{"value":"/ It takes in a slice of `Complex<T>` and computes a FFT on that slice, in-place. It may copy the data over to internal scratch buffers","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":7881,"byte_end":8018,"line_start":166,"line_end":166,"column_start":1,"column_end":138}},{"value":"/ if that speeds up the computation, but the output will always end up in the same slice as the input.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":8019,"byte_end":8123,"line_start":167,"line_end":167,"column_start":1,"column_end":105}}]},{"kind":"Method","id":{"krate":0,"index":956},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":8627,"byte_end":8634,"line_start":179,"line_end":179,"column_start":8,"column_end":15},"name":"process","qualname":"::Fft::process","value":"pub fn process(&Self, &mut [Complex<T>])","parent":{"krate":0,"index":954},"children":[],"decl_id":null,"docs":" Computes a FFT in-place.","sig":null,"attributes":[{"value":"/ Computes a FFT in-place.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":8189,"byte_end":8217,"line_start":169,"line_end":169,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":8222,"byte_end":8225,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ Convenience method that allocates a `Vec` with the required scratch space and calls `self.process_with_scratch`.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":8230,"byte_end":8346,"line_start":171,"line_end":171,"column_start":5,"column_end":121}},{"value":"/ If you want to re-use that allocation across multiple FFT computations, consider calling `process_with_scratch` instead.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":8351,"byte_end":8475,"line_start":172,"line_end":172,"column_start":5,"column_end":129}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":8480,"byte_end":8483,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":8488,"byte_end":8500,"line_start":174,"line_end":174,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":8505,"byte_end":8508,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ This method panics if:","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":8513,"byte_end":8539,"line_start":176,"line_end":176,"column_start":5,"column_end":31}},{"value":"/ - `buffer.len() % self.len() > 0`","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":8544,"byte_end":8581,"line_start":177,"line_end":177,"column_start":5,"column_end":42}},{"value":"/ - `buffer.len() < self.len()`","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":8586,"byte_end":8619,"line_start":178,"line_end":178,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":957},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":9260,"byte_end":9280,"line_start":195,"line_end":195,"column_start":8,"column_end":28},"name":"process_with_scratch","qualname":"::Fft::process_with_scratch","value":"pub fn process_with_scratch(&Self, &mut [Complex<T>], &mut [Complex<T>])","parent":{"krate":0,"index":954},"children":[],"decl_id":null,"docs":" Divides `buffer` into chunks of size `self.len()`, and computes a FFT on each chunk.","sig":null,"attributes":[{"value":"/ Divides `buffer` into chunks of size `self.len()`, and computes a FFT on each chunk.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":8820,"byte_end":8908,"line_start":184,"line_end":184,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":8913,"byte_end":8916,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ Uses the `scratch` buffer as scratch space, so the contents of `scratch` should be considered garbage","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":8921,"byte_end":9026,"line_start":186,"line_end":186,"column_start":5,"column_end":110}},{"value":"/ after calling.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":9031,"byte_end":9049,"line_start":187,"line_end":187,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":9054,"byte_end":9057,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":9062,"byte_end":9074,"line_start":189,"line_end":189,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":9079,"byte_end":9082,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ This method panics if:","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":9087,"byte_end":9113,"line_start":191,"line_end":191,"column_start":5,"column_end":31}},{"value":"/ - `buffer.len() % self.len() > 0`","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":9118,"byte_end":9155,"line_start":192,"line_end":192,"column_start":5,"column_end":42}},{"value":"/ - `buffer.len() < self.len()`","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":9160,"byte_end":9193,"line_start":193,"line_end":193,"column_start":5,"column_end":38}},{"value":"/ - `scratch.len() < self.get_inplace_scratch_len()`","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":9198,"byte_end":9252,"line_start":194,"line_end":194,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":958},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":10247,"byte_end":10278,"line_start":215,"line_end":215,"column_start":8,"column_end":39},"name":"process_outofplace_with_scratch","qualname":"::Fft::process_outofplace_with_scratch","value":"pub fn process_outofplace_with_scratch(&Self, &mut [Complex<T>],\n                                       &mut [Complex<T>], &mut [Complex<T>])","parent":{"krate":0,"index":954},"children":[],"decl_id":null,"docs":" Divides `input` and `output` into chunks of size `self.len()`, and computes a FFT on each chunk.","sig":null,"attributes":[{"value":"/ Divides `input` and `output` into chunks of size `self.len()`, and computes a FFT on each chunk.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":9349,"byte_end":9449,"line_start":197,"line_end":197,"column_start":5,"column_end":105}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":9454,"byte_end":9457,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ This method uses both the `input` buffer and `scratch` buffer as scratch space, so the contents of both should be","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":9462,"byte_end":9579,"line_start":199,"line_end":199,"column_start":5,"column_end":122}},{"value":"/ considered garbage after calling.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":9584,"byte_end":9621,"line_start":200,"line_end":200,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":9626,"byte_end":9629,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ This is a more niche way of computing a FFT. It's useful to avoid a `copy_from_slice()` if you need the output","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":9634,"byte_end":9748,"line_start":202,"line_end":202,"column_start":5,"column_end":119}},{"value":"/ in a different buffer than the input for some reason. This happens frequently in RustFFT internals, but is probably","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":9753,"byte_end":9872,"line_start":203,"line_end":203,"column_start":5,"column_end":124}},{"value":"/ less common among RustFFT users.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":9877,"byte_end":9913,"line_start":204,"line_end":204,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":9918,"byte_end":9921,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ For many FFT sizes, `self.get_outofplace_scratch_len()` returns 0","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":9926,"byte_end":9995,"line_start":206,"line_end":206,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":10000,"byte_end":10003,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":10008,"byte_end":10020,"line_start":208,"line_end":208,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":10025,"byte_end":10028,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ This method panics if:","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":10033,"byte_end":10059,"line_start":210,"line_end":210,"column_start":5,"column_end":31}},{"value":"/ - `output.len() != input.len()`","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":10064,"byte_end":10099,"line_start":211,"line_end":211,"column_start":5,"column_end":40}},{"value":"/ - `input.len() % self.len() > 0`","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":10104,"byte_end":10140,"line_start":212,"line_end":212,"column_start":5,"column_end":41}},{"value":"/ - `input.len() < self.len()`","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":10145,"byte_end":10177,"line_start":213,"line_end":213,"column_start":5,"column_end":37}},{"value":"/ - `scratch.len() < self.get_outofplace_scratch_len()`","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":10182,"byte_end":10239,"line_start":214,"line_end":214,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":959},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":10841,"byte_end":10864,"line_start":227,"line_end":227,"column_start":8,"column_end":31},"name":"get_inplace_scratch_len","qualname":"::Fft::get_inplace_scratch_len","value":"pub fn get_inplace_scratch_len(&Self) -> usize","parent":{"krate":0,"index":954},"children":[],"decl_id":null,"docs":" Returns the size of the scratch buffer required by `process_with_scratch`","sig":null,"attributes":[{"value":"/ Returns the size of the scratch buffer required by `process_with_scratch`","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":10412,"byte_end":10489,"line_start":222,"line_end":222,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":10494,"byte_end":10497,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ For most FFT sizes, this method will return `self.len()`. For a few small sizes it will return 0, and for some special FFT sizes","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":10502,"byte_end":10634,"line_start":224,"line_end":224,"column_start":5,"column_end":137}},{"value":"/ (Sizes that require the use of Bluestein's Algorithm), this may return a scratch size larger than `self.len()`.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":10639,"byte_end":10754,"line_start":225,"line_end":225,"column_start":5,"column_end":120}},{"value":"/ The returned value may change from one version of RustFFT to the next.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":10759,"byte_end":10833,"line_start":226,"line_end":226,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":960},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":11272,"byte_end":11298,"line_start":234,"line_end":234,"column_start":8,"column_end":34},"name":"get_outofplace_scratch_len","qualname":"::Fft::get_outofplace_scratch_len","value":"pub fn get_outofplace_scratch_len(&Self) -> usize","parent":{"krate":0,"index":954},"children":[],"decl_id":null,"docs":" Returns the size of the scratch buffer required by `process_outofplace_with_scratch`","sig":null,"attributes":[{"value":"/ Returns the size of the scratch buffer required by `process_outofplace_with_scratch`","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":10887,"byte_end":10975,"line_start":229,"line_end":229,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":10980,"byte_end":10983,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ For most FFT sizes, this method will return 0. For some special FFT sizes","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":10988,"byte_end":11065,"line_start":231,"line_end":231,"column_start":5,"column_end":82}},{"value":"/ (Sizes that require the use of Bluestein's Algorithm), this may return a scratch size larger than `self.len()`.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":11070,"byte_end":11185,"line_start":232,"line_end":232,"column_start":5,"column_end":120}},{"value":"/ The returned value may change from one version of RustFFT to the next.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":11190,"byte_end":11264,"line_start":233,"line_end":233,"column_start":5,"column_end":79}}]},{"kind":"Type","id":{"krate":0,"index":983},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/mod.rs","byte_start":423598,"byte_end":423608,"line_start":6,"line_end":6,"column_start":10,"column_end":20},"name":"VectorType","qualname":"::avx::AvxNum::VectorType","value":"type VectorType: AvxVector256<ScalarType = Self>;","parent":{"krate":0,"index":982},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1121},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_vector.rs","byte_start":462857,"byte_end":462867,"line_start":491,"line_end":491,"column_start":10,"column_end":20},"name":"HalfVector","qualname":"::avx::avx_vector::AvxVector256::HalfVector","value":"type HalfVector: AvxVector128<FullVector = Self>;","parent":{"krate":0,"index":1120},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1122},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_vector.rs","byte_start":462911,"byte_end":462921,"line_start":492,"line_end":492,"column_start":10,"column_end":20},"name":"ScalarType","qualname":"::avx::avx_vector::AvxVector256::ScalarType","value":"type ScalarType: AvxNum<VectorType = Self>;","parent":{"krate":0,"index":1120},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1150},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_vector.rs","byte_start":469142,"byte_end":469152,"line_start":619,"line_end":619,"column_start":10,"column_end":20},"name":"FullVector","qualname":"::avx::avx_vector::AvxVector128::FullVector","value":"type FullVector: AvxVector256<HalfVector = Self>;","parent":{"krate":0,"index":1149},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2724},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":815414,"byte_end":815427,"line_start":113,"line_end":113,"column_start":12,"column_end":25},"name":"FftPlannerAvx","qualname":"::avx::avx_planner::FftPlannerAvx","value":"FftPlannerAvx {  }","parent":null,"children":[{"krate":0,"index":2726}],"decl_id":null,"docs":" The AVX FFT planner creates new FFT algorithm instances which take advantage of the AVX instruction set.","sig":null,"attributes":[{"value":"/ The AVX FFT planner creates new FFT algorithm instances which take advantage of the AVX instruction set.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":813529,"byte_end":813637,"line_start":80,"line_end":80,"column_start":1,"column_end":109}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":813638,"byte_end":813641,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ Creating an instance of `FftPlannerAvx` requires the `avx` and `fma` instructions to be available on the current machine, and it requires RustFFT's","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":813642,"byte_end":813793,"line_start":82,"line_end":82,"column_start":1,"column_end":152}},{"value":"/  `avx` feature flag to be set. A few algorithms will use `avx2` if it's available, but it isn't required.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":813794,"byte_end":813903,"line_start":83,"line_end":83,"column_start":1,"column_end":110}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":813904,"byte_end":813907,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ For the time being, AVX acceleration is black box, and AVX accelerated algorithms are not available without a planner. This may change in the future.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":813908,"byte_end":814061,"line_start":85,"line_end":85,"column_start":1,"column_end":154}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":814062,"byte_end":814065,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ ~~~","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":814066,"byte_end":814073,"line_start":87,"line_end":87,"column_start":1,"column_end":8}},{"value":"/ // Perform a forward Fft of size 1234, accelerated by AVX","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":814074,"byte_end":814135,"line_start":88,"line_end":88,"column_start":1,"column_end":62}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":814136,"byte_end":814159,"line_start":89,"line_end":89,"column_start":1,"column_end":24}},{"value":"/ use rustfft::{FftPlannerAvx, num_complex::Complex};","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":814160,"byte_end":814215,"line_start":90,"line_end":90,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":814216,"byte_end":814219,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ // If FftPlannerAvx::new() returns Ok(), we'll know AVX algorithms are available","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":814220,"byte_end":814304,"line_start":92,"line_end":92,"column_start":1,"column_end":85}},{"value":"/ // on this machine, and that RustFFT was compiled with the `avx` feature flag","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":814305,"byte_end":814386,"line_start":93,"line_end":93,"column_start":1,"column_end":82}},{"value":"/ if let Ok(mut planner) = FftPlannerAvx::new() {","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":814387,"byte_end":814438,"line_start":94,"line_end":94,"column_start":1,"column_end":52}},{"value":"/     let fft = planner.plan_fft_forward(1234);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":814439,"byte_end":814488,"line_start":95,"line_end":95,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":814489,"byte_end":814492,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/     let mut buffer = vec![Complex{ re: 0.0f32, im: 0.0f32 }; 1234];","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":814493,"byte_end":814564,"line_start":97,"line_end":97,"column_start":1,"column_end":72}},{"value":"/     fft.process(&mut buffer);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":814565,"byte_end":814598,"line_start":98,"line_end":98,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":814599,"byte_end":814602,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/     // The FFT instance returned by the planner has the type `Arc<dyn Fft<T>>`,","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":814603,"byte_end":814686,"line_start":100,"line_end":100,"column_start":1,"column_end":84}},{"value":"/     // where T is the numeric type, ie f32 or f64, so it's cheap to clone","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":814687,"byte_end":814764,"line_start":101,"line_end":101,"column_start":1,"column_end":78}},{"value":"/     let fft_clone = Arc::clone(&fft);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":814765,"byte_end":814806,"line_start":102,"line_end":102,"column_start":1,"column_end":42}},{"value":"/ }","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":814807,"byte_end":814812,"line_start":103,"line_end":103,"column_start":1,"column_end":6}},{"value":"/ ~~~","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":814813,"byte_end":814820,"line_start":104,"line_end":104,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":814821,"byte_end":814824,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ If you plan on creating multiple FFT instances, it is recommended to reuse the same planner for all of them. This","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":814825,"byte_end":814942,"line_start":106,"line_end":106,"column_start":1,"column_end":118}},{"value":"/ is because the planner re-uses internal data across FFT instances wherever possible, saving memory and reducing","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":814943,"byte_end":815058,"line_start":107,"line_end":107,"column_start":1,"column_end":116}},{"value":"/ setup time. (FFT instances created with one planner will never re-use data and buffers with FFT instances created","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":815059,"byte_end":815176,"line_start":108,"line_end":108,"column_start":1,"column_end":118}},{"value":"/ by a different planner)","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":815177,"byte_end":815204,"line_start":109,"line_end":109,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":815205,"byte_end":815208,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ Each FFT instance owns [`Arc`s](std::sync::Arc) to its internal data, rather than borrowing it from the planner, so it's perfectly","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":815209,"byte_end":815343,"line_start":111,"line_end":111,"column_start":1,"column_end":135}},{"value":"/ safe to drop the planner after creating Fft instances.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":815344,"byte_end":815402,"line_start":112,"line_end":112,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":2729},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":815834,"byte_end":815837,"line_start":121,"line_end":121,"column_start":12,"column_end":15},"name":"new","qualname":"<FftPlannerAvx<T>>::new","value":"pub fn new() -> Result<Self, ()>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `FftPlannerAvx` instance.","sig":null,"attributes":[{"value":"/ Constructs a new `FftPlannerAvx` instance.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":815539,"byte_end":815585,"line_start":117,"line_end":117,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":815590,"byte_end":815593,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ Returns `Ok(planner_instance)` if this machine has the required instruction sets and the `avx` feature flag is set.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":815598,"byte_end":815717,"line_start":119,"line_end":119,"column_start":5,"column_end":124}},{"value":"/ Returns `Err(())` if some instruction sets are missing, or if the `avx` feature flag is not set.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":815722,"byte_end":815822,"line_start":120,"line_end":120,"column_start":5,"column_end":105}}]},{"kind":"Method","id":{"krate":0,"index":2730},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":819414,"byte_end":819422,"line_start":171,"line_end":171,"column_start":12,"column_end":20},"name":"plan_fft","qualname":"<FftPlannerAvx<T>>::plan_fft","value":"pub fn plan_fft(&mut Self, usize, FftDirection) -> Arc<dyn Fft<T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Fft` instance which uses AVX instructions to compute FFTs of size `len`.","sig":null,"attributes":[{"value":"/ Returns a `Fft` instance which uses AVX instructions to compute FFTs of size `len`.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":818966,"byte_end":819053,"line_start":166,"line_end":166,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":819058,"byte_end":819061,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ If the provided `direction` is `FftDirection::Forward`, the returned instance will compute forward FFTs. If it's `FftDirection::Inverse`, it will compute inverse FFTs.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":819066,"byte_end":819237,"line_start":168,"line_end":168,"column_start":5,"column_end":176}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":819242,"byte_end":819245,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ If this is called multiple times, the planner will attempt to re-use internal data between calls, reducing memory usage and FFT initialization time.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":819250,"byte_end":819402,"line_start":170,"line_end":170,"column_start":5,"column_end":157}}]},{"kind":"Method","id":{"krate":0,"index":2731},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":819843,"byte_end":819859,"line_start":177,"line_end":177,"column_start":12,"column_end":28},"name":"plan_fft_forward","qualname":"<FftPlannerAvx<T>>::plan_fft_forward","value":"pub fn plan_fft_forward(&mut Self, usize) -> Arc<dyn Fft<T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Fft` instance which uses AVX instructions to compute forward FFTs of size `len`.","sig":null,"attributes":[{"value":"/ Returns a `Fft` instance which uses AVX instructions to compute forward FFTs of size `len`.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":819571,"byte_end":819666,"line_start":174,"line_end":174,"column_start":5,"column_end":100}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":819671,"byte_end":819674,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ If this is called multiple times, the planner will attempt to re-use internal data between calls, reducing memory usage and FFT initialization time.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":819679,"byte_end":819831,"line_start":176,"line_end":176,"column_start":5,"column_end":157}}]},{"kind":"Method","id":{"krate":0,"index":2732},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":820235,"byte_end":820251,"line_start":183,"line_end":183,"column_start":12,"column_end":28},"name":"plan_fft_inverse","qualname":"<FftPlannerAvx<T>>::plan_fft_inverse","value":"pub fn plan_fft_inverse(&mut Self, usize) -> Arc<dyn Fft<T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Fft` instance which uses AVX instructions to compute inverse FFTs of size `len.","sig":null,"attributes":[{"value":"/ Returns a `Fft` instance which uses AVX instructions to compute inverse FFTs of size `len.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":819964,"byte_end":820058,"line_start":180,"line_end":180,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":820063,"byte_end":820066,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ If this is called multiple times, the planner will attempt to re-use internal data between calls, reducing memory usage and FFT initialization time.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":820071,"byte_end":820223,"line_start":182,"line_end":182,"column_start":5,"column_end":157}}]},{"kind":"Type","id":{"krate":0,"index":2976},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_vector.rs","byte_start":884320,"byte_end":884330,"line_start":129,"line_end":129,"column_start":10,"column_end":20},"name":"VectorType","qualname":"::sse::sse_vector::SseArray::VectorType","value":"type VectorType;","parent":{"krate":0,"index":2975},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2994},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_vector.rs","byte_start":886588,"byte_end":886598,"line_start":187,"line_end":187,"column_start":10,"column_end":20},"name":"VectorType","qualname":"::sse::sse_vector::SseArrayMut::VectorType","value":"type VectorType;","parent":{"krate":0,"index":2993},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4287},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1393811,"byte_end":1393824,"line_start":152,"line_end":152,"column_start":12,"column_end":25},"name":"FftPlannerSse","qualname":"::sse::sse_planner::FftPlannerSse","value":"FftPlannerSse {  }","parent":null,"children":[{"krate":0,"index":4289},{"krate":0,"index":4290}],"decl_id":null,"docs":" The SSE FFT planner creates new FFT algorithm instances using a mix of scalar and SSE accelerated algorithms.\n It requires at least SSE4.1, which is available on all reasonably recent x86_64 cpus.","sig":null,"attributes":[{"value":"/ The SSE FFT planner creates new FFT algorithm instances using a mix of scalar and SSE accelerated algorithms.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1392274,"byte_end":1392387,"line_start":122,"line_end":122,"column_start":1,"column_end":114}},{"value":"/ It requires at least SSE4.1, which is available on all reasonably recent x86_64 cpus.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1392388,"byte_end":1392477,"line_start":123,"line_end":123,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1392478,"byte_end":1392481,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ RustFFT has several FFT algorithms available. For a given FFT size, the `FftPlannerSse` decides which of the","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1392482,"byte_end":1392594,"line_start":125,"line_end":125,"column_start":1,"column_end":113}},{"value":"/ available FFT algorithms to use and then initializes them.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1392595,"byte_end":1392657,"line_start":126,"line_end":126,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1392658,"byte_end":1392661,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ ~~~","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1392662,"byte_end":1392669,"line_start":128,"line_end":128,"column_start":1,"column_end":8}},{"value":"/ // Perform a forward Fft of size 1234","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1392670,"byte_end":1392711,"line_start":129,"line_end":129,"column_start":1,"column_end":42}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1392712,"byte_end":1392735,"line_start":130,"line_end":130,"column_start":1,"column_end":24}},{"value":"/ use rustfft::{FftPlannerSse, num_complex::Complex};","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1392736,"byte_end":1392791,"line_start":131,"line_end":131,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1392792,"byte_end":1392795,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ if let Ok(mut planner) = FftPlannerSse::new() {","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1392796,"byte_end":1392847,"line_start":133,"line_end":133,"column_start":1,"column_end":52}},{"value":"/   let fft = planner.plan_fft_forward(1234);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1392848,"byte_end":1392895,"line_start":134,"line_end":134,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1392896,"byte_end":1392899,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/   let mut buffer = vec![Complex{ re: 0.0f32, im: 0.0f32 }; 1234];","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1392900,"byte_end":1392969,"line_start":136,"line_end":136,"column_start":1,"column_end":70}},{"value":"/   fft.process(&mut buffer);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1392970,"byte_end":1393001,"line_start":137,"line_end":137,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1393002,"byte_end":1393005,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/   // The FFT instance returned by the planner has the type `Arc<dyn Fft<T>>`,","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1393006,"byte_end":1393087,"line_start":139,"line_end":139,"column_start":1,"column_end":82}},{"value":"/   // where T is the numeric type, ie f32 or f64, so it's cheap to clone","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1393088,"byte_end":1393163,"line_start":140,"line_end":140,"column_start":1,"column_end":76}},{"value":"/   let fft_clone = Arc::clone(&fft);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1393164,"byte_end":1393203,"line_start":141,"line_end":141,"column_start":1,"column_end":40}},{"value":"/ }","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1393204,"byte_end":1393209,"line_start":142,"line_end":142,"column_start":1,"column_end":6}},{"value":"/ ~~~","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1393210,"byte_end":1393217,"line_start":143,"line_end":143,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1393218,"byte_end":1393221,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ If you plan on creating multiple FFT instances, it is recommended to reuse the same planner for all of them. This","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1393222,"byte_end":1393339,"line_start":145,"line_end":145,"column_start":1,"column_end":118}},{"value":"/ is because the planner re-uses internal data across FFT instances wherever possible, saving memory and reducing","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1393340,"byte_end":1393455,"line_start":146,"line_end":146,"column_start":1,"column_end":116}},{"value":"/ setup time. (FFT instances created with one planner will never re-use data and buffers with FFT instances created","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1393456,"byte_end":1393573,"line_start":147,"line_end":147,"column_start":1,"column_end":118}},{"value":"/ by a different planner)","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1393574,"byte_end":1393601,"line_start":148,"line_end":148,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1393602,"byte_end":1393605,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ Each FFT instance owns [`Arc`s](std::sync::Arc) to its internal data, rather than borrowing it from the planner, so it's perfectly","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1393606,"byte_end":1393740,"line_start":150,"line_end":150,"column_start":1,"column_end":135}},{"value":"/ safe to drop the planner after creating Fft instances.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1393741,"byte_end":1393799,"line_start":151,"line_end":151,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":4293},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1394178,"byte_end":1394181,"line_start":162,"line_end":162,"column_start":12,"column_end":15},"name":"new","qualname":"<FftPlannerSse<T>>::new","value":"pub fn new() -> Result<Self, ()>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `FftPlannerSse` instance.","sig":null,"attributes":[{"value":"/ Creates a new `FftPlannerSse` instance.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1393961,"byte_end":1394004,"line_start":158,"line_end":158,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1394009,"byte_end":1394012,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ Returns `Ok(planner_instance)` if this machine has the required instruction sets.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1394017,"byte_end":1394102,"line_start":160,"line_end":160,"column_start":5,"column_end":90}},{"value":"/ Returns `Err(())` if some instruction sets are missing.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1394107,"byte_end":1394166,"line_start":161,"line_end":161,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":4294},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1396375,"byte_end":1396383,"line_start":196,"line_end":196,"column_start":12,"column_end":20},"name":"plan_fft","qualname":"<FftPlannerSse<T>>::plan_fft","value":"pub fn plan_fft(&mut Self, usize, FftDirection) -> Arc<dyn Fft<T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Fft` instance which uses SSE4.1 instructions to compute FFTs of size `len`.","sig":null,"attributes":[{"value":"/ Returns a `Fft` instance which uses SSE4.1 instructions to compute FFTs of size `len`.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1395924,"byte_end":1396014,"line_start":191,"line_end":191,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1396019,"byte_end":1396022,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ If the provided `direction` is `FftDirection::Forward`, the returned instance will compute forward FFTs. If it's `FftDirection::Inverse`, it will compute inverse FFTs.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1396027,"byte_end":1396198,"line_start":193,"line_end":193,"column_start":5,"column_end":176}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1396203,"byte_end":1396206,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ If this is called multiple times, the planner will attempt to re-use internal data between calls, reducing memory usage and FFT initialization time.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1396211,"byte_end":1396363,"line_start":195,"line_end":195,"column_start":5,"column_end":157}}]},{"kind":"Method","id":{"krate":0,"index":4295},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1397016,"byte_end":1397032,"line_start":207,"line_end":207,"column_start":12,"column_end":28},"name":"plan_fft_forward","qualname":"<FftPlannerSse<T>>::plan_fft_forward","value":"pub fn plan_fft_forward(&mut Self, usize) -> Arc<dyn Fft<T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Fft` instance which uses SSE4.1 instructions to compute forward FFTs of size `len`","sig":null,"attributes":[{"value":"/ Returns a `Fft` instance which uses SSE4.1 instructions to compute forward FFTs of size `len`","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1396742,"byte_end":1396839,"line_start":204,"line_end":204,"column_start":5,"column_end":102}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1396844,"byte_end":1396847,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ If this is called multiple times, the planner will attempt to re-use internal data between calls, reducing memory usage and FFT initialization time.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1396852,"byte_end":1397004,"line_start":206,"line_end":206,"column_start":5,"column_end":157}}]},{"kind":"Method","id":{"krate":0,"index":4296},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1397412,"byte_end":1397428,"line_start":214,"line_end":214,"column_start":12,"column_end":28},"name":"plan_fft_inverse","qualname":"<FftPlannerSse<T>>::plan_fft_inverse","value":"pub fn plan_fft_inverse(&mut Self, usize) -> Arc<dyn Fft<T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Fft` instance which uses SSE4.1 instructions to compute inverse FFTs of size `len.","sig":null,"attributes":[{"value":"/ Returns a `Fft` instance which uses SSE4.1 instructions to compute inverse FFTs of size `len.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1397138,"byte_end":1397235,"line_start":211,"line_end":211,"column_start":5,"column_end":102}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1397240,"byte_end":1397243,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ If this is called multiple times, the planner will attempt to re-use internal data between calls, reducing memory usage and FFT initialization time.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1397248,"byte_end":1397400,"line_start":213,"line_end":213,"column_start":5,"column_end":157}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/common.rs","byte_start":21151,"byte_end":21152,"line_start":7,"line_end":7,"column_start":20,"column_end":21},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/bluesteins_algorithm.rs","byte_start":34953,"byte_end":34972,"line_start":51,"line_end":51,"column_start":17,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/dft.rs","byte_start":42855,"byte_end":42858,"line_start":29,"line_end":29,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":126},{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":56230,"byte_end":56249,"line_start":58,"line_end":58,"column_start":17,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":68880,"byte_end":68904,"line_start":324,"line_end":324,"column_start":17,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":204},{"krate":0,"index":209},{"krate":0,"index":210}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":81339,"byte_end":81349,"line_start":51,"line_end":51,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":88686,"byte_end":88701,"line_start":240,"line_end":240,"column_start":17,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/raders_algorithm.rs","byte_start":98731,"byte_end":98746,"line_start":56,"line_end":56,"column_start":17,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":351}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/radix4.rs","byte_start":108777,"byte_end":108783,"line_start":42,"line_end":42,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":425},{"krate":0,"index":427}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":121167,"byte_end":121177,"line_start":98,"line_end":98,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":482}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":121386,"byte_end":121396,"line_start":107,"line_end":107,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":485},{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":488}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":121869,"byte_end":121879,"line_start":127,"line_end":127,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":491}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":121954,"byte_end":121964,"line_start":132,"line_end":132,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":494}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":122247,"byte_end":122257,"line_start":143,"line_end":143,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":501},{"krate":0,"index":502},{"krate":0,"index":503}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":123150,"byte_end":123160,"line_start":176,"line_end":176,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":510},{"krate":0,"index":511},{"krate":0,"index":512}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":124473,"byte_end":124483,"line_start":222,"line_end":222,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":519},{"krate":0,"index":520}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":126212,"byte_end":126222,"line_start":272,"line_end":272,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":528},{"krate":0,"index":529}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":132784,"byte_end":132794,"line_start":427,"line_end":427,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":535},{"krate":0,"index":536},{"krate":0,"index":537}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":135087,"byte_end":135097,"line_start":486,"line_end":486,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":546},{"krate":0,"index":547}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":142343,"byte_end":142353,"line_start":679,"line_end":679,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":554},{"krate":0,"index":555}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":144380,"byte_end":144391,"line_start":738,"line_end":738,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":566},{"krate":0,"index":567}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":153210,"byte_end":153221,"line_start":992,"line_end":992,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":579},{"krate":0,"index":580}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":164651,"byte_end":164662,"line_start":1312,"line_end":1312,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":589},{"krate":0,"index":590}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":168815,"byte_end":168826,"line_start":1406,"line_end":1406,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":604},{"krate":0,"index":605}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":186731,"byte_end":186742,"line_start":1890,"line_end":1890,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":620},{"krate":0,"index":621}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":208416,"byte_end":208427,"line_start":2469,"line_end":2469,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":638},{"krate":0,"index":639}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":238824,"byte_end":238835,"line_start":3269,"line_end":3269,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":659},{"krate":0,"index":660}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":284728,"byte_end":284739,"line_start":4444,"line_end":4444,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":681},{"krate":0,"index":682}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":336207,"byte_end":336218,"line_start":5749,"line_end":5749,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":691},{"krate":0,"index":692}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/array_utils.rs","byte_start":351942,"byte_end":351950,"line_start":33,"line_end":33,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":737},{"krate":0,"index":738},{"krate":0,"index":740},{"krate":0,"index":741}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/array_utils.rs","byte_start":352556,"byte_end":352564,"line_start":60,"line_end":60,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":744}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/array_utils.rs","byte_start":352927,"byte_end":352938,"line_start":74,"line_end":74,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":747},{"krate":0,"index":748},{"krate":0,"index":750},{"krate":0,"index":751},{"krate":0,"index":752}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/fft_cache.rs","byte_start":357540,"byte_end":357548,"line_start":9,"line_end":9,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":780},{"krate":0,"index":781},{"krate":0,"index":782},{"krate":0,"index":783}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/math_utils.rs","byte_start":361084,"byte_end":361096,"line_start":91,"line_end":91,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":801},{"krate":0,"index":802},{"krate":0,"index":803},{"krate":0,"index":804},{"krate":0,"index":805},{"krate":0,"index":806},{"krate":0,"index":807},{"krate":0,"index":808},{"krate":0,"index":809},{"krate":0,"index":812}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/math_utils.rs","byte_start":370741,"byte_end":370755,"line_start":346,"line_end":346,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":815},{"krate":0,"index":816},{"krate":0,"index":817},{"krate":0,"index":818},{"krate":0,"index":819},{"krate":0,"index":820},{"krate":0,"index":821},{"krate":0,"index":822},{"krate":0,"index":823},{"krate":0,"index":824}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":392468,"byte_end":392478,"line_start":61,"line_end":61,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":879},{"krate":0,"index":880},{"krate":0,"index":881},{"krate":0,"index":882}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":396008,"byte_end":396014,"line_start":159,"line_end":159,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":887}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":399235,"byte_end":399251,"line_start":237,"line_end":237,"column_start":17,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":894},{"krate":0,"index":895},{"krate":0,"index":896},{"krate":0,"index":897},{"krate":0,"index":898},{"krate":0,"index":899},{"krate":0,"index":900},{"krate":0,"index":901},{"krate":0,"index":902},{"krate":0,"index":903},{"krate":0,"index":904}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":6727,"byte_end":6739,"line_start":135,"line_end":135,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":949}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":7175,"byte_end":7187,"line_start":148,"line_end":148,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":951}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_vector.rs","byte_start":477668,"byte_end":477678,"line_start":806,"line_end":806,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1176}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_vector.rs","byte_start":477824,"byte_end":477830,"line_start":813,"line_end":813,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1178},{"krate":0,"index":1179},{"krate":0,"index":1180},{"krate":0,"index":1181},{"krate":0,"index":1182},{"krate":0,"index":1183},{"krate":0,"index":1184},{"krate":0,"index":1185},{"krate":0,"index":1186},{"krate":0,"index":1187},{"krate":0,"index":1188},{"krate":0,"index":1189},{"krate":0,"index":1190},{"krate":0,"index":1191},{"krate":0,"index":1192},{"krate":0,"index":1194},{"krate":0,"index":1196},{"krate":0,"index":1197},{"krate":0,"index":1198},{"krate":0,"index":1199},{"krate":0,"index":1201},{"krate":0,"index":1202},{"krate":0,"index":1205},{"krate":0,"index":1208},{"krate":0,"index":1211},{"krate":0,"index":1214},{"krate":0,"index":1217},{"krate":0,"index":1220},{"krate":0,"index":1223},{"krate":0,"index":1226},{"krate":0,"index":1229},{"krate":0,"index":1232}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_vector.rs","byte_start":490355,"byte_end":490361,"line_start":1109,"line_end":1109,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1236},{"krate":0,"index":1237},{"krate":0,"index":1238},{"krate":0,"index":1239},{"krate":0,"index":1240},{"krate":0,"index":1241},{"krate":0,"index":1242},{"krate":0,"index":1244},{"krate":0,"index":1245},{"krate":0,"index":1246},{"krate":0,"index":1247},{"krate":0,"index":1248},{"krate":0,"index":1249},{"krate":0,"index":1250},{"krate":0,"index":1251},{"krate":0,"index":1252},{"krate":0,"index":1253}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_vector.rs","byte_start":493541,"byte_end":493547,"line_start":1199,"line_end":1199,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1255},{"krate":0,"index":1256},{"krate":0,"index":1257},{"krate":0,"index":1258},{"krate":0,"index":1259},{"krate":0,"index":1260},{"krate":0,"index":1261},{"krate":0,"index":1262},{"krate":0,"index":1263},{"krate":0,"index":1264},{"krate":0,"index":1265},{"krate":0,"index":1266},{"krate":0,"index":1267},{"krate":0,"index":1268},{"krate":0,"index":1269},{"krate":0,"index":1271},{"krate":0,"index":1273},{"krate":0,"index":1274},{"krate":0,"index":1275},{"krate":0,"index":1276},{"krate":0,"index":1278},{"krate":0,"index":1279},{"krate":0,"index":1282},{"krate":0,"index":1285},{"krate":0,"index":1288},{"krate":0,"index":1291},{"krate":0,"index":1294},{"krate":0,"index":1297},{"krate":0,"index":1300},{"krate":0,"index":1303},{"krate":0,"index":1306},{"krate":0,"index":1309}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_vector.rs","byte_start":502321,"byte_end":502327,"line_start":1435,"line_end":1435,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1313},{"krate":0,"index":1314},{"krate":0,"index":1315},{"krate":0,"index":1316},{"krate":0,"index":1317},{"krate":0,"index":1318},{"krate":0,"index":1319},{"krate":0,"index":1320},{"krate":0,"index":1321}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_vector.rs","byte_start":503563,"byte_end":503570,"line_start":1472,"line_end":1472,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1323},{"krate":0,"index":1324},{"krate":0,"index":1325},{"krate":0,"index":1326},{"krate":0,"index":1327},{"krate":0,"index":1328},{"krate":0,"index":1329},{"krate":0,"index":1330},{"krate":0,"index":1331},{"krate":0,"index":1332},{"krate":0,"index":1333},{"krate":0,"index":1334},{"krate":0,"index":1335},{"krate":0,"index":1336},{"krate":0,"index":1337},{"krate":0,"index":1339},{"krate":0,"index":1341},{"krate":0,"index":1342},{"krate":0,"index":1343},{"krate":0,"index":1344},{"krate":0,"index":1346},{"krate":0,"index":1347},{"krate":0,"index":1350},{"krate":0,"index":1353},{"krate":0,"index":1356},{"krate":0,"index":1359},{"krate":0,"index":1362},{"krate":0,"index":1365},{"krate":0,"index":1368},{"krate":0,"index":1371},{"krate":0,"index":1374},{"krate":0,"index":1377}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_vector.rs","byte_start":512157,"byte_end":512164,"line_start":1700,"line_end":1700,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1381},{"krate":0,"index":1382},{"krate":0,"index":1383},{"krate":0,"index":1384},{"krate":0,"index":1385},{"krate":0,"index":1386},{"krate":0,"index":1387},{"krate":0,"index":1389},{"krate":0,"index":1390},{"krate":0,"index":1391},{"krate":0,"index":1392},{"krate":0,"index":1393},{"krate":0,"index":1394},{"krate":0,"index":1395},{"krate":0,"index":1396},{"krate":0,"index":1397},{"krate":0,"index":1398}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_vector.rs","byte_start":515419,"byte_end":515426,"line_start":1792,"line_end":1792,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1400},{"krate":0,"index":1401},{"krate":0,"index":1402},{"krate":0,"index":1403},{"krate":0,"index":1404},{"krate":0,"index":1405},{"krate":0,"index":1406},{"krate":0,"index":1407},{"krate":0,"index":1408},{"krate":0,"index":1409},{"krate":0,"index":1410},{"krate":0,"index":1411},{"krate":0,"index":1412},{"krate":0,"index":1413},{"krate":0,"index":1414},{"krate":0,"index":1416},{"krate":0,"index":1418},{"krate":0,"index":1419},{"krate":0,"index":1420},{"krate":0,"index":1421},{"krate":0,"index":1423},{"krate":0,"index":1424},{"krate":0,"index":1427},{"krate":0,"index":1430},{"krate":0,"index":1433},{"krate":0,"index":1436},{"krate":0,"index":1439},{"krate":0,"index":1442},{"krate":0,"index":1445},{"krate":0,"index":1448},{"krate":0,"index":1451},{"krate":0,"index":1454}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_vector.rs","byte_start":520183,"byte_end":520190,"line_start":1938,"line_end":1938,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1458},{"krate":0,"index":1459},{"krate":0,"index":1460},{"krate":0,"index":1461},{"krate":0,"index":1462},{"krate":0,"index":1463},{"krate":0,"index":1464},{"krate":0,"index":1465},{"krate":0,"index":1468}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_vector.rs","byte_start":523665,"byte_end":523673,"line_start":2036,"line_end":2036,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1491},{"krate":0,"index":1492},{"krate":0,"index":1493},{"krate":0,"index":1494}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_vector.rs","byte_start":525899,"byte_end":525910,"line_start":2095,"line_end":2095,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1503},{"krate":0,"index":1504},{"krate":0,"index":1505},{"krate":0,"index":1506}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":556206,"byte_end":556219,"line_start":289,"line_end":289,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1599}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":556843,"byte_end":556856,"line_start":305,"line_end":305,"column_start":9,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1602}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":559341,"byte_end":559354,"line_start":358,"line_end":358,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1610}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":560207,"byte_end":560220,"line_start":377,"line_end":377,"column_start":9,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1613}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":564599,"byte_end":564613,"line_start":458,"line_end":458,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1626}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":566912,"byte_end":566926,"line_start":503,"line_end":503,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1629}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":571903,"byte_end":571916,"line_start":595,"line_end":595,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1637}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":572827,"byte_end":572840,"line_start":621,"line_end":621,"column_start":9,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1640}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":575442,"byte_end":575455,"line_start":673,"line_end":673,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1648}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":576071,"byte_end":576084,"line_start":690,"line_end":690,"column_start":9,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1652}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":579408,"byte_end":579422,"line_start":754,"line_end":754,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1662}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":580472,"byte_end":580486,"line_start":780,"line_end":780,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1665}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":583721,"byte_end":583735,"line_start":839,"line_end":839,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1674}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":584103,"byte_end":584117,"line_start":850,"line_end":850,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1677}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":585878,"byte_end":585892,"line_start":895,"line_end":895,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1687}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":586340,"byte_end":586354,"line_start":907,"line_end":907,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1690}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":588208,"byte_end":588222,"line_start":955,"line_end":955,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1701}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":588837,"byte_end":588851,"line_start":971,"line_end":971,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1704}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":591766,"byte_end":591780,"line_start":1030,"line_end":1030,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1716}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":592148,"byte_end":592162,"line_start":1041,"line_end":1041,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1719}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":594299,"byte_end":594313,"line_start":1092,"line_end":1092,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1733}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":595000,"byte_end":595014,"line_start":1109,"line_end":1109,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1736}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":597377,"byte_end":597391,"line_start":1164,"line_end":1164,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1749}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":597840,"byte_end":597854,"line_start":1176,"line_end":1176,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1752}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":600527,"byte_end":600541,"line_start":1239,"line_end":1239,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1768}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":601525,"byte_end":601539,"line_start":1263,"line_end":1263,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1771}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":604790,"byte_end":604804,"line_start":1337,"line_end":1337,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1783}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":605170,"byte_end":605184,"line_start":1348,"line_end":1348,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1786}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":607521,"byte_end":607535,"line_start":1402,"line_end":1402,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1798}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":607982,"byte_end":607996,"line_start":1414,"line_end":1414,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1801}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":611015,"byte_end":611030,"line_start":1486,"line_end":1486,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1815}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":611576,"byte_end":611591,"line_start":1501,"line_end":1501,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1818},{"krate":0,"index":1820}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":614373,"byte_end":614388,"line_start":1567,"line_end":1567,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1831}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":615190,"byte_end":615205,"line_start":1586,"line_end":1586,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1834},{"krate":0,"index":1836}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":617951,"byte_end":617966,"line_start":1648,"line_end":1648,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1849}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":618948,"byte_end":618963,"line_start":1671,"line_end":1671,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1852},{"krate":0,"index":1856}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":651709,"byte_end":651724,"line_start":289,"line_end":289,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1993}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":652357,"byte_end":652372,"line_start":305,"line_end":305,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1996}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":654795,"byte_end":654810,"line_start":359,"line_end":359,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2004}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":655678,"byte_end":655693,"line_start":378,"line_end":378,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2007}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":659410,"byte_end":659426,"line_start":454,"line_end":454,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2015}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":660835,"byte_end":660851,"line_start":483,"line_end":483,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2018}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":666611,"byte_end":666626,"line_start":587,"line_end":587,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2027}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":666994,"byte_end":667009,"line_start":598,"line_end":598,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2030}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":668476,"byte_end":668491,"line_start":638,"line_end":638,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2039}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":668867,"byte_end":668882,"line_start":649,"line_end":649,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2042}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":670726,"byte_end":670742,"line_start":697,"line_end":697,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2054}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":671190,"byte_end":671206,"line_start":709,"line_end":709,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2057}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":673024,"byte_end":673040,"line_start":756,"line_end":756,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2068}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":673408,"byte_end":673424,"line_start":767,"line_end":767,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2071}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":675131,"byte_end":675147,"line_start":812,"line_end":812,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2082}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":675523,"byte_end":675539,"line_start":823,"line_end":823,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2085}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":677564,"byte_end":677580,"line_start":873,"line_end":873,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2097}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":678028,"byte_end":678044,"line_start":885,"line_end":885,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2100}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":680120,"byte_end":680136,"line_start":936,"line_end":936,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2116}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":681123,"byte_end":681139,"line_start":960,"line_end":960,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2119}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":684801,"byte_end":684817,"line_start":1041,"line_end":1041,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2133}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":685185,"byte_end":685201,"line_start":1052,"line_end":1052,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2136}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":688067,"byte_end":688083,"line_start":1113,"line_end":1113,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2149}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":688457,"byte_end":688473,"line_start":1124,"line_end":1124,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2152}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":691418,"byte_end":691434,"line_start":1195,"line_end":1195,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2164}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":691800,"byte_end":691816,"line_start":1206,"line_end":1206,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2167},{"krate":0,"index":2169}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":694484,"byte_end":694501,"line_start":1272,"line_end":1272,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2181}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":695047,"byte_end":695064,"line_start":1287,"line_end":1287,"column_start":9,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2184},{"krate":0,"index":2186}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":697823,"byte_end":697840,"line_start":1352,"line_end":1352,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2197}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":698642,"byte_end":698659,"line_start":1371,"line_end":1371,"column_start":9,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2200},{"krate":0,"index":2202}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":701460,"byte_end":701477,"line_start":1437,"line_end":1437,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2215}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":702459,"byte_end":702476,"line_start":1460,"line_end":1460,"column_start":9,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2218},{"krate":0,"index":2222}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_bluesteins.rs","byte_start":723176,"byte_end":723189,"line_start":35,"line_end":35,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2359},{"krate":0,"index":2361},{"krate":0,"index":2362},{"krate":0,"index":2365},{"krate":0,"index":2366},{"krate":0,"index":2367},{"krate":0,"index":2368},{"krate":0,"index":2369}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_mixed_radix.rs","byte_start":762469,"byte_end":762485,"line_start":387,"line_end":387,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2450},{"krate":0,"index":5898},{"krate":0,"index":5907},{"krate":0,"index":5913},{"krate":0,"index":5914},{"krate":0,"index":5915}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_mixed_radix.rs","byte_start":763336,"byte_end":763352,"line_start":415,"line_end":415,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2460},{"krate":0,"index":5935},{"krate":0,"index":5944},{"krate":0,"index":5950},{"krate":0,"index":5951},{"krate":0,"index":5952}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_mixed_radix.rs","byte_start":764386,"byte_end":764402,"line_start":444,"line_end":444,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2470},{"krate":0,"index":5972},{"krate":0,"index":5981},{"krate":0,"index":5987},{"krate":0,"index":5988},{"krate":0,"index":5989}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_mixed_radix.rs","byte_start":765425,"byte_end":765441,"line_start":473,"line_end":473,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2481},{"krate":0,"index":6009},{"krate":0,"index":6018},{"krate":0,"index":6024},{"krate":0,"index":6025},{"krate":0,"index":6026}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_mixed_radix.rs","byte_start":766700,"byte_end":766716,"line_start":511,"line_end":511,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2491},{"krate":0,"index":6046},{"krate":0,"index":6055},{"krate":0,"index":6061},{"krate":0,"index":6062},{"krate":0,"index":6063}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_mixed_radix.rs","byte_start":767754,"byte_end":767770,"line_start":540,"line_end":540,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2502},{"krate":0,"index":6083},{"krate":0,"index":6092},{"krate":0,"index":6098},{"krate":0,"index":6099},{"krate":0,"index":6100}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_mixed_radix.rs","byte_start":769178,"byte_end":769194,"line_start":580,"line_end":580,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2512},{"krate":0,"index":6120},{"krate":0,"index":6129},{"krate":0,"index":6135},{"krate":0,"index":6136},{"krate":0,"index":6137}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_mixed_radix.rs","byte_start":770320,"byte_end":770336,"line_start":612,"line_end":612,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2526},{"krate":0,"index":6157},{"krate":0,"index":6166},{"krate":0,"index":6172},{"krate":0,"index":6173},{"krate":0,"index":6174}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_mixed_radix.rs","byte_start":772244,"byte_end":772261,"line_start":665,"line_end":665,"column_start":28,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2537},{"krate":0,"index":6194},{"krate":0,"index":6203},{"krate":0,"index":6209},{"krate":0,"index":6210},{"krate":0,"index":6211}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_mixed_radix.rs","byte_start":774003,"byte_end":774020,"line_start":710,"line_end":710,"column_start":28,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2548},{"krate":0,"index":6231},{"krate":0,"index":6240},{"krate":0,"index":6246},{"krate":0,"index":6247},{"krate":0,"index":6248}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_mixed_radix.rs","byte_start":775390,"byte_end":775407,"line_start":751,"line_end":751,"column_start":28,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2560},{"krate":0,"index":2561},{"krate":0,"index":6348},{"krate":0,"index":6354},{"krate":0,"index":6355},{"krate":0,"index":6356}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_raders.rs","byte_start":786834,"byte_end":786855,"line_start":31,"line_end":31,"column_start":6,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2653},{"krate":0,"index":2654}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_raders.rs","byte_start":791134,"byte_end":791144,"line_start":115,"line_end":115,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2671},{"krate":0,"index":2672},{"krate":0,"index":2678},{"krate":0,"index":2679},{"krate":0,"index":2680},{"krate":0,"index":2681}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":812072,"byte_end":812086,"line_start":33,"line_end":33,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2716}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":812626,"byte_end":812640,"line_start":51,"line_end":51,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2718},{"krate":0,"index":2720},{"krate":0,"index":2721},{"krate":0,"index":2722},{"krate":0,"index":2723}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":815516,"byte_end":815529,"line_start":116,"line_end":116,"column_start":17,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2729},{"krate":0,"index":2730},{"krate":0,"index":2731},{"krate":0,"index":2732},{"krate":0,"index":2733}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":820990,"byte_end":821008,"line_start":204,"line_end":204,"column_start":46,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":2745},{"krate":0,"index":2746}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":821778,"byte_end":821796,"line_start":221,"line_end":221,"column_start":46,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":2749},{"krate":0,"index":2750}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":822709,"byte_end":822727,"line_start":242,"line_end":242,"column_start":17,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2753},{"krate":0,"index":2754},{"krate":0,"index":2756},{"krate":0,"index":2757}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":834350,"byte_end":834368,"line_start":452,"line_end":452,"column_start":17,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2760},{"krate":0,"index":2761},{"krate":0,"index":2763},{"krate":0,"index":2764}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":845715,"byte_end":845733,"line_start":664,"line_end":664,"column_start":28,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2768},{"krate":0,"index":2771},{"krate":0,"index":2781},{"krate":0,"index":2786},{"krate":0,"index":2787},{"krate":0,"index":2790}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_vector.rs","byte_start":884876,"byte_end":884884,"line_start":139,"line_end":139,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2982},{"krate":0,"index":2983},{"krate":0,"index":2984},{"krate":0,"index":2985},{"krate":0,"index":2986}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_vector.rs","byte_start":885679,"byte_end":885687,"line_start":162,"line_end":162,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2988},{"krate":0,"index":2989},{"krate":0,"index":2990},{"krate":0,"index":2991},{"krate":0,"index":2992}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_vector.rs","byte_start":887113,"byte_end":887124,"line_start":197,"line_end":197,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3000},{"krate":0,"index":3001},{"krate":0,"index":3002},{"krate":0,"index":3003},{"krate":0,"index":3004}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_vector.rs","byte_start":888061,"byte_end":888072,"line_start":225,"line_end":225,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3006},{"krate":0,"index":3007},{"krate":0,"index":3008},{"krate":0,"index":3009},{"krate":0,"index":3010}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":897723,"byte_end":897739,"line_start":204,"line_end":204,"column_start":17,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3077},{"krate":0,"index":3078},{"krate":0,"index":3079}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":898887,"byte_end":898903,"line_start":246,"line_end":246,"column_start":17,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3086},{"krate":0,"index":3087}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":899862,"byte_end":899878,"line_start":280,"line_end":280,"column_start":17,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3094},{"krate":0,"index":3095},{"krate":0,"index":3096},{"krate":0,"index":3097},{"krate":0,"index":3098}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":902920,"byte_end":902936,"line_start":380,"line_end":380,"column_start":17,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3111},{"krate":0,"index":3112},{"krate":0,"index":3113}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":904631,"byte_end":904647,"line_start":442,"line_end":442,"column_start":17,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3127},{"krate":0,"index":3128},{"krate":0,"index":3129},{"krate":0,"index":3130},{"krate":0,"index":3132}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":908855,"byte_end":908871,"line_start":564,"line_end":564,"column_start":17,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3143},{"krate":0,"index":3144},{"krate":0,"index":3145}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":911296,"byte_end":911312,"line_start":642,"line_end":642,"column_start":17,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3154},{"krate":0,"index":3155},{"krate":0,"index":3156},{"krate":0,"index":3157},{"krate":0,"index":3159}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":915651,"byte_end":915667,"line_start":772,"line_end":772,"column_start":17,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3168},{"krate":0,"index":3169},{"krate":0,"index":3170}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":918444,"byte_end":918460,"line_start":864,"line_end":864,"column_start":17,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3187},{"krate":0,"index":3188},{"krate":0,"index":3189},{"krate":0,"index":3190},{"krate":0,"index":3192}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":925176,"byte_end":925192,"line_start":1040,"line_end":1040,"column_start":17,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3205},{"krate":0,"index":3206},{"krate":0,"index":3207}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":928959,"byte_end":928975,"line_start":1146,"line_end":1146,"column_start":17,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3216},{"krate":0,"index":3217},{"krate":0,"index":3218},{"krate":0,"index":3219},{"krate":0,"index":3221}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":933160,"byte_end":933176,"line_start":1269,"line_end":1269,"column_start":17,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3230},{"krate":0,"index":3231},{"krate":0,"index":3232}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":935866,"byte_end":935882,"line_start":1352,"line_end":1352,"column_start":17,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3243},{"krate":0,"index":3244},{"krate":0,"index":3245},{"krate":0,"index":3246},{"krate":0,"index":3249}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":940920,"byte_end":940936,"line_start":1490,"line_end":1490,"column_start":17,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3260},{"krate":0,"index":3261},{"krate":0,"index":3262}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":943874,"byte_end":943890,"line_start":1578,"line_end":1578,"column_start":17,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3275},{"krate":0,"index":3276},{"krate":0,"index":3277},{"krate":0,"index":3278}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":948773,"byte_end":948789,"line_start":1709,"line_end":1709,"column_start":17,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3291},{"krate":0,"index":3292},{"krate":0,"index":3293}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":951716,"byte_end":951733,"line_start":1785,"line_end":1785,"column_start":17,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3303},{"krate":0,"index":3304},{"krate":0,"index":3305},{"krate":0,"index":3306},{"krate":0,"index":3309}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":956238,"byte_end":956255,"line_start":1906,"line_end":1906,"column_start":17,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3320},{"krate":0,"index":3321},{"krate":0,"index":3322}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":958836,"byte_end":958853,"line_start":1980,"line_end":1980,"column_start":17,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3333},{"krate":0,"index":3334},{"krate":0,"index":3335},{"krate":0,"index":3336},{"krate":0,"index":3339}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":963936,"byte_end":963953,"line_start":2120,"line_end":2120,"column_start":17,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3350},{"krate":0,"index":3351},{"krate":0,"index":3352}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":966631,"byte_end":966648,"line_start":2194,"line_end":2194,"column_start":17,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3363},{"krate":0,"index":3364},{"krate":0,"index":3365},{"krate":0,"index":3366}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":972089,"byte_end":972106,"line_start":2333,"line_end":2333,"column_start":17,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3377},{"krate":0,"index":3378},{"krate":0,"index":3379}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":975207,"byte_end":975224,"line_start":2420,"line_end":2420,"column_start":17,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3400},{"krate":0,"index":3401},{"krate":0,"index":3402},{"krate":0,"index":3403},{"krate":0,"index":3406}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":983427,"byte_end":983444,"line_start":2625,"line_end":2625,"column_start":17,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3423},{"krate":0,"index":3424},{"krate":0,"index":3425}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":988871,"byte_end":988888,"line_start":2781,"line_end":2781,"column_start":17,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3458},{"krate":0,"index":3459},{"krate":0,"index":3460},{"krate":0,"index":3461},{"krate":0,"index":3464}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":1002547,"byte_end":1002564,"line_start":3094,"line_end":3094,"column_start":17,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3489},{"krate":0,"index":3490},{"krate":0,"index":3491}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_prime_butterflies.rs","byte_start":1021920,"byte_end":1021936,"line_start":50,"line_end":50,"column_start":17,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3571},{"krate":0,"index":3572},{"krate":0,"index":3573},{"krate":0,"index":3574}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_prime_butterflies.rs","byte_start":1027729,"byte_end":1027745,"line_start":193,"line_end":193,"column_start":17,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3590},{"krate":0,"index":3591},{"krate":0,"index":3592}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_prime_butterflies.rs","byte_start":1032089,"byte_end":1032106,"line_start":309,"line_end":309,"column_start":17,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3612},{"krate":0,"index":3613},{"krate":0,"index":3614},{"krate":0,"index":3615}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_prime_butterflies.rs","byte_start":1041559,"byte_end":1041576,"line_start":518,"line_end":518,"column_start":17,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3635},{"krate":0,"index":3636},{"krate":0,"index":3637}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_prime_butterflies.rs","byte_start":1049126,"byte_end":1049143,"line_start":687,"line_end":687,"column_start":17,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3659},{"krate":0,"index":3660},{"krate":0,"index":3661},{"krate":0,"index":3662}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_prime_butterflies.rs","byte_start":1060890,"byte_end":1060907,"line_start":933,"line_end":933,"column_start":17,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3684},{"krate":0,"index":3685},{"krate":0,"index":3686}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_prime_butterflies.rs","byte_start":1070535,"byte_end":1070552,"line_start":1138,"line_end":1138,"column_start":17,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3712},{"krate":0,"index":3713},{"krate":0,"index":3714},{"krate":0,"index":3715}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_prime_butterflies.rs","byte_start":1087717,"byte_end":1087734,"line_start":1472,"line_end":1472,"column_start":17,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3741},{"krate":0,"index":3742},{"krate":0,"index":3743}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_prime_butterflies.rs","byte_start":1102177,"byte_end":1102194,"line_start":1754,"line_end":1754,"column_start":17,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3771},{"krate":0,"index":3772},{"krate":0,"index":3773},{"krate":0,"index":3774}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_prime_butterflies.rs","byte_start":1122478,"byte_end":1122495,"line_start":2138,"line_end":2138,"column_start":17,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3802},{"krate":0,"index":3803},{"krate":0,"index":3804}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_prime_butterflies.rs","byte_start":1139845,"byte_end":1139862,"line_start":2469,"line_end":2469,"column_start":17,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3836},{"krate":0,"index":3837},{"krate":0,"index":3838},{"krate":0,"index":3839}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_prime_butterflies.rs","byte_start":1167436,"byte_end":1167453,"line_start":2965,"line_end":2965,"column_start":17,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3871},{"krate":0,"index":3872},{"krate":0,"index":3873}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_prime_butterflies.rs","byte_start":1191581,"byte_end":1191598,"line_start":3402,"line_end":3402,"column_start":17,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3911},{"krate":0,"index":3912},{"krate":0,"index":3913},{"krate":0,"index":3914}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_prime_butterflies.rs","byte_start":1232250,"byte_end":1232267,"line_start":4097,"line_end":4097,"column_start":17,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3952},{"krate":0,"index":3953},{"krate":0,"index":3954}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_prime_butterflies.rs","byte_start":1268510,"byte_end":1268527,"line_start":4715,"line_end":4715,"column_start":17,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3994},{"krate":0,"index":3995},{"krate":0,"index":3996},{"krate":0,"index":3997}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_prime_butterflies.rs","byte_start":1314141,"byte_end":1314158,"line_start":5483,"line_end":5483,"column_start":17,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":4037},{"krate":0,"index":4038},{"krate":0,"index":4039}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_radix4.rs","byte_start":1364409,"byte_end":1364420,"line_start":62,"line_end":62,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":4197},{"krate":0,"index":4199}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_radix4.rs","byte_start":1371961,"byte_end":1371972,"line_start":248,"line_end":248,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":4214},{"krate":0,"index":4216}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_utils.rs","byte_start":1380804,"byte_end":1380815,"line_start":16,"line_end":16,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":4225},{"krate":0,"index":4226},{"krate":0,"index":4227}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_utils.rs","byte_start":1385701,"byte_end":1385712,"line_start":170,"line_end":170,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":4242},{"krate":0,"index":4243}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1390589,"byte_end":1390595,"line_start":74,"line_end":74,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":4286}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1393938,"byte_end":1393951,"line_start":157,"line_end":157,"column_start":17,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4293},{"krate":0,"index":4294},{"krate":0,"index":4295},{"krate":0,"index":4296},{"krate":0,"index":4297},{"krate":0,"index":4298},{"krate":0,"index":4299},{"krate":0,"index":4300},{"krate":0,"index":4303},{"krate":0,"index":4304},{"krate":0,"index":4305}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":6155,"byte_end":6164,"line_start":110,"line_end":110,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":30}},{"kind":"Mod","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mod.rs","byte_start":32623,"byte_end":32634,"line_start":9,"line_end":9,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":434}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/common.rs","byte_start":21066,"byte_end":21070,"line_start":5,"line_end":5,"column_start":19,"column_end":23},"kind":"SuperTrait","from":{"krate":2,"index":2832},"to":{"krate":0,"index":23}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/common.rs","byte_start":21073,"byte_end":21086,"line_start":5,"line_end":5,"column_start":26,"column_end":39},"kind":"SuperTrait","from":{"krate":17,"index":320},"to":{"krate":0,"index":23}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/common.rs","byte_start":21089,"byte_end":21095,"line_start":5,"line_end":5,"column_start":42,"column_end":48},"kind":"SuperTrait","from":{"krate":17,"index":898},"to":{"krate":0,"index":23}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/common.rs","byte_start":21098,"byte_end":21102,"line_start":5,"line_end":5,"column_start":51,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":2834},"to":{"krate":0,"index":23}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/common.rs","byte_start":21105,"byte_end":21109,"line_start":5,"line_end":5,"column_start":58,"column_end":62},"kind":"SuperTrait","from":{"krate":2,"index":2822},"to":{"krate":0,"index":23}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/common.rs","byte_start":21112,"byte_end":21117,"line_start":5,"line_end":5,"column_start":65,"column_end":70},"kind":"SuperTrait","from":{"krate":2,"index":8701},"to":{"krate":0,"index":23}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/common.rs","byte_start":21151,"byte_end":21152,"line_start":7,"line_end":7,"column_start":20,"column_end":21},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":25},"to":{"krate":0,"index":23}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/bluesteins_algorithm.rs","byte_start":34953,"byte_end":34972,"line_start":51,"line_end":51,"column_start":17,"column_end":36},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":71},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/dft.rs","byte_start":42855,"byte_end":42858,"line_start":29,"line_end":29,"column_start":17,"column_end":20},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":120},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":56230,"byte_end":56249,"line_start":58,"line_end":58,"column_start":17,"column_end":36},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":175},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/good_thomas_algorithm.rs","byte_start":68880,"byte_end":68904,"line_start":324,"line_end":324,"column_start":17,"column_end":41},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":194},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":81339,"byte_end":81349,"line_start":51,"line_end":51,"column_start":17,"column_end":27},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":257},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/mixed_radix.rs","byte_start":88686,"byte_end":88701,"line_start":240,"line_end":240,"column_start":17,"column_end":32},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":272},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/raders_algorithm.rs","byte_start":98731,"byte_end":98746,"line_start":56,"line_end":56,"column_start":17,"column_end":32},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":337},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/radix4.rs","byte_start":108777,"byte_end":108783,"line_start":42,"line_end":42,"column_start":17,"column_end":23},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":415},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":121167,"byte_end":121177,"line_start":98,"line_end":98,"column_start":17,"column_end":27},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":476},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":121386,"byte_end":121396,"line_start":107,"line_end":107,"column_start":28,"column_end":38},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":476},"to":{"krate":0,"index":954}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":121869,"byte_end":121879,"line_start":127,"line_end":127,"column_start":20,"column_end":30},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":476},"to":{"krate":0,"index":946}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":121954,"byte_end":121964,"line_start":132,"line_end":132,"column_start":23,"column_end":33},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":476},"to":{"krate":0,"index":952}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":122247,"byte_end":122257,"line_start":143,"line_end":143,"column_start":17,"column_end":27},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":495},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":123150,"byte_end":123160,"line_start":176,"line_end":176,"column_start":17,"column_end":27},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":504},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":124473,"byte_end":124483,"line_start":222,"line_end":222,"column_start":17,"column_end":27},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":513},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":126212,"byte_end":126222,"line_start":272,"line_end":272,"column_start":17,"column_end":27},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":521},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":132784,"byte_end":132794,"line_start":427,"line_end":427,"column_start":17,"column_end":27},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":530},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":135087,"byte_end":135097,"line_start":486,"line_end":486,"column_start":17,"column_end":27},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":538},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":142343,"byte_end":142353,"line_start":679,"line_end":679,"column_start":17,"column_end":27},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":548},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":144380,"byte_end":144391,"line_start":738,"line_end":738,"column_start":17,"column_end":28},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":556},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":153210,"byte_end":153221,"line_start":992,"line_end":992,"column_start":17,"column_end":28},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":568},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":164651,"byte_end":164662,"line_start":1312,"line_end":1312,"column_start":17,"column_end":28},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":581},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":168815,"byte_end":168826,"line_start":1406,"line_end":1406,"column_start":17,"column_end":28},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":591},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":186731,"byte_end":186742,"line_start":1890,"line_end":1890,"column_start":17,"column_end":28},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":606},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":208416,"byte_end":208427,"line_start":2469,"line_end":2469,"column_start":17,"column_end":28},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":622},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":238824,"byte_end":238835,"line_start":3269,"line_end":3269,"column_start":17,"column_end":28},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":640},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":284728,"byte_end":284739,"line_start":4444,"line_end":4444,"column_start":17,"column_end":28},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":661},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/algorithm/butterflies.rs","byte_start":336207,"byte_end":336218,"line_start":5749,"line_end":5749,"column_start":17,"column_end":28},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":683},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/array_utils.rs","byte_start":351942,"byte_end":351950,"line_start":33,"line_end":33,"column_start":9,"column_end":17},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":4733},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/array_utils.rs","byte_start":352556,"byte_end":352564,"line_start":60,"line_end":60,"column_start":15,"column_end":23},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":4733},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/array_utils.rs","byte_start":352927,"byte_end":352938,"line_start":74,"line_end":74,"column_start":9,"column_end":20},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":4742},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/fft_cache.rs","byte_start":357540,"byte_end":357548,"line_start":9,"line_end":9,"column_start":9,"column_end":17},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":774},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/math_utils.rs","byte_start":361084,"byte_end":361096,"line_start":91,"line_end":91,"column_start":6,"column_end":18},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":4766},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/math_utils.rs","byte_start":370741,"byte_end":370755,"line_start":346,"line_end":346,"column_start":6,"column_end":20},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":4777},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":392468,"byte_end":392478,"line_start":61,"line_end":61,"column_start":17,"column_end":27},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":874},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":396008,"byte_end":396014,"line_start":159,"line_end":159,"column_start":6,"column_end":12},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":4789},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/plan.rs","byte_start":399235,"byte_end":399251,"line_start":237,"line_end":237,"column_start":17,"column_end":33},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":888},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":6727,"byte_end":6739,"line_start":135,"line_end":135,"column_start":6,"column_end":18},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":4853},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":7175,"byte_end":7187,"line_start":148,"line_end":148,"column_start":18,"column_end":30},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":4853},"to":{"krate":2,"index":8708}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":8150,"byte_end":8156,"line_start":168,"line_end":168,"column_start":27,"column_end":33},"kind":"SuperTrait","from":{"krate":0,"index":946},"to":{"krate":0,"index":954}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":8159,"byte_end":8168,"line_start":168,"line_end":168,"column_start":36,"column_end":45},"kind":"SuperTrait","from":{"krate":0,"index":952},"to":{"krate":0,"index":954}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":8171,"byte_end":8175,"line_start":168,"line_end":168,"column_start":48,"column_end":52},"kind":"SuperTrait","from":{"krate":2,"index":2834},"to":{"krate":0,"index":954}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/lib.rs","byte_start":8178,"byte_end":8182,"line_start":168,"line_end":168,"column_start":55,"column_end":59},"kind":"SuperTrait","from":{"krate":2,"index":2822},"to":{"krate":0,"index":954}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/mod.rs","byte_start":423580,"byte_end":423586,"line_start":5,"line_end":5,"column_start":19,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":23},"to":{"krate":0,"index":982}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_vector.rs","byte_start":435522,"byte_end":435526,"line_start":18,"line_end":18,"column_start":22,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":2832},"to":{"krate":0,"index":1027}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_vector.rs","byte_start":435529,"byte_end":435534,"line_start":18,"line_end":18,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":8701},"to":{"krate":0,"index":1027}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_vector.rs","byte_start":435537,"byte_end":435541,"line_start":18,"line_end":18,"column_start":37,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":2822},"to":{"krate":0,"index":1027}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_vector.rs","byte_start":435544,"byte_end":435548,"line_start":18,"line_end":18,"column_start":44,"column_end":48},"kind":"SuperTrait","from":{"krate":2,"index":2834},"to":{"krate":0,"index":1027}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_vector.rs","byte_start":462836,"byte_end":462845,"line_start":490,"line_end":490,"column_start":25,"column_end":34},"kind":"SuperTrait","from":{"krate":0,"index":1027},"to":{"krate":0,"index":1120}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_vector.rs","byte_start":469121,"byte_end":469130,"line_start":618,"line_end":618,"column_start":25,"column_end":34},"kind":"SuperTrait","from":{"krate":0,"index":1027},"to":{"krate":0,"index":1149}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_vector.rs","byte_start":477668,"byte_end":477678,"line_start":806,"line_end":806,"column_start":23,"column_end":33},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":4869},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_vector.rs","byte_start":477824,"byte_end":477830,"line_start":813,"line_end":813,"column_start":20,"column_end":26},"kind":{"Impl":{"id":43}},"from":{"krate":2,"index":43094},"to":{"krate":0,"index":1027}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_vector.rs","byte_start":490355,"byte_end":490361,"line_start":1109,"line_end":1109,"column_start":23,"column_end":29},"kind":{"Impl":{"id":44}},"from":{"krate":2,"index":43094},"to":{"krate":0,"index":1120}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_vector.rs","byte_start":493541,"byte_end":493547,"line_start":1199,"line_end":1199,"column_start":20,"column_end":26},"kind":{"Impl":{"id":45}},"from":{"krate":2,"index":43063},"to":{"krate":0,"index":1027}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_vector.rs","byte_start":502321,"byte_end":502327,"line_start":1435,"line_end":1435,"column_start":23,"column_end":29},"kind":{"Impl":{"id":46}},"from":{"krate":2,"index":43063},"to":{"krate":0,"index":1149}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_vector.rs","byte_start":503563,"byte_end":503570,"line_start":1472,"line_end":1472,"column_start":20,"column_end":27},"kind":{"Impl":{"id":47}},"from":{"krate":2,"index":43109},"to":{"krate":0,"index":1027}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_vector.rs","byte_start":512157,"byte_end":512164,"line_start":1700,"line_end":1700,"column_start":23,"column_end":30},"kind":{"Impl":{"id":48}},"from":{"krate":2,"index":43109},"to":{"krate":0,"index":1120}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_vector.rs","byte_start":515419,"byte_end":515426,"line_start":1792,"line_end":1792,"column_start":20,"column_end":27},"kind":{"Impl":{"id":49}},"from":{"krate":2,"index":43074},"to":{"krate":0,"index":1027}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_vector.rs","byte_start":520183,"byte_end":520190,"line_start":1938,"line_end":1938,"column_start":23,"column_end":30},"kind":{"Impl":{"id":50}},"from":{"krate":2,"index":43074},"to":{"krate":0,"index":1149}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_vector.rs","byte_start":523665,"byte_end":523673,"line_start":2036,"line_end":2036,"column_start":33,"column_end":41},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":4733},"to":{"krate":0,"index":1471}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_vector.rs","byte_start":525899,"byte_end":525910,"line_start":2095,"line_end":2095,"column_start":36,"column_end":47},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":4742},"to":{"krate":0,"index":1477}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":556206,"byte_end":556219,"line_start":289,"line_end":289,"column_start":6,"column_end":19},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1592},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":556843,"byte_end":556856,"line_start":305,"line_end":305,"column_start":9,"column_end":22},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1592},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":559341,"byte_end":559354,"line_start":358,"line_end":358,"column_start":6,"column_end":19},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1603},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":560207,"byte_end":560220,"line_start":377,"line_end":377,"column_start":9,"column_end":22},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1603},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":564599,"byte_end":564613,"line_start":458,"line_end":458,"column_start":6,"column_end":20},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1614},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":566912,"byte_end":566926,"line_start":503,"line_end":503,"column_start":9,"column_end":23},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1614},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":571903,"byte_end":571916,"line_start":595,"line_end":595,"column_start":6,"column_end":19},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1630},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":572827,"byte_end":572840,"line_start":621,"line_end":621,"column_start":9,"column_end":22},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1630},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":575442,"byte_end":575455,"line_start":673,"line_end":673,"column_start":6,"column_end":19},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1641},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":576071,"byte_end":576084,"line_start":690,"line_end":690,"column_start":9,"column_end":22},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1641},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":579408,"byte_end":579422,"line_start":754,"line_end":754,"column_start":6,"column_end":20},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1653},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":580472,"byte_end":580486,"line_start":780,"line_end":780,"column_start":9,"column_end":23},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1653},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":583721,"byte_end":583735,"line_start":839,"line_end":839,"column_start":6,"column_end":20},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1666},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":584103,"byte_end":584117,"line_start":850,"line_end":850,"column_start":9,"column_end":23},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1666},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":585878,"byte_end":585892,"line_start":895,"line_end":895,"column_start":6,"column_end":20},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1678},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":586340,"byte_end":586354,"line_start":907,"line_end":907,"column_start":9,"column_end":23},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1678},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":588208,"byte_end":588222,"line_start":955,"line_end":955,"column_start":6,"column_end":20},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1691},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":588837,"byte_end":588851,"line_start":971,"line_end":971,"column_start":9,"column_end":23},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1691},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":591766,"byte_end":591780,"line_start":1030,"line_end":1030,"column_start":6,"column_end":20},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1708},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":592148,"byte_end":592162,"line_start":1041,"line_end":1041,"column_start":9,"column_end":23},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1708},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":594299,"byte_end":594313,"line_start":1092,"line_end":1092,"column_start":6,"column_end":20},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1722},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":595000,"byte_end":595014,"line_start":1109,"line_end":1109,"column_start":9,"column_end":23},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1722},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":597377,"byte_end":597391,"line_start":1164,"line_end":1164,"column_start":6,"column_end":20},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1740},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":597840,"byte_end":597854,"line_start":1176,"line_end":1176,"column_start":9,"column_end":23},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1740},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":600527,"byte_end":600541,"line_start":1239,"line_end":1239,"column_start":6,"column_end":20},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1756},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":601525,"byte_end":601539,"line_start":1263,"line_end":1263,"column_start":9,"column_end":23},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1756},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":604790,"byte_end":604804,"line_start":1337,"line_end":1337,"column_start":6,"column_end":20},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1775},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":605170,"byte_end":605184,"line_start":1348,"line_end":1348,"column_start":9,"column_end":23},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1775},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":607521,"byte_end":607535,"line_start":1402,"line_end":1402,"column_start":6,"column_end":20},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1789},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":607982,"byte_end":607996,"line_start":1414,"line_end":1414,"column_start":9,"column_end":23},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1789},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":611015,"byte_end":611030,"line_start":1486,"line_end":1486,"column_start":6,"column_end":21},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1805},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":611576,"byte_end":611591,"line_start":1501,"line_end":1501,"column_start":9,"column_end":24},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1805},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":614373,"byte_end":614388,"line_start":1567,"line_end":1567,"column_start":6,"column_end":21},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1821},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":615190,"byte_end":615205,"line_start":1586,"line_end":1586,"column_start":9,"column_end":24},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1821},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":617951,"byte_end":617966,"line_start":1648,"line_end":1648,"column_start":6,"column_end":21},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1837},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx32_butterflies.rs","byte_start":618948,"byte_end":618963,"line_start":1671,"line_end":1671,"column_start":9,"column_end":24},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1837},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":651709,"byte_end":651724,"line_start":289,"line_end":289,"column_start":6,"column_end":21},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1986},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":652357,"byte_end":652372,"line_start":305,"line_end":305,"column_start":9,"column_end":24},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1986},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":654795,"byte_end":654810,"line_start":359,"line_end":359,"column_start":6,"column_end":21},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1997},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":655678,"byte_end":655693,"line_start":378,"line_end":378,"column_start":9,"column_end":24},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1997},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":659410,"byte_end":659426,"line_start":454,"line_end":454,"column_start":6,"column_end":22},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":2008},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":660835,"byte_end":660851,"line_start":483,"line_end":483,"column_start":9,"column_end":25},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":2008},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":666611,"byte_end":666626,"line_start":587,"line_end":587,"column_start":6,"column_end":21},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":2019},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":666994,"byte_end":667009,"line_start":598,"line_end":598,"column_start":9,"column_end":24},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":2019},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":668476,"byte_end":668491,"line_start":638,"line_end":638,"column_start":6,"column_end":21},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":2031},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":668867,"byte_end":668882,"line_start":649,"line_end":649,"column_start":9,"column_end":24},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":2031},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":670726,"byte_end":670742,"line_start":697,"line_end":697,"column_start":6,"column_end":22},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":2045},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":671190,"byte_end":671206,"line_start":709,"line_end":709,"column_start":9,"column_end":25},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":2045},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":673024,"byte_end":673040,"line_start":756,"line_end":756,"column_start":6,"column_end":22},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":2060},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":673408,"byte_end":673424,"line_start":767,"line_end":767,"column_start":9,"column_end":25},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":2060},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":675131,"byte_end":675147,"line_start":812,"line_end":812,"column_start":6,"column_end":22},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":2074},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":675523,"byte_end":675539,"line_start":823,"line_end":823,"column_start":9,"column_end":25},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":2074},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":677564,"byte_end":677580,"line_start":873,"line_end":873,"column_start":6,"column_end":22},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":2088},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":678028,"byte_end":678044,"line_start":885,"line_end":885,"column_start":9,"column_end":25},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":2088},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":680120,"byte_end":680136,"line_start":936,"line_end":936,"column_start":6,"column_end":22},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":2104},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":681123,"byte_end":681139,"line_start":960,"line_end":960,"column_start":9,"column_end":25},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":2104},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":684801,"byte_end":684817,"line_start":1041,"line_end":1041,"column_start":6,"column_end":22},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":2125},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":685185,"byte_end":685201,"line_start":1052,"line_end":1052,"column_start":9,"column_end":25},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":2125},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":688067,"byte_end":688083,"line_start":1113,"line_end":1113,"column_start":6,"column_end":22},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":2141},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":688457,"byte_end":688473,"line_start":1124,"line_end":1124,"column_start":9,"column_end":25},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":2141},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":691418,"byte_end":691434,"line_start":1195,"line_end":1195,"column_start":6,"column_end":22},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":2156},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":691800,"byte_end":691816,"line_start":1206,"line_end":1206,"column_start":9,"column_end":25},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":2156},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":694484,"byte_end":694501,"line_start":1272,"line_end":1272,"column_start":6,"column_end":23},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":2171},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":695047,"byte_end":695064,"line_start":1287,"line_end":1287,"column_start":9,"column_end":26},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":2171},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":697823,"byte_end":697840,"line_start":1352,"line_end":1352,"column_start":6,"column_end":23},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":2187},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":698642,"byte_end":698659,"line_start":1371,"line_end":1371,"column_start":9,"column_end":26},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":2187},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":701460,"byte_end":701477,"line_start":1437,"line_end":1437,"column_start":6,"column_end":23},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":2203},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx64_butterflies.rs","byte_start":702459,"byte_end":702476,"line_start":1460,"line_end":1460,"column_start":9,"column_end":26},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":2203},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_bluesteins.rs","byte_start":723176,"byte_end":723189,"line_start":35,"line_end":35,"column_start":28,"column_end":41},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":2350},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_mixed_radix.rs","byte_start":762469,"byte_end":762485,"line_start":387,"line_end":387,"column_start":28,"column_end":44},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":2442},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_mixed_radix.rs","byte_start":763336,"byte_end":763352,"line_start":415,"line_end":415,"column_start":28,"column_end":44},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":2451},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_mixed_radix.rs","byte_start":764386,"byte_end":764402,"line_start":444,"line_end":444,"column_start":28,"column_end":44},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":2461},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_mixed_radix.rs","byte_start":765425,"byte_end":765441,"line_start":473,"line_end":473,"column_start":28,"column_end":44},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":2471},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_mixed_radix.rs","byte_start":766700,"byte_end":766716,"line_start":511,"line_end":511,"column_start":28,"column_end":44},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":2482},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_mixed_radix.rs","byte_start":767754,"byte_end":767770,"line_start":540,"line_end":540,"column_start":28,"column_end":44},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":2492},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_mixed_radix.rs","byte_start":769178,"byte_end":769194,"line_start":580,"line_end":580,"column_start":28,"column_end":44},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":2503},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_mixed_radix.rs","byte_start":770320,"byte_end":770336,"line_start":612,"line_end":612,"column_start":28,"column_end":44},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":2513},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_mixed_radix.rs","byte_start":772244,"byte_end":772261,"line_start":665,"line_end":665,"column_start":28,"column_end":45},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":2527},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_mixed_radix.rs","byte_start":774003,"byte_end":774020,"line_start":710,"line_end":710,"column_start":28,"column_end":45},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":2538},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_mixed_radix.rs","byte_start":775390,"byte_end":775407,"line_start":751,"line_end":751,"column_start":28,"column_end":45},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":2549},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_raders.rs","byte_start":786834,"byte_end":786855,"line_start":31,"line_end":31,"column_start":6,"column_end":27},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":6357},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_raders.rs","byte_start":791134,"byte_end":791144,"line_start":115,"line_end":115,"column_start":28,"column_end":38},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":2655},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":812072,"byte_end":812086,"line_start":33,"line_end":33,"column_start":6,"column_end":20},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":6383},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":812626,"byte_end":812640,"line_start":51,"line_end":51,"column_start":6,"column_end":20},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":6399},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":815516,"byte_end":815529,"line_start":116,"line_end":116,"column_start":17,"column_end":30},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":2724},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":820632,"byte_end":820636,"line_start":194,"line_end":194,"column_start":41,"column_end":45},"kind":"SuperTrait","from":{"krate":2,"index":2822},"to":{"krate":0,"index":2734}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":820990,"byte_end":821008,"line_start":204,"line_end":204,"column_start":46,"column_end":64},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":2738},"to":{"krate":0,"index":2734}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":821778,"byte_end":821796,"line_start":221,"line_end":221,"column_start":46,"column_end":64},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":2738},"to":{"krate":0,"index":2734}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":822709,"byte_end":822727,"line_start":242,"line_end":242,"column_start":17,"column_end":35},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":2738},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":834350,"byte_end":834368,"line_start":452,"line_end":452,"column_start":17,"column_end":35},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":2738},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/avx/avx_planner.rs","byte_start":845715,"byte_end":845733,"line_start":664,"line_end":664,"column_start":28,"column_end":46},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":2738},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_vector.rs","byte_start":884876,"byte_end":884884,"line_start":139,"line_end":139,"column_start":19,"column_end":27},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":4733},"to":{"krate":0,"index":2975}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_vector.rs","byte_start":885679,"byte_end":885687,"line_start":162,"line_end":162,"column_start":19,"column_end":27},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":4733},"to":{"krate":0,"index":2975}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_vector.rs","byte_start":887113,"byte_end":887124,"line_start":197,"line_end":197,"column_start":22,"column_end":33},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":4742},"to":{"krate":0,"index":2993}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_vector.rs","byte_start":888061,"byte_end":888072,"line_start":225,"line_end":225,"column_start":22,"column_end":33},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":4742},"to":{"krate":0,"index":2993}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":897723,"byte_end":897739,"line_start":204,"line_end":204,"column_start":17,"column_end":33},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":3071},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":898887,"byte_end":898903,"line_start":246,"line_end":246,"column_start":17,"column_end":33},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":3080},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":899862,"byte_end":899878,"line_start":280,"line_end":280,"column_start":17,"column_end":33},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":3088},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":902920,"byte_end":902936,"line_start":380,"line_end":380,"column_start":17,"column_end":33},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":3105},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":904631,"byte_end":904647,"line_start":442,"line_end":442,"column_start":17,"column_end":33},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":3117},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":908855,"byte_end":908871,"line_start":564,"line_end":564,"column_start":17,"column_end":33},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":3134},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":911296,"byte_end":911312,"line_start":642,"line_end":642,"column_start":17,"column_end":33},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":3147},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":915651,"byte_end":915667,"line_start":772,"line_end":772,"column_start":17,"column_end":33},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":3161},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":918444,"byte_end":918460,"line_start":864,"line_end":864,"column_start":17,"column_end":33},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":3172},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":925176,"byte_end":925192,"line_start":1040,"line_end":1040,"column_start":17,"column_end":33},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":3194},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":928959,"byte_end":928975,"line_start":1146,"line_end":1146,"column_start":17,"column_end":33},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":3209},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":933160,"byte_end":933176,"line_start":1269,"line_end":1269,"column_start":17,"column_end":33},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":3223},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":935866,"byte_end":935882,"line_start":1352,"line_end":1352,"column_start":17,"column_end":33},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":3234},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":940920,"byte_end":940936,"line_start":1490,"line_end":1490,"column_start":17,"column_end":33},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":3252},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":943874,"byte_end":943890,"line_start":1578,"line_end":1578,"column_start":17,"column_end":33},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":3265},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":948773,"byte_end":948789,"line_start":1709,"line_end":1709,"column_start":17,"column_end":33},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":3281},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":951716,"byte_end":951733,"line_start":1785,"line_end":1785,"column_start":17,"column_end":34},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":3296},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":956238,"byte_end":956255,"line_start":1906,"line_end":1906,"column_start":17,"column_end":34},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":3312},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":958836,"byte_end":958853,"line_start":1980,"line_end":1980,"column_start":17,"column_end":34},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":3325},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":963936,"byte_end":963953,"line_start":2120,"line_end":2120,"column_start":17,"column_end":34},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":3342},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":966631,"byte_end":966648,"line_start":2194,"line_end":2194,"column_start":17,"column_end":34},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":3355},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":972089,"byte_end":972106,"line_start":2333,"line_end":2333,"column_start":17,"column_end":34},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":3369},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":975207,"byte_end":975224,"line_start":2420,"line_end":2420,"column_start":17,"column_end":34},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":3382},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":983427,"byte_end":983444,"line_start":2625,"line_end":2625,"column_start":17,"column_end":34},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":3409},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":988871,"byte_end":988888,"line_start":2781,"line_end":2781,"column_start":17,"column_end":34},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":3428},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_butterflies.rs","byte_start":1002547,"byte_end":1002564,"line_start":3094,"line_end":3094,"column_start":17,"column_end":34},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":3467},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_prime_butterflies.rs","byte_start":1021920,"byte_end":1021936,"line_start":50,"line_end":50,"column_start":17,"column_end":33},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":3558},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_prime_butterflies.rs","byte_start":1027729,"byte_end":1027745,"line_start":193,"line_end":193,"column_start":17,"column_end":33},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":3577},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_prime_butterflies.rs","byte_start":1032089,"byte_end":1032106,"line_start":309,"line_end":309,"column_start":17,"column_end":34},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":3595},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_prime_butterflies.rs","byte_start":1041559,"byte_end":1041576,"line_start":518,"line_end":518,"column_start":17,"column_end":34},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":3618},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_prime_butterflies.rs","byte_start":1049126,"byte_end":1049143,"line_start":687,"line_end":687,"column_start":17,"column_end":34},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":3640},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_prime_butterflies.rs","byte_start":1060890,"byte_end":1060907,"line_start":933,"line_end":933,"column_start":17,"column_end":34},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":3665},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_prime_butterflies.rs","byte_start":1070535,"byte_end":1070552,"line_start":1138,"line_end":1138,"column_start":17,"column_end":34},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":3689},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_prime_butterflies.rs","byte_start":1087717,"byte_end":1087734,"line_start":1472,"line_end":1472,"column_start":17,"column_end":34},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":3718},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_prime_butterflies.rs","byte_start":1102177,"byte_end":1102194,"line_start":1754,"line_end":1754,"column_start":17,"column_end":34},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":3746},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_prime_butterflies.rs","byte_start":1122478,"byte_end":1122495,"line_start":2138,"line_end":2138,"column_start":17,"column_end":34},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":3777},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_prime_butterflies.rs","byte_start":1139845,"byte_end":1139862,"line_start":2469,"line_end":2469,"column_start":17,"column_end":34},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":3807},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_prime_butterflies.rs","byte_start":1167436,"byte_end":1167453,"line_start":2965,"line_end":2965,"column_start":17,"column_end":34},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":3842},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_prime_butterflies.rs","byte_start":1191581,"byte_end":1191598,"line_start":3402,"line_end":3402,"column_start":17,"column_end":34},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":3876},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_prime_butterflies.rs","byte_start":1232250,"byte_end":1232267,"line_start":4097,"line_end":4097,"column_start":17,"column_end":34},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":3917},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_prime_butterflies.rs","byte_start":1268510,"byte_end":1268527,"line_start":4715,"line_end":4715,"column_start":17,"column_end":34},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":3957},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_prime_butterflies.rs","byte_start":1314141,"byte_end":1314158,"line_start":5483,"line_end":5483,"column_start":17,"column_end":34},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":4000},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_radix4.rs","byte_start":1364409,"byte_end":1364420,"line_start":62,"line_end":62,"column_start":17,"column_end":28},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":4185},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_radix4.rs","byte_start":1371961,"byte_end":1371972,"line_start":248,"line_end":248,"column_start":17,"column_end":28},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":4202},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_utils.rs","byte_start":1380804,"byte_end":1380815,"line_start":16,"line_end":16,"column_start":6,"column_end":17},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":4221},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_utils.rs","byte_start":1385701,"byte_end":1385712,"line_start":170,"line_end":170,"column_start":6,"column_end":17},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":4239},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1390589,"byte_end":1390595,"line_start":74,"line_end":74,"column_start":6,"column_end":12},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":7296},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/rustfft-6.0.1/src/sse/sse_planner.rs","byte_start":1393938,"byte_end":1393951,"line_start":157,"line_end":157,"column_start":17,"column_end":30},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":4287},"to":{"krate":4294967295,"index":4294967295}}]}