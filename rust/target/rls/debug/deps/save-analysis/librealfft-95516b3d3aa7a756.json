{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1","program":"/Users/spluta1/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","realfft","--edition=2018","/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=95516b3d3aa7a756","-C","extra-filename=-95516b3d3aa7a756","--out-dir","/Users/spluta1/Documents/rust/time_stretch/target/rls/debug/deps","-L","dependency=/Users/spluta1/Documents/rust/time_stretch/target/rls/debug/deps","--extern","rustfft=/Users/spluta1/Documents/rust/time_stretch/target/rls/debug/deps/librustfft-82876259b51e4046.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/spluta1/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/spluta1/Documents/rust/time_stretch/target/rls/debug/deps/librealfft-95516b3d3aa7a756.rmeta"},"prelude":{"crate_id":{"name":"realfft","disambiguator":[4994986103386310453,2532878608690573673]},"crate_root":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src","external_crates":[{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[11266178634318078844,10430434914575217037]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[11698766721189094488,12060600386163665861]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[7682173449702177568,11032960836976215208]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[4743338922599007115,7423637119316760057]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[2427264904945132901,10184032034968735412]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[9774951351864599068,14817832832842499961]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[10809433593918525561,458952361993985826]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15028772050842969220,14160812736163645060]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[6995225455969351707,4449664983666090491]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8140348155906305511,16205222570971502248]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[233178625001733801,10631967199943834554]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[1525994598401419908,3288373240607898362]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[6171023582747105604,8380219937402072808]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[16379221974889702373,16836676840445794723]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[17037182358159064978,13693302728723089691]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","num":16,"id":{"name":"rustfft","disambiguator":[18312276072940434199,18373487257210581486]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","num":17,"id":{"name":"num_complex","disambiguator":[14058316524210774147,4955096035788976948]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","num":18,"id":{"name":"num_traits","disambiguator":[2989495312243378153,7941914983733176037]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","num":19,"id":{"name":"num_integer","disambiguator":[17316086056191561063,15440118491029719635]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","num":20,"id":{"name":"strength_reduce","disambiguator":[13438270270157312807,3404482292596758658]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","num":21,"id":{"name":"transpose","disambiguator":[2082918241939600709,5705930986802704350]}},{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","num":22,"id":{"name":"primal_check","disambiguator":[15709841444248103327,16942345003955410193]}}],"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":0,"byte_end":38860,"line_start":1,"line_end":1018,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":17,"index":0},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":5544,"byte_end":5555,"line_start":131,"line_end":131,"column_start":18,"column_end":29},"alias_span":null,"name":"num_complex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":18,"index":0},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":5574,"byte_end":5584,"line_start":132,"line_end":132,"column_start":18,"column_end":28},"alias_span":null,"name":"num_traits","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":23},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":5603,"byte_end":5609,"line_start":133,"line_end":133,"column_start":18,"column_end":24},"alias_span":null,"name":"FftNum","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":0,"byte_end":38860,"line_start":1,"line_end":1018,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":6},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":15},{"krate":0,"index":18},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":152},{"krate":0,"index":154},{"krate":0,"index":35},{"krate":0,"index":37},{"krate":0,"index":39},{"krate":0,"index":41},{"krate":0,"index":43},{"krate":0,"index":48},{"krate":0,"index":54},{"krate":0,"index":59},{"krate":0,"index":65},{"krate":0,"index":74},{"krate":0,"index":83},{"krate":0,"index":89},{"krate":0,"index":94},{"krate":0,"index":99},{"krate":0,"index":102},{"krate":0,"index":105},{"krate":0,"index":114},{"krate":0,"index":118},{"krate":0,"index":127},{"krate":0,"index":130},{"krate":0,"index":139},{"krate":0,"index":143}],"decl_id":null,"docs":" # RealFFT: Real-to-complex FFT and complex-to-real iFFT based on RustFFT","sig":null,"attributes":[{"value":"/ # RealFFT: Real-to-complex FFT and complex-to-real iFFT based on RustFFT","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":0,"byte_end":76,"line_start":1,"line_end":1,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":77,"byte_end":80,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This library is a wrapper for RustFFT that enables performing FFT of real-valued data.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":81,"byte_end":171,"line_start":3,"line_end":3,"column_start":1,"column_end":91}},{"value":"/ The API is designed to be as similar as possible to RustFFT.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":172,"byte_end":236,"line_start":4,"line_end":4,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":237,"byte_end":240,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ Using this library instead of RustFFT directly avoids the need of converting real-valued data to complex before performing a FFT.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":241,"byte_end":374,"line_start":6,"line_end":6,"column_start":1,"column_end":134}},{"value":"/ If the length is even, it also enables faster computations by using a complex FFT of half the length.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":375,"byte_end":480,"line_start":7,"line_end":7,"column_start":1,"column_end":106}},{"value":"/ It then packs a 2N long real vector into an N long complex vector, which is transformed using a standard FFT.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":481,"byte_end":594,"line_start":8,"line_end":8,"column_start":1,"column_end":114}},{"value":"/ The FFT result is then post-processed to give only the first half of the complex spectrum, as an N+1 long complex vector.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":595,"byte_end":720,"line_start":9,"line_end":9,"column_start":1,"column_end":126}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":721,"byte_end":724,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ The iFFT goes through the same steps backwards, to transform an N+1 long complex spectrum to a 2N long real result.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":725,"byte_end":844,"line_start":11,"line_end":11,"column_start":1,"column_end":120}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":845,"byte_end":848,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ The speed increase compared to just converting the input to a 2N long complex vector","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":849,"byte_end":937,"line_start":13,"line_end":13,"column_start":1,"column_end":89}},{"value":"/ and using a 2N long FFT depends on the length f the input data.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":938,"byte_end":1005,"line_start":14,"line_end":14,"column_start":1,"column_end":68}},{"value":"/ The largest improvements are for long FFTs and for lengths over around 1000 elements there is an improvement of about a factor 2.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":1006,"byte_end":1139,"line_start":15,"line_end":15,"column_start":1,"column_end":134}},{"value":"/ The difference shrinks for shorter lengths, and around 30 elements there is no longer any difference.  ","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":1140,"byte_end":1247,"line_start":16,"line_end":16,"column_start":1,"column_end":108}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":1248,"byte_end":1251,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ ## Why use real-to-complex FFT?","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":1252,"byte_end":1287,"line_start":18,"line_end":18,"column_start":1,"column_end":36}},{"value":"/ ### Using a complex-to-complex FFT","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":1288,"byte_end":1326,"line_start":19,"line_end":19,"column_start":1,"column_end":39}},{"value":"/ A simple way to get the FFT of a rea values vector is to convert it to complex, and using a complex-to-complex FFT.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":1327,"byte_end":1446,"line_start":20,"line_end":20,"column_start":1,"column_end":120}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":1447,"byte_end":1450,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Let's assume `x` is a 6 element long real vector:","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":1451,"byte_end":1504,"line_start":22,"line_end":22,"column_start":1,"column_end":54}},{"value":"/ ```text","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":1505,"byte_end":1516,"line_start":23,"line_end":23,"column_start":1,"column_end":12}},{"value":"/ x = [x0r, x1r, x2r, x3r, x4r, x5r]","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":1517,"byte_end":1555,"line_start":24,"line_end":24,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":1556,"byte_end":1563,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":1564,"byte_end":1567,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ We now convert `x` to complex by adding an imaginary part with value zero. Using the notation `(xNr, xNi)` for the complex value `xN`, this becomes:","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":1568,"byte_end":1720,"line_start":27,"line_end":27,"column_start":1,"column_end":153}},{"value":"/ ```text","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":1721,"byte_end":1732,"line_start":28,"line_end":28,"column_start":1,"column_end":12}},{"value":"/ x_c = [(x0r, 0), (x1r, 0), (x2r, 0), (x3r, 0), (x4r, 0, (x5r, 0)]","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":1733,"byte_end":1802,"line_start":29,"line_end":29,"column_start":1,"column_end":70}},{"value":"/ ```","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":1803,"byte_end":1810,"line_start":30,"line_end":30,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":1811,"byte_end":1814,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ Performing a normal complex FFT, the result of `FFT(x_c)` is:","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":1815,"byte_end":1880,"line_start":32,"line_end":32,"column_start":1,"column_end":66}},{"value":"/ ```text","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":1881,"byte_end":1892,"line_start":33,"line_end":33,"column_start":1,"column_end":12}},{"value":"/ FFT(x_c) = [(X0r, X0i), (X1r, X1i), (X2r, X2i), (X3r, X3i), (X4r, X4i), (X5r, X5i)]","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":1893,"byte_end":1980,"line_start":34,"line_end":34,"column_start":1,"column_end":88}},{"value":"/ ```","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":1981,"byte_end":1988,"line_start":35,"line_end":35,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":1989,"byte_end":1992,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ But because our `x_c` is real-valued (all imaginary parts are zero), some of this becomes redundant:","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":1993,"byte_end":2097,"line_start":37,"line_end":37,"column_start":1,"column_end":105}},{"value":"/ ```text","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":2098,"byte_end":2109,"line_start":38,"line_end":38,"column_start":1,"column_end":12}},{"value":"/ FFT(x_c) = [(X0r, 0), (X1r, X1i), (X2r, X2i), (X3r, 0), (X2r, -X2i), (X1r, -X1i)]","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":2110,"byte_end":2195,"line_start":39,"line_end":39,"column_start":1,"column_end":86}},{"value":"/ ```","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":2196,"byte_end":2203,"line_start":40,"line_end":40,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":2204,"byte_end":2207,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ The last two values are the complex conjugates of `X1` and `X2`. Additionally, `X0i` and `X3i` are zero.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":2208,"byte_end":2316,"line_start":42,"line_end":42,"column_start":1,"column_end":109}},{"value":"/ As we can see, the output contains 6 independent values, and the rest is redundant.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":2317,"byte_end":2404,"line_start":43,"line_end":43,"column_start":1,"column_end":88}},{"value":"/ But it still takes time for the FFT to calculate the redundant values.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":2405,"byte_end":2479,"line_start":44,"line_end":44,"column_start":1,"column_end":75}},{"value":"/ Converting the input data to complex also takes a little bit of time.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":2480,"byte_end":2553,"line_start":45,"line_end":45,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":2554,"byte_end":2557,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ If the length of `x` instead had been 7, result would have been:","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":2558,"byte_end":2626,"line_start":47,"line_end":47,"column_start":1,"column_end":69}},{"value":"/ ```text","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":2627,"byte_end":2638,"line_start":48,"line_end":48,"column_start":1,"column_end":12}},{"value":"/ FFT(x_c) = [(X0r, 0), (X1r, X1i), (X2r, X2i), (X3r, X3i), (X3r, -X3i), (X2r, -X2i), (X1r, -X1i)]","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":2639,"byte_end":2739,"line_start":49,"line_end":49,"column_start":1,"column_end":101}},{"value":"/ ```","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":2740,"byte_end":2747,"line_start":50,"line_end":50,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":2748,"byte_end":2751,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ The result is similar, but this time there is no zero at `X3i`. Also in this case we got the same number of indendent values as we started with.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":2752,"byte_end":2900,"line_start":52,"line_end":52,"column_start":1,"column_end":149}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":2901,"byte_end":2904,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ ### Real-to-complex","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":2905,"byte_end":2928,"line_start":54,"line_end":54,"column_start":1,"column_end":24}},{"value":"/ Using a real-to-complex FFT removes the need for converting the input data to complex.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":2929,"byte_end":3019,"line_start":55,"line_end":55,"column_start":1,"column_end":91}},{"value":"/ It also avoids caclulating the redundant output values.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":3020,"byte_end":3079,"line_start":56,"line_end":56,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":3080,"byte_end":3083,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ The result for 6 elements is:","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":3084,"byte_end":3117,"line_start":58,"line_end":58,"column_start":1,"column_end":34}},{"value":"/ ```text","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":3118,"byte_end":3129,"line_start":59,"line_end":59,"column_start":1,"column_end":12}},{"value":"/ RealFFT(x) = [(X0r, 0), (X1r, X1i), (X2r, X2i), (X3r, 0)]","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":3130,"byte_end":3191,"line_start":60,"line_end":60,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":3192,"byte_end":3199,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":3200,"byte_end":3203,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ The result for 7 elements is:","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":3204,"byte_end":3237,"line_start":63,"line_end":63,"column_start":1,"column_end":34}},{"value":"/ ```text","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":3238,"byte_end":3249,"line_start":64,"line_end":64,"column_start":1,"column_end":12}},{"value":"/ RealFFT(x) = [(X0r, 0), (X1r, X1i), (X2r, X2i), (X3r, X3i)]","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":3250,"byte_end":3313,"line_start":65,"line_end":65,"column_start":1,"column_end":64}},{"value":"/ ```","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":3314,"byte_end":3321,"line_start":66,"line_end":66,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":3322,"byte_end":3325,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ This is the data layout output by the real-to-complex FFT, and the one expected as input to the complex-to-real iFFT.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":3326,"byte_end":3447,"line_start":68,"line_end":68,"column_start":1,"column_end":122}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":3448,"byte_end":3451,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ ## Scaling","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":3452,"byte_end":3466,"line_start":70,"line_end":70,"column_start":1,"column_end":15}},{"value":"/ RealFFT matches the behaviour of RustFFT and does not normalize the output of either FFT of iFFT. To get normalized results, each element must be scaled by `1/sqrt(length)`. If the processing involves both an FFT and an iFFT step, it is advisable to merge the two normalization steps to a single, by scaling by `1/length`.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":3467,"byte_end":3793,"line_start":71,"line_end":71,"column_start":1,"column_end":327}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":3794,"byte_end":3797,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ ## Documentation","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":3798,"byte_end":3818,"line_start":73,"line_end":73,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":3819,"byte_end":3822,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ The full documentation can be generated by rustdoc. To generate and view it run:","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":3823,"byte_end":3907,"line_start":75,"line_end":75,"column_start":1,"column_end":85}},{"value":"/ ```text","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":3908,"byte_end":3919,"line_start":76,"line_end":76,"column_start":1,"column_end":12}},{"value":"/ cargo doc --open","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":3920,"byte_end":3940,"line_start":77,"line_end":77,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":3941,"byte_end":3948,"line_start":78,"line_end":78,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":3949,"byte_end":3952,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ ## Benchmarks","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":3953,"byte_end":3970,"line_start":80,"line_end":80,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":3971,"byte_end":3974,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ To run a set of benchmarks comparing real-to-complex FFT with standard complex-to-complex, type:","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":3975,"byte_end":4075,"line_start":82,"line_end":82,"column_start":1,"column_end":101}},{"value":"/ ```text","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":4076,"byte_end":4087,"line_start":83,"line_end":83,"column_start":1,"column_end":12}},{"value":"/ cargo bench","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":4088,"byte_end":4103,"line_start":84,"line_end":84,"column_start":1,"column_end":16}},{"value":"/ ```","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":4104,"byte_end":4111,"line_start":85,"line_end":85,"column_start":1,"column_end":8}},{"value":"/ The results are printed while running, and are compiled into an html report containing much more details.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":4112,"byte_end":4221,"line_start":86,"line_end":86,"column_start":1,"column_end":110}},{"value":"/ To view, open `target/criterion/report/index.html` in a browser.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":4222,"byte_end":4290,"line_start":87,"line_end":87,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":4291,"byte_end":4294,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ ## Example","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":4295,"byte_end":4309,"line_start":89,"line_end":89,"column_start":1,"column_end":15}},{"value":"/ Transform a vector, and then inverse transform the result.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":4310,"byte_end":4372,"line_start":90,"line_end":90,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":4373,"byte_end":4380,"line_start":91,"line_end":91,"column_start":1,"column_end":8}},{"value":"/ use realfft::RealFftPlanner;","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":4381,"byte_end":4413,"line_start":92,"line_end":92,"column_start":1,"column_end":33}},{"value":"/ use rustfft::num_complex::Complex;","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":4414,"byte_end":4452,"line_start":93,"line_end":93,"column_start":1,"column_end":39}},{"value":"/ use rustfft::num_traits::Zero;","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":4453,"byte_end":4487,"line_start":94,"line_end":94,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":4488,"byte_end":4491,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ let length = 256;","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":4492,"byte_end":4513,"line_start":96,"line_end":96,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":4514,"byte_end":4517,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ // make a planner","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":4518,"byte_end":4539,"line_start":98,"line_end":98,"column_start":1,"column_end":22}},{"value":"/ let mut real_planner = RealFftPlanner::<f64>::new();","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":4540,"byte_end":4596,"line_start":99,"line_end":99,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":4597,"byte_end":4600,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ // create a FFT","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":4601,"byte_end":4620,"line_start":101,"line_end":101,"column_start":1,"column_end":20}},{"value":"/ let r2c = real_planner.plan_fft_forward(length);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":4621,"byte_end":4673,"line_start":102,"line_end":102,"column_start":1,"column_end":53}},{"value":"/ // make input and output vectors","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":4674,"byte_end":4710,"line_start":103,"line_end":103,"column_start":1,"column_end":37}},{"value":"/ let mut indata = r2c.make_input_vec();","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":4711,"byte_end":4753,"line_start":104,"line_end":104,"column_start":1,"column_end":43}},{"value":"/ let mut spectrum = r2c.make_output_vec();","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":4754,"byte_end":4799,"line_start":105,"line_end":105,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":4800,"byte_end":4803,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ // Are they the length we expect?","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":4804,"byte_end":4841,"line_start":107,"line_end":107,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(indata.len(), length);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":4842,"byte_end":4879,"line_start":108,"line_end":108,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(spectrum.len(), length/2+1);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":4880,"byte_end":4923,"line_start":109,"line_end":109,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":4924,"byte_end":4927,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ // Forward transform the input data","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":4928,"byte_end":4967,"line_start":111,"line_end":111,"column_start":1,"column_end":40}},{"value":"/ r2c.process(&mut indata, &mut spectrum).unwrap();","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":4968,"byte_end":5021,"line_start":112,"line_end":112,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":5022,"byte_end":5025,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ // create an iFFT and an output vector","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":5026,"byte_end":5068,"line_start":114,"line_end":114,"column_start":1,"column_end":43}},{"value":"/ let c2r = real_planner.plan_fft_inverse(length);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":5069,"byte_end":5121,"line_start":115,"line_end":115,"column_start":1,"column_end":53}},{"value":"/ let mut outdata = c2r.make_output_vec();","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":5122,"byte_end":5166,"line_start":116,"line_end":116,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(outdata.len(), length);","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":5167,"byte_end":5205,"line_start":117,"line_end":117,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":5206,"byte_end":5209,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ c2r.process(&mut spectrum, &mut outdata).unwrap();","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":5210,"byte_end":5264,"line_start":119,"line_end":119,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":5265,"byte_end":5272,"line_start":120,"line_end":120,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":5273,"byte_end":5276,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ ### Versions","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":5277,"byte_end":5293,"line_start":122,"line_end":122,"column_start":1,"column_end":17}},{"value":"/ - 2.0.0: Update RustFFT to 6.0.0 and num-complex to 0.4.0.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":5294,"byte_end":5356,"line_start":123,"line_end":123,"column_start":1,"column_end":63}},{"value":"/ - 1.1.0: Add missing Sync+Send.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":5357,"byte_end":5392,"line_start":124,"line_end":124,"column_start":1,"column_end":36}},{"value":"/ - 1.0.0: First version with new api.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":5393,"byte_end":5433,"line_start":125,"line_end":125,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":5434,"byte_end":5437,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ ### Compatibility","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":5438,"byte_end":5459,"line_start":127,"line_end":127,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":5460,"byte_end":5463,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ The `realfft` crate requires rustc version 1.37 or newer.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":5464,"byte_end":5525,"line_start":129,"line_end":129,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":152},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":5896,"byte_end":5904,"line_start":147,"line_end":147,"column_start":12,"column_end":20},"name":"FftError","qualname":"::FftError","value":"FftError {  }","parent":null,"children":[{"krate":0,"index":153}],"decl_id":null,"docs":" Custom error returned by FFTs\n","sig":null,"attributes":[{"value":"/ Custom error returned by FFTs","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":5834,"byte_end":5867,"line_start":145,"line_end":145,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":6192,"byte_end":6195,"line_start":164,"line_end":164,"column_start":12,"column_end":15},"name":"new","qualname":"<FftError>::new","value":"pub fn new(&str) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":43},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":6602,"byte_end":6618,"line_start":180,"line_end":180,"column_start":12,"column_end":28},"name":"RealToComplexOdd","qualname":"::RealToComplexOdd","value":"RealToComplexOdd {  }","parent":null,"children":[{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":48},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":6727,"byte_end":6744,"line_start":186,"line_end":186,"column_start":12,"column_end":29},"name":"RealToComplexEven","qualname":"::RealToComplexEven","value":"RealToComplexEven {  }","parent":null,"children":[{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":54},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":6884,"byte_end":6900,"line_start":193,"line_end":193,"column_start":12,"column_end":28},"name":"ComplexToRealOdd","qualname":"::ComplexToRealOdd","value":"ComplexToRealOdd {  }","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":59},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":7009,"byte_end":7026,"line_start":199,"line_end":199,"column_start":12,"column_end":29},"name":"ComplexToRealEven","qualname":"::ComplexToRealEven","value":"ComplexToRealEven {  }","parent":null,"children":[{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":65},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":7326,"byte_end":7339,"line_start":209,"line_end":209,"column_start":11,"column_end":24},"name":"RealToComplex","qualname":"::RealToComplex","value":"RealToComplex<T>: Sync + Send","parent":null,"children":[{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73}],"decl_id":null,"docs":" An FFT that takes a real-valued input vector of length 2*N and transforms it to a complex\n spectrum of length N+1.\n","sig":null,"attributes":[{"value":"/ An FFT that takes a real-valued input vector of length 2*N and transforms it to a complex","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":7155,"byte_end":7248,"line_start":206,"line_end":206,"column_start":1,"column_end":94}},{"value":"/ spectrum of length N+1.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":7249,"byte_end":7276,"line_start":207,"line_end":207,"column_start":1,"column_end":28}},{"value":"allow(clippy :: len_without_is_empty)","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":7277,"byte_end":7315,"line_start":208,"line_end":208,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":7770,"byte_end":7777,"line_start":214,"line_end":214,"column_start":8,"column_end":15},"name":"process","qualname":"::RealToComplex::process","value":"pub fn process(&Self, &mut [T], &mut [Complex<T>]) -> Res<()>","parent":{"krate":0,"index":65},"children":[],"decl_id":null,"docs":" Transform a vector of N real-valued samples, storing the result in the N/2+1 (with N/2 rounded down) element long complex output vector.\n The input buffer is used as scratch space, so the contents of input should be considered garbage after calling.\n It also allocates additional scratch space as needed.\n An error is returned if any of the given slices has the wrong length.\n","sig":null,"attributes":[{"value":"/ Transform a vector of N real-valued samples, storing the result in the N/2+1 (with N/2 rounded down) element long complex output vector.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":7362,"byte_end":7502,"line_start":210,"line_end":210,"column_start":5,"column_end":145}},{"value":"/ The input buffer is used as scratch space, so the contents of input should be considered garbage after calling.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":7507,"byte_end":7622,"line_start":211,"line_end":211,"column_start":5,"column_end":120}},{"value":"/ It also allocates additional scratch space as needed.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":7627,"byte_end":7684,"line_start":212,"line_end":212,"column_start":5,"column_end":62}},{"value":"/ An error is returned if any of the given slices has the wrong length.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":7689,"byte_end":7762,"line_start":213,"line_end":213,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":8317,"byte_end":8337,"line_start":220,"line_end":220,"column_start":8,"column_end":28},"name":"process_with_scratch","qualname":"::RealToComplex::process_with_scratch","value":"pub fn process_with_scratch(&Self, &mut [T], &mut [Complex<T>],\n                            &mut [Complex<T>]) -> Res<()>","parent":{"krate":0,"index":65},"children":[],"decl_id":null,"docs":" Transform a vector of N real-valued samples, storing the result in the N/2+1 (with N/2 rounded down) element long complex output vector.\n The input buffer is used as scratch space, so the contents of input should be considered garbage after calling.\n It also uses the provided scratch vector instead of allocating, which will be faster if it is called more than once.\n An error is returned if any of the given slices has the wrong length.\n","sig":null,"attributes":[{"value":"/ Transform a vector of N real-valued samples, storing the result in the N/2+1 (with N/2 rounded down) element long complex output vector.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":7846,"byte_end":7986,"line_start":216,"line_end":216,"column_start":5,"column_end":145}},{"value":"/ The input buffer is used as scratch space, so the contents of input should be considered garbage after calling.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":7991,"byte_end":8106,"line_start":217,"line_end":217,"column_start":5,"column_end":120}},{"value":"/ It also uses the provided scratch vector instead of allocating, which will be faster if it is called more than once.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":8111,"byte_end":8231,"line_start":218,"line_end":218,"column_start":5,"column_end":125}},{"value":"/ An error is returned if any of the given slices has the wrong length.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":8236,"byte_end":8309,"line_start":219,"line_end":219,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":8555,"byte_end":8570,"line_start":228,"line_end":228,"column_start":8,"column_end":23},"name":"get_scratch_len","qualname":"::RealToComplex::get_scratch_len","value":"pub fn get_scratch_len(&Self) -> usize","parent":{"krate":0,"index":65},"children":[],"decl_id":null,"docs":" Get the length of the scratch space needed for `process_with_scratch`.\n","sig":null,"attributes":[{"value":"/ Get the length of the scratch space needed for `process_with_scratch`.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":8473,"byte_end":8547,"line_start":227,"line_end":227,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":8656,"byte_end":8659,"line_start":231,"line_end":231,"column_start":8,"column_end":11},"name":"len","qualname":"::RealToComplex::len","value":"pub fn len(&Self) -> usize","parent":{"krate":0,"index":65},"children":[],"decl_id":null,"docs":" Get the number of points that this FFT can process.\n","sig":null,"attributes":[{"value":"/ Get the number of points that this FFT can process.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":8593,"byte_end":8648,"line_start":230,"line_end":230,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":8766,"byte_end":8780,"line_start":234,"line_end":234,"column_start":8,"column_end":22},"name":"make_input_vec","qualname":"::RealToComplex::make_input_vec","value":"pub fn make_input_vec(&Self) -> Vec<T>","parent":{"krate":0,"index":65},"children":[],"decl_id":null,"docs":" Convenience method to make an input vector of the right type and length.\n","sig":null,"attributes":[{"value":"/ Convenience method to make an input vector of the right type and length.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":8682,"byte_end":8758,"line_start":233,"line_end":233,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":8889,"byte_end":8904,"line_start":237,"line_end":237,"column_start":8,"column_end":23},"name":"make_output_vec","qualname":"::RealToComplex::make_output_vec","value":"pub fn make_output_vec(&Self) -> Vec<Complex<T>>","parent":{"krate":0,"index":65},"children":[],"decl_id":null,"docs":" Convenience method to make an output vector of the right type and length.\n","sig":null,"attributes":[{"value":"/ Convenience method to make an output vector of the right type and length.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":8804,"byte_end":8881,"line_start":236,"line_end":236,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":9022,"byte_end":9038,"line_start":240,"line_end":240,"column_start":8,"column_end":24},"name":"make_scratch_vec","qualname":"::RealToComplex::make_scratch_vec","value":"pub fn make_scratch_vec(&Self) -> Vec<Complex<T>>","parent":{"krate":0,"index":65},"children":[],"decl_id":null,"docs":" Convenience method to make a scratch vector of the right type and length.\n","sig":null,"attributes":[{"value":"/ Convenience method to make a scratch vector of the right type and length.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":8937,"byte_end":9014,"line_start":239,"line_end":239,"column_start":5,"column_end":82}}]},{"kind":"Trait","id":{"krate":0,"index":74},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":9243,"byte_end":9256,"line_start":246,"line_end":246,"column_start":11,"column_end":24},"name":"ComplexToReal","qualname":"::ComplexToReal","value":"ComplexToReal<T>: Sync + Send","parent":null,"children":[{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82}],"decl_id":null,"docs":" An FFT that takes a complex-valued input vector of length N+1 and transforms it to a complex\n spectrum of length 2*N.\n","sig":null,"attributes":[{"value":"/ An FFT that takes a complex-valued input vector of length N+1 and transforms it to a complex","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":9069,"byte_end":9165,"line_start":243,"line_end":243,"column_start":1,"column_end":97}},{"value":"/ spectrum of length 2*N.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":9166,"byte_end":9193,"line_start":244,"line_end":244,"column_start":1,"column_end":28}},{"value":"allow(clippy :: len_without_is_empty)","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":9194,"byte_end":9232,"line_start":245,"line_end":245,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":9667,"byte_end":9674,"line_start":251,"line_end":251,"column_start":8,"column_end":15},"name":"process","qualname":"::ComplexToReal::process","value":"pub fn process(&Self, &mut [Complex<T>], &mut [T]) -> Res<()>","parent":{"krate":0,"index":74},"children":[],"decl_id":null,"docs":" Transform a complex spectrum of N/2+1 (with N/2 rounded down) values and store the real result in the N long output.\n The input buffer is used as scratch space, so the contents of input should be considered garbage after calling.\n It also allocates additional scratch space as needed.\n An error is returned if any of the given slices has the wrong length.\n","sig":null,"attributes":[{"value":"/ Transform a complex spectrum of N/2+1 (with N/2 rounded down) values and store the real result in the N long output.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":9279,"byte_end":9399,"line_start":247,"line_end":247,"column_start":5,"column_end":125}},{"value":"/ The input buffer is used as scratch space, so the contents of input should be considered garbage after calling.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":9404,"byte_end":9519,"line_start":248,"line_end":248,"column_start":5,"column_end":120}},{"value":"/ It also allocates additional scratch space as needed.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":9524,"byte_end":9581,"line_start":249,"line_end":249,"column_start":5,"column_end":62}},{"value":"/ An error is returned if any of the given slices has the wrong length.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":9586,"byte_end":9659,"line_start":250,"line_end":250,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":10196,"byte_end":10216,"line_start":257,"line_end":257,"column_start":8,"column_end":28},"name":"process_with_scratch","qualname":"::ComplexToReal::process_with_scratch","value":"pub fn process_with_scratch(&Self, &mut [Complex<T>], &mut [T],\n                            &mut [Complex<T>]) -> Res<()>","parent":{"krate":0,"index":74},"children":[],"decl_id":null,"docs":" Transform a complex spectrum of N/2+1 (with N/2 rounded down) values and store the real result in the 2*N long output.\n The input buffer is used as scratch space, so the contents of input should be considered garbage after calling.\n It also uses the provided scratch vector instead of allocating, which will be faster if it is called more than once.\n An error is returned if any of the given slices has the wrong length.\n","sig":null,"attributes":[{"value":"/ Transform a complex spectrum of N/2+1 (with N/2 rounded down) values and store the real result in the 2*N long output.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":9743,"byte_end":9865,"line_start":253,"line_end":253,"column_start":5,"column_end":127}},{"value":"/ The input buffer is used as scratch space, so the contents of input should be considered garbage after calling.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":9870,"byte_end":9985,"line_start":254,"line_end":254,"column_start":5,"column_end":120}},{"value":"/ It also uses the provided scratch vector instead of allocating, which will be faster if it is called more than once.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":9990,"byte_end":10110,"line_start":255,"line_end":255,"column_start":5,"column_end":125}},{"value":"/ An error is returned if any of the given slices has the wrong length.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":10115,"byte_end":10188,"line_start":256,"line_end":256,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":10434,"byte_end":10449,"line_start":265,"line_end":265,"column_start":8,"column_end":23},"name":"get_scratch_len","qualname":"::ComplexToReal::get_scratch_len","value":"pub fn get_scratch_len(&Self) -> usize","parent":{"krate":0,"index":74},"children":[],"decl_id":null,"docs":" Get the length of the scratch space needed for `process_with_scratch`.\n","sig":null,"attributes":[{"value":"/ Get the length of the scratch space needed for `process_with_scratch`.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":10352,"byte_end":10426,"line_start":264,"line_end":264,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":10535,"byte_end":10538,"line_start":268,"line_end":268,"column_start":8,"column_end":11},"name":"len","qualname":"::ComplexToReal::len","value":"pub fn len(&Self) -> usize","parent":{"krate":0,"index":74},"children":[],"decl_id":null,"docs":" Get the number of points that this FFT can process.\n","sig":null,"attributes":[{"value":"/ Get the number of points that this FFT can process.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":10472,"byte_end":10527,"line_start":267,"line_end":267,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":10645,"byte_end":10659,"line_start":271,"line_end":271,"column_start":8,"column_end":22},"name":"make_input_vec","qualname":"::ComplexToReal::make_input_vec","value":"pub fn make_input_vec(&Self) -> Vec<Complex<T>>","parent":{"krate":0,"index":74},"children":[],"decl_id":null,"docs":" Convenience method to make an input vector of the right type and length.\n","sig":null,"attributes":[{"value":"/ Convenience method to make an input vector of the right type and length.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":10561,"byte_end":10637,"line_start":270,"line_end":270,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":10777,"byte_end":10792,"line_start":274,"line_end":274,"column_start":8,"column_end":23},"name":"make_output_vec","qualname":"::ComplexToReal::make_output_vec","value":"pub fn make_output_vec(&Self) -> Vec<T>","parent":{"krate":0,"index":74},"children":[],"decl_id":null,"docs":" Convenience method to make an output vector of the right type and length.\n","sig":null,"attributes":[{"value":"/ Convenience method to make an output vector of the right type and length.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":10692,"byte_end":10769,"line_start":273,"line_end":273,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":10901,"byte_end":10917,"line_start":277,"line_end":277,"column_start":8,"column_end":24},"name":"make_scratch_vec","qualname":"::ComplexToReal::make_scratch_vec","value":"pub fn make_scratch_vec(&Self) -> Vec<Complex<T>>","parent":{"krate":0,"index":74},"children":[],"decl_id":null,"docs":" Convenience method to make a scratch vector of the right type and length.\n","sig":null,"attributes":[{"value":"/ Convenience method to make a scratch vector of the right type and length.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":10816,"byte_end":10893,"line_start":276,"line_end":276,"column_start":5,"column_end":82}}]},{"kind":"Struct","id":{"krate":0,"index":89},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":11360,"byte_end":11374,"line_start":293,"line_end":293,"column_start":12,"column_end":26},"name":"RealFftPlanner","qualname":"::RealFftPlanner","value":"RealFftPlanner {  }","parent":null,"children":[{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93}],"decl_id":null,"docs":" A planner is used to create FFTs. It caches results internally,\n so when making more than one FFT it is advisable to reuse the same planner.\n","sig":null,"attributes":[{"value":"/ A planner is used to create FFTs. It caches results internally,","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":11201,"byte_end":11268,"line_start":291,"line_end":291,"column_start":1,"column_end":68}},{"value":"/ so when making more than one FFT it is advisable to reuse the same planner.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":11269,"byte_end":11348,"line_start":292,"line_end":292,"column_start":1,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":11612,"byte_end":11615,"line_start":301,"line_end":301,"column_start":12,"column_end":15},"name":"new","qualname":"<RealFftPlanner<T>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new planner.\n","sig":null,"attributes":[{"value":"/ Create a new planner.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":11575,"byte_end":11600,"line_start":300,"line_end":300,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":12016,"byte_end":12032,"line_start":312,"line_end":312,"column_start":12,"column_end":28},"name":"plan_fft_forward","qualname":"<RealFftPlanner<T>>::plan_fft_forward","value":"pub fn plan_fft_forward(&mut Self, usize) -> Arc<dyn RealToComplex<T>>","parent":null,"children":[],"decl_id":null,"docs":" Plan a Real-to-Complex forward FFT. Returns the FFT in a shared reference.\n If requesting a second FFT of the same length, this will return a new reference to the already existing one.\n","sig":null,"attributes":[{"value":"/ Plan a Real-to-Complex forward FFT. Returns the FFT in a shared reference.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":11809,"byte_end":11887,"line_start":310,"line_end":310,"column_start":5,"column_end":83}},{"value":"/ If requesting a second FFT of the same length, this will return a new reference to the already existing one.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":11892,"byte_end":12004,"line_start":311,"line_end":311,"column_start":5,"column_end":117}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":12787,"byte_end":12803,"line_start":329,"line_end":329,"column_start":12,"column_end":28},"name":"plan_fft_inverse","qualname":"<RealFftPlanner<T>>::plan_fft_inverse","value":"pub fn plan_fft_inverse(&mut Self, usize) -> Arc<dyn ComplexToReal<T>>","parent":null,"children":[],"decl_id":null,"docs":" Plan a Complex-to-Real inverse FFT. Returns the FFT in a shared reference.\n If requesting a second FFT of the same length, this will return a new reference to the already existing one.\n","sig":null,"attributes":[{"value":"/ Plan a Complex-to-Real inverse FFT. Returns the FFT in a shared reference.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":12580,"byte_end":12658,"line_start":327,"line_end":327,"column_start":5,"column_end":83}},{"value":"/ If requesting a second FFT of the same length, this will return a new reference to the already existing one.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":12663,"byte_end":12775,"line_start":328,"line_end":328,"column_start":5,"column_end":117}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":13670,"byte_end":13673,"line_start":354,"line_end":354,"column_start":12,"column_end":15},"name":"new","qualname":"<RealToComplexOdd<T>>::new","value":"pub fn new(usize, &mut FftPlanner<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new RealToComplex FFT for input data of a given length, and uses the given FftPlanner to build the inner FFT.\n Panics if the length is not odd.\n","sig":null,"attributes":[{"value":"/ Create a new RealToComplex FFT for input data of a given length, and uses the given FftPlanner to build the inner FFT.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":13495,"byte_end":13617,"line_start":352,"line_end":352,"column_start":5,"column_end":127}},{"value":"/ Panics if the length is not odd.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":13622,"byte_end":13658,"line_start":353,"line_end":353,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":17387,"byte_end":17390,"line_start":453,"line_end":453,"column_start":12,"column_end":15},"name":"new","qualname":"<RealToComplexEven<T>>::new","value":"pub fn new(usize, &mut FftPlanner<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new RealToComplex FFT for input data of a given length, and uses the given FftPlanner to build the inner FFT.\n Panics if the length is not even.\n","sig":null,"attributes":[{"value":"/ Create a new RealToComplex FFT for input data of a given length, and uses the given FftPlanner to build the inner FFT.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":17211,"byte_end":17333,"line_start":451,"line_end":451,"column_start":5,"column_end":127}},{"value":"/ Panics if the length is not even.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":17338,"byte_end":17375,"line_start":452,"line_end":452,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":24610,"byte_end":24613,"line_start":630,"line_end":630,"column_start":12,"column_end":15},"name":"new","qualname":"<ComplexToRealOdd<T>>::new","value":"pub fn new(usize, &mut FftPlanner<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new ComplexToReal FFT for input data of a given length, and uses the given FftPlanner to build the inner FFT.\n Panics if the length is not odd.\n","sig":null,"attributes":[{"value":"/ Create a new ComplexToReal FFT for input data of a given length, and uses the given FftPlanner to build the inner FFT.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":24435,"byte_end":24557,"line_start":628,"line_end":628,"column_start":5,"column_end":127}},{"value":"/ Panics if the length is not odd.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":24562,"byte_end":24598,"line_start":629,"line_end":629,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":28500,"byte_end":28503,"line_start":739,"line_end":739,"column_start":12,"column_end":15},"name":"new","qualname":"<ComplexToRealEven<T>>::new","value":"pub fn new(usize, &mut FftPlanner<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new ComplexToReal FFT for input data of a given length, and uses the given FftPlanner to build the inner FFT.\n Panics if the length is not even.\n","sig":null,"attributes":[{"value":"/ Create a new ComplexToReal FFT for input data of a given length, and uses the given FftPlanner to build the inner FFT.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":28324,"byte_end":28446,"line_start":737,"line_end":737,"column_start":5,"column_end":127}},{"value":"/ Panics if the length is not even.","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":28451,"byte_end":28488,"line_start":738,"line_end":738,"column_start":5,"column_end":42}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":5950,"byte_end":5958,"line_start":151,"line_end":151,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":6090,"byte_end":6098,"line_start":157,"line_end":157,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":38}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":6170,"byte_end":6178,"line_start":163,"line_end":163,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":40}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":11551,"byte_end":11565,"line_start":299,"line_end":299,"column_start":17,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":13377,"byte_end":13391,"line_start":345,"line_end":345,"column_start":29,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":101}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":13469,"byte_end":13485,"line_start":351,"line_end":351,"column_start":17,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":104}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":14097,"byte_end":14113,"line_start":368,"line_end":368,"column_start":38,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":17184,"byte_end":17201,"line_start":450,"line_end":450,"column_start":17,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":18178,"byte_end":18195,"line_start":477,"line_end":477,"column_start":38,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":24409,"byte_end":24425,"line_start":627,"line_end":627,"column_start":17,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":129}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":25093,"byte_end":25109,"line_start":645,"line_end":645,"column_start":38,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":28297,"byte_end":28314,"line_start":736,"line_end":736,"column_start":17,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":141}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":29269,"byte_end":29286,"line_start":762,"line_end":762,"column_start":38,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":5950,"byte_end":5958,"line_start":151,"line_end":151,"column_start":23,"column_end":31},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":152},"to":{"krate":2,"index":8708}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":6090,"byte_end":6098,"line_start":157,"line_end":157,"column_start":23,"column_end":31},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":152},"to":{"krate":1,"index":2324}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":6170,"byte_end":6178,"line_start":163,"line_end":163,"column_start":6,"column_end":14},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":152},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":7344,"byte_end":7348,"line_start":209,"line_end":209,"column_start":29,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":2834},"to":{"krate":0,"index":65}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":7351,"byte_end":7355,"line_start":209,"line_end":209,"column_start":36,"column_end":40},"kind":"SuperTrait","from":{"krate":2,"index":2822},"to":{"krate":0,"index":65}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":9261,"byte_end":9265,"line_start":246,"line_end":246,"column_start":29,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":2834},"to":{"krate":0,"index":74}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":9268,"byte_end":9272,"line_start":246,"line_end":246,"column_start":36,"column_end":40},"kind":"SuperTrait","from":{"krate":2,"index":2822},"to":{"krate":0,"index":74}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":11551,"byte_end":11565,"line_start":299,"line_end":299,"column_start":17,"column_end":31},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":89},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":13377,"byte_end":13391,"line_start":345,"line_end":345,"column_start":29,"column_end":43},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":89},"to":{"krate":2,"index":2800}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":13469,"byte_end":13485,"line_start":351,"line_end":351,"column_start":17,"column_end":33},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":43},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":14097,"byte_end":14113,"line_start":368,"line_end":368,"column_start":38,"column_end":54},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":43},"to":{"krate":0,"index":65}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":17184,"byte_end":17201,"line_start":450,"line_end":450,"column_start":17,"column_end":34},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":48},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":18178,"byte_end":18195,"line_start":477,"line_end":477,"column_start":38,"column_end":55},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":48},"to":{"krate":0,"index":65}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":24409,"byte_end":24425,"line_start":627,"line_end":627,"column_start":17,"column_end":33},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":54},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":25093,"byte_end":25109,"line_start":645,"line_end":645,"column_start":38,"column_end":54},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":54},"to":{"krate":0,"index":74}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":28297,"byte_end":28314,"line_start":736,"line_end":736,"column_start":17,"column_end":34},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":59},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/spluta1/.cargo/registry/src/github.com-1ecc6299db9ec823/realfft-2.0.1/src/lib.rs","byte_start":29269,"byte_end":29286,"line_start":762,"line_end":762,"column_start":38,"column_end":55},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":59},"to":{"krate":0,"index":74}}]}